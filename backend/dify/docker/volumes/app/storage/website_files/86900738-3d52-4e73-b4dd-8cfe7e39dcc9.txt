[{"title": null, "description": null, "source_url": "https://docs.substrate.io/build/application-development/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nApplication development\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/application-development.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nApplication development\n=======================\n\nAs a blockchain developer, you might not be directly involved in building front-end applications. However, most applications that run on a blockchain require some form of front-end or user-facing client to enable users or other programs to access and modify the data that the blockchain stores. For example, you might develop a browser-based, mobile, or desktop application that allows users to submit transactions, post articles, view their assets, or track previous activity. The backend for that application is configured in the runtime logic for your blockchain, but it's the front-end client that makes the runtime features accessible to your users.\n\nFor your custom chain to be useful to others, you'll need to provide some type of a client application that allows users to view, interact with, or update information that the blockchain keeps track of. In this article, you'll learn how you can expose information about your runtime so that client applications can use it, see examples of the information exposed, and explore tools and libraries that use this information.\n\n[](/build/application-development/#exposing-runtime-information-as-metadata)\nExposing runtime information as metadata\n---------------------------------------------------------------------------------------------------------------------\n\nTo interact with a Substrate node or the information stored in the blockchain, you need to know how to connect to the chain and how to access the features the runtime exposes to the outside world. In general, this interaction involves a remote procedure call to request information you're interested in retrieving or updating. As an application developer, however, you typically need to know quite a bit more about the runtime logic, including the following details:\n\n*   The version of the runtime that the application is connecting to.\n*   The application programming interfaces that the runtime supports.\n*   The pallets that are implemented for that specific runtime.\n*   All of the functions and their type signatures that are defined for that specific runtime.\n*   All of the custom types that are defined for that specific runtime.\n*   All of the parameters that the runtime exposes for users to set.\n\nBecause Substrate is modular and provides a composable framework for building a blockchain, there's no predefined schema of properties. Instead, every runtime is configured with its own set of properties and those properties\u2014including functions and types\u2014can change over time with upgrades. To capture all of the information that's unique to a runtime, Substrate enables you to generate the runtime **metadata** schema. The metadata for a runtime describes all of the pallets and types that are defined for a specific version of the runtime. For every pallet, the metadata includes information about its storage items, functions, events, errors, and constants. The metadata also includes type definitions for any custom types included in the runtime.\n\nBecause it provides a complete inventory of the runtime, the metadata is the key to enabling client applications to interact with the node, parse responses, and format message payloads.\n\n[](/build/application-development/#generating-metadata)\nGenerating metadata\n---------------------------------------------------------------------------\n\nTo minimize the bandwidth required to transmit data over the network, the metadata schema is encoded using the [SCALE codec library](/reference/scale-codec/)\n. This encoding is done automatically for you when you compile a node by using the [`scale-info`](https://docs.rs/scale-info/latest/scale_info/)\n crate.\n\nAt a high level, generating the metadata involves the following steps:\n\n*   The pallets in the runtime logic expose all of the callable functions, types, parameters, and documentation that need to be encoded in the metadata.\n*   The `scale-info` crate collects type information for the pallets in the runtime and builds a registry of the pallets that exist in a particular runtime and the relevant types for each pallet in the registry. The type information is detailed enough to enable encoding and decoding for every type.\n*   The [`frame-metadata`](https://github.com/paritytech/frame-metadata)\n     crate describes the structure of the runtime based on the registry provided by the `scale-info` crate.\n*   Substrate nodes provide the RPC method `state_getMetadata` to return a complete description of all the types in the current runtime as a hex-encoded vector of SCALE-encoded bytes.\n\nThe following diagram provides a simplified overview of how the metadata is generated when the runtime logic is compiled and then accessed by connecting to the node with an RPC request.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='786' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Compiling the runtime generates the metadata](https://docs.substrate.io/static/cc2f7d59aeb0cc094eda03015a3be74e/97d2a/metadata.png)\n\n[](/build/application-development/#getting-metadata-for-a-runtime)\nGetting metadata for a runtime\n-------------------------------------------------------------------------------------------------\n\nThere are several ways you can get the metadata for a runtime. For example, you can do any of the following:\n\n*   Use [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/rpc)\n     to connect to a blockchain or node and select the **state** endpoint and the **getMetadata** method to return the metadata in JSON format.\n*   Use the command-line `polkadot-js-api` to call the `state_getMetadata` RPC method to return the metadata as a hex-encoded vector of SCALE-encoded bytes.\n*   Use the `subxt metadata` command to download the metadata in JSON, hex, or raw bytes.\n*   Use the `sidecar` API and `/runtime/metadata` endpoint to connect to a node and retrieve the metadata in JSON format.\n\nThe type information provided by the metadata enables applications to communicate with nodes with different versions of the runtime and across chains that expose different calls, events, types, and storage items. The metadata also allows libraries to generate almost all of the code needed to communicate with a given Substrate node, enabling libraries like `subxt` to generate front-end interfaces that are specific to a target chain.\n\n[](/build/application-development/#client-applications-and-metadata)\nClient applications and metadata\n-----------------------------------------------------------------------------------------------------\n\nClient applications use the metadata to interact with the node, parse responses, and format message payloads sent to the node. To use the metadata, client applications must use the [SCALE codec library](/reference/scale-codec/)\n to encode and decode RPC payloads. Because the metadata exposes how every type is expected to be decoded, applications can send, retrieve, and process application information without manual encoding and decoding.\n\n[](/build/application-development/#metadata-format)\nMetadata format\n-------------------------------------------------------------------\n\nAlthough the SCALE-encoded bytes can be decoded using the `frame-metadata` and [`parity-scale-codec`](https://github.com/paritytech/parity-scale-codec)\n libraries, there are other tools\u2014such as `subxt` and the Polkadot-JS API\u2014that can convert the raw data to human-readable JSON format.\n\nThe types and type definitions included in the metadata returned by the `state_getMetadata` RPC call depend on the metadata version of the runtime. In general, the metadata includes the following information:\n\n*   A constant that identifies the file as containing metadata.\n*   The version of the metadata format used in the runtime.\n*   Type definitions for all types used in the runtime and generated by the `scale-info` crate.\n*   Pallet information for all of the pallets included in the runtime in the order that they are defined in the `construct_runtime` macro.\n\nThe following example illustrates a condensed and annotated section of metadata decoded and converted to JSON:\n\n    [\\\n      1635018093,\\\n      {\\\n        \"V14\": {\\\n          \"types\": {\\\n            \"types\": [\\\n              {\\\n                // index of types\\\n              }\\\n            ]\\\n          },\\\n          \"pallets\": [\\\n            {\\\n              // index of pallets and within each pallet the metadata each pallet exposes\\\n            }\\\n          ],\\\n          \"extrinsic\": {\\\n            \"ty\": 126, // the type index identifier that defines the format of an extrinsic\\\n            \"version\": 4, // the transaction version used to encode and decode an extrinsic\\\n            \"signed_extensions\": [\\\n              {\\\n                // index of signed extensions\\\n              }\\\n            ]\\\n          },\\\n          \"ty\": 141 // the type ID for the system pallet\\\n        }\\\n      }\\\n    ]\n\nThe constant `1635018093` is a magic number that identifies the file as a metadata file. The rest of the metadata has divided into the `types`, `pallets` and `extrinsic` sections. The `types` section contains an index of the types and for each type information about its type signature. The `pallets` section contains information about each of the pallets in the runtime. The `extrinsic` section describes the type identifier and transaction format version that the runtime is using. Different extrinsic versions can have different formats, especially when considering [signed transactions](/learn/transaction-types/)\n.\n\n### [](/build/application-development/#pallets)\nPallets\n\nThe following is a condensed and annotated example of a single element in the `pallets` array:\n\n    {\n      \"name\": \"Sudo\",        // name of the pallet\n      \"storage\": {           // storage information for the pallet\n          \"prefix\": \"Sudo\",  // database prefix for the pallet storage items\n          \"entries\": [\\\n            {\\\n              \"name\": \"Key\",\\\n              \"modifier\": \"Optional\",\\\n              \"ty\": {\\\n                 \"Plain\": 0\\\n              },\\\n              \"default\": [\\\n                 0\\\n              ],\\\n              \"docs\": [\\\n                 \"The `AccountId` of the sudo key.\"\\\n              ]\\\n            }\\\n          ]\n      },\n      \"calls\": {       // pallet call types\n          \"ty\": 117    // type identifier in the types section\n      },\n      \"event\": {       // pallet event types\n          \"ty\": 42     // type identifier in the types section\n      },\n      \"constants\": [], // pallet constants\n      \"error\": {       // pallet error types\n          \"ty\": 124    // type identifier in the types section\n              },\n      \"index\": 8       // index identifier for the pallet in the runtime\n    },\n\nEvery element contains the name of the pallet that it represents and information about its storage, calls, events, and errors. You can look up details about the definition of the calls, events, and errors by viewing the type index identifier. The type index identifier for each item is the `u32` integer used to access the type information for that item. For example, the type index identifier for calls in the Sudo pallet is 117. If you view information for that type identifier in the `types` section of the metadata, it provides information about the available calls including the documentation for each call.\n\nFor example, the following is a condensed excerpt of the calls for the Sudo pallet:\n\n        {\n          \"id\": 117,\n          \"type\": {\n              \"path\": [\\\n                  \"pallet_sudo\",\\\n                  \"pallet\",\\\n                  \"Call\"\\\n              ],\n              \"params\": [\\\n                {\\\n                  \"name\": \"T\",\\\n                  \"type\": null\\\n                }\\\n              ],\n              \"def\": {\n                  \"variant\": {\n                      \"variants\": [\\\n                        {\\\n                          \"name\": \"sudo\",\\\n                          \"fields\": [\\\n                            {\\\n                              \"name\": \"call\",\\\n                              \"type\": 114,\\\n                              \"typeName\": \"Box<<T as Config>::RuntimeCall>\"\\\n                            }\\\n                      ],\\\n                          \"index\": 0,\\\n                          \"docs\": [\\\n                            \"Authenticates the sudo key and dispatches a function call with `Root` origin.\",\\\n                          ]\\\n                        },\\\n                        {\\\n                          \"name\": \"sudo_unchecked_weight\",\\\n                          \"fields\": [\\\n                            {\\\n                              \"name\": \"call\",\\\n                              \"type\": 114,\\\n                              \"typeName\": \"Box<<T as Config>::RuntimeCall>\"\\\n                            },\\\n                            {\\\n                              \"name\": \"weight\",\\\n                              \"type\": 8,\\\n                              \"typeName\": \"Weight\"\\\n                            }\\\n                          ],\\\n                          \"index\": 1,\\\n                          \"docs\": [\\\n                            \"Authenticates the sudo key and dispatches a function call with `Root` origin.\",\\\n                          ]\\\n                        },\\\n                        {\\\n                          \"name\": \"set_key\",\\\n                          \"fields\": [\\\n                            {\\\n                              \"name\": \"new\",\\\n                              \"type\": 103,\\\n                              \"typeName\": \"AccountIdLookupOf<T>\"\\\n                            }\\\n                          ],\\\n                          \"index\": 2,\\\n                          \"docs\": [\\\n                            \"Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo\",\\\n                          ]\\\n                        },\\\n                        {\\\n                          \"name\": \"sudo_as\",\\\n                          \"fields\": [\\\n                            {\\\n                              \"name\": \"who\",\\\n                              \"type\": 103,\\\n                              \"typeName\": \"AccountIdLookupOf<T>\"\\\n                            },\\\n                            {\\\n                              \"name\": \"call\",\\\n                              \"type\": 114,\\\n                              \"typeName\": \"Box<<T as Config>::RuntimeCall>\"\\\n                            }\\\n                          ],\\\n                          \"index\": 3,\\\n                          \"docs\": [\\\n                            \"Authenticates the sudo key and dispatches a function call with `Signed` origin from\",\\\n                            \"a given account.\",\\\n                          ]\\\n                        }\\\n                      ]\n                    }\n                  },\n                },\n\nFor each field, you can access type information and metadata for the following:\n\n*   Storage metadata provides the information that is required to enable applications to get information for specific storage items.\n*   Call metadata includes information about the runtime calls defined by the `#[pallet]` macro including call names, arguments and documentation.\n*   Event metadata provides the metadata generated by the `#[pallet::event]` macro, including the name, arguments, and documentation for each pallet event.\n*   Constants metadata provides metadata generated by the `#[pallet::constant]` macro, including the name, type, and hex-encoded value of the constant.\n*   Error metadata provides metadata generated by the `#[pallet::error]` macro, including the name and documentation for each pallet error.\n\nYou should note that type identifiers change from time to time. You should avoid relying type identifiers in your applications.\n\n### [](/build/application-development/#extrinsic)\nExtrinsic\n\nExtrinsic metadata is generated by the runtime and provides useful information about how transactions are formatted. When decoded, the metadata contains the transaction version and the list of signed extensions. For example:\n\n        \"extrinsic\": {\n            \"ty\": 126,\n            \"version\": 4,\n            \"signed_extensions\": [\\\n              {\\\n                \"identifier\": \"CheckNonZeroSender\",\\\n                \"ty\": 132,\\\n                \"additional_signed\": 41\\\n              },\\\n              {\\\n                \"identifier\": \"CheckSpecVersion\",\\\n                \"ty\": 133,\\\n                \"additional_signed\": 4\\\n              },\\\n              {\\\n                \"identifier\": \"CheckTxVersion\",\\\n                \"ty\": 134,\\\n                \"additional_signed\": 4\\\n              },\\\n              {\\\n                \"identifier\": \"CheckGenesis\",\\\n                \"ty\": 135,\\\n                \"additional_signed\": 11\\\n              },\\\n              {\\\n                \"identifier\": \"CheckMortality\",\\\n                \"ty\": 136,\\\n                \"additional_signed\": 11\\\n              },\\\n              {\\\n                \"identifier\": \"CheckNonce\",\\\n                \"ty\": 138,\\\n                \"additional_signed\": 41\\\n              },\\\n              {\\\n                \"identifier\": \"CheckWeight\",\\\n                \"ty\": 139,\\\n                \"additional_signed\": 41\\\n              },\\\n              {\\\n                \"identifier\": \"ChargeTransactionPayment\",\\\n                \"ty\": 140,\\\n                \"additional_signed\": 41\\\n              }\\\n            ]\n          },\n          \"ty\": 141\n        }\n      }\n    ]\n\nThe type system is composite. Each type identifier contains a reference to a specific type or to another type identifier that provides information about the associated primitive types. For example, you can encode the `BitVec<Order, Store>` type, but to decode it properly you must know the types used for the `Order` and `Store` types. To find type information for `Order` and `Store`, you can use the path in the decoded JSON to locate their type identifiers.\n\n[](/build/application-development/#rpc-apis)\nRPC APIs\n-----------------------------------------------------\n\nSubstrate comes with the following APIs to interact with a node:\n\n*   [`AuthorApiServer`](https://paritytech.github.io/substrate/master/sc_rpc/author/trait.AuthorApiServer.html)\n    : An API to make calls into a full node, including authoring extrinsics and verifying session keys.\n*   [`ChainApiServer`](https://paritytech.github.io/substrate/master/sc_rpc/chain/trait.ChainApiServer.html)\n    : An API to retrieve block header and finality information.\n*   [`OffchainApiServer`](https://paritytech.github.io/substrate/master/sc_rpc/offchain/trait.OffchainApiServer.html)\n    : An API for making RPC calls for offchain workers.\n*   [`StateApiServer`](https://paritytech.github.io/substrate/master/sc_rpc/state/trait.StateApiServer.html)\n    : An API to query information about on-chain state such as runtime version, storage items, and proofs.\n*   [`SystemApiServer`](https://paritytech.github.io/substrate/master/sc_rpc/system/trait.SystemApiServer.html)\n    : An API to retrieve information about network state, such as connected peers and node roles.\n\n[](/build/application-development/#connecting-to-a-node)\nConnecting to a node\n-----------------------------------------------------------------------------\n\nApplications typically connect to Substrate nodes by using JSON-RPC methods through an open HTTP or WebSocket port. Most applications use a WebSocket port because a single connection can be used for multiple messages to and from a node. With an HTTP connection, applications can only send and receive responses one message at a time. The most common reason you would use HTTP to connect to a node is if you want to fetch data using offchain workers. For more information about using offchain workers, see [Offchain operations](/learn/offchain-operations/)\n.\n\nAs an alternative to connecting using RPC, you can use the [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n and a light client node to connect to Substrate-based blockchains. Substrate Connect runs in a browser and allows applications to create their own light client node and connect directly to the exposed JSON-RPC endpoint. Applications that integrate Substrate Connect rely on in-browser local memory to establish a connection with the light client node.\n\n[](/build/application-development/#building-front-end-applications)\nBuilding front-end applications\n---------------------------------------------------------------------------------------------------\n\nThe following libraries use the [JSON-RPC API](https://github.com/paritytech/jsonrpsee)\n to enable applications to interact with Substrate nodes:\n\n| Name | Description | Language |\n| --- | --- | --- |\n| [Chain API](https://github.com/paritytech/capi) | Provides a TypeScript toolkit for crafting interactions with Substrate-based chains. The toolkit includes FRAME utilities, a functional effect system, and a fluent API to facilitate multi-step, multi-chain interactions for end users without compromising performance or safety. |     |\n| [Polkadot JS API](https://polkadot.js.org/docs/api) | Provides a Javascript library for building applications that can dynamically adapt to changes in a node\u2014such as block explorers or chain-agnostic services\u2014when interacting with Substrate-based chains. You can use this library in combination with popular front-end frameworks such as React. | Javascript |\n| [Polkadot JS extension](https://polkadot.js.org/docs/extension/) | Provides an API for interacting with browser extensions and providers built with the Polkadot JS API. | Javascript |\n| [Substrate Connect](/learn/light-clients-in-substrate-connect/) | Provides a library and a browser extension to build applications that connect directly to Substrate-based chains using an in-browser light client node. Substrate Connect enables you to build applications that connect to multiple chains, providing end users with a single experience if they use your application to interact with multiple chains. | Javascript |\n| [`subxt`](https://github.com/paritytech/subxt/) | Provides a Rust library that generates a statically-typed Rust interface to interact with a node's RPC APIs based on a target chain's metadata. The `subxt`\u2014submit extrinsics\u2014library enables you to build lower-level applications\u2014such as non-browser graphical user interfaces, chain-specific CLIs, or user-facing applications that require type-safe communication between the node and the generated interface\u2014that prevent users from constructing transactions with bad inputs or submitting calls that don't exist. | Rust |\n| [`txwrapper`](https://github.com/paritytech/txwrapper) | Provides a Javascript library for generating signed Substrate transactions offline. This library enables you to write scripts to generate signed transactions while offline that can later by submitted to a node. This functionality is especially useful for testing and decoding transactions. | Javascript |\n\nFor more information about the JSON-RPC API and the latest interface specification, see the [JSON-RPC specification](https://paritytech.github.io/json-rpc-interface-spec/)\n.\n\n[](/build/application-development/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------------\n\n*   [Substrate Connect](https://github.com/paritytech/substrate-connect)\n    \n*   [Install the front-end template](/tutorials/build-a-blockchain/build-local-blockchain/#install-the-front-end-template)\n    \n*   [Generate a metadata QR code](https://github.com/paritytech/metadata-portal)\n    \n*   [Get backwards-compatible metadata (desub)](https://github.com/paritytech/desub)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/remote-procedure-calls/)\n[Next \u2192](/build/chain-spec/)\n\nON THIS PAGE\n\n[Exposing runtime information as metadata](#exposing-runtime-information-as-metadata)\n[Generating metadata](#generating-metadata)\n[Getting metadata for a runtime](#getting-metadata-for-a-runtime)\n[Client applications and metadata](#client-applications-and-metadata)\n[Metadata format](#metadata-format)\n[RPC APIs](#rpc-apis)\n[Connecting to a node](#connecting-to-a-node)\n[Building front-end applications](#building-front-end-applications)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/build-a-deterministic-runtime/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nBuild a deterministic runtime\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/build-a-deterministic-runtime.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nBuild a deterministic runtime\n=============================\n\nBy default, the Rust compiler produces optimized WebAssembly binaries. These binaries are fine for working in an isolated environment where you are doing local development. However, the WebAssembly binaries that the compiler builds by default aren't guaranteed to be deterministically reproducible. Each time the compiler generates the WebAssembly runtime, it might produce slightly different WebAssembly bytecode. This is problematic in a blockchain network where all nodes must use exactly the same raw chain specification file.\n\nWorking with builds that aren't guaranteed to be deterministically reproducible can cause other problems, too. For example, if you want to automate the build process for your blockchain, you'll want to ensure that the same code always produces the same result. Without a deterministic build, compiling the WebAssembly runtime with every push would produce inconsistent and unpredictable results, making it difficult to integrate with any automation and likely to continuously break your CI/CD pipeline. Deterministic builds\u2014code that always compiles to exactly the same bytecode\u2014also ensure that the WebAssembly runtime can be inspected, audited, and independently verified.\n\n[](/build/build-a-deterministic-runtime/#tooling-for-webassembly-runtime)\nTooling for WebAssembly runtime\n---------------------------------------------------------------------------------------------------------\n\nTo help you compile the WebAssembly runtime in a deterministic way, you can use the same tooling that produces the runtime for Polkadot, Kusama, and other Substrate-based chains. This tooling\u2014referred to collectively as the Substrate runtime toolbox or `srtool`\u2014ensures that the same source code consistently compiles to an identical WebAssembly blob.\n\nThe core component of the Substrate runtime toolbox (`srtool`) is a Docker container. This container is executed as part of a Docker image. The name of the `srtool` Docker image specifies the version of the Rust compiler used to compile the code included in the image. For example, the image `paritytech/srtool:1.62.0` indicates that the code in the image was compiled with version `1.62.0` of the `rustc` compiler.\n\n[](/build/build-a-deterministic-runtime/#working-with-the-docker-container)\nWorking with the Docker container\n-------------------------------------------------------------------------------------------------------------\n\nBecause `srtool` is a Docker container, you must have Docker available in your build environment to use it. However, you don't need to know anything about using Docker to build a Substrate-based chain using `srtool` because you can use the `srtool-cli` command-line interface to work with Docker images.\n\nThe `srtool-cli` package is a command-line utility written in Rust that installs an executable program called `srtool` on your computer. This program simplifies your interactions with the srtool Docker container. Over time, the tooling around the `srtool` Docker image has expanded to include the following tools and helper programs:\n\n*   [srtool-cli](https://github.com/chevdor/srtool-cli)\n     provides a command-line interface to pull the srtool Docker image, get information about the image and tooling used to interact with it, and build the runtime using the `srtool` Docker container.\n*   [subwasm](https://github.com/chevdor/subwasm)\n     provides command-line options for working with the metadata and WebAssembly runtime built using srtool. The `subwasm` program is also used internally to perform tasks in the `srtool` image.\n*   [srtool-actions](https://github.com/chevdor/srtool-actions)\n     provides GitHub actions to integrate builds produced using the `srtool` image with your GitHub CI/CD pipelines.\n*   [srtool-app](https://gitlab.com/chevdor/srtool-app)\n     provides a simple graphical user interface for building the runtime using the `srtool` Docker image.\n\n[](/build/build-a-deterministic-runtime/#prepare-the-environment)\nPrepare the environment\n-----------------------------------------------------------------------------------------\n\nTo work with the Docker image that executes the code in the `srtool` Docker container, you must have a Docker account and Docker command-line or desktop tools available. You should also prepare your development environment with the specific command-line tools you want to use. At a minimum, you should install the `srtool-cli` program to enable you to work with the Docker image using a simple command-line interface.\n\nTo prepare the environment:\n\n1.  Open a terminal shell in your Substrate development environment.\n2.  Verify that you have Docker installed by running the following command:\n    \n        docker --version\n    \n    If Docker is installed, the command displays version information. For example:\n    \n        Docker version 20.10.17, build 100c701\n    \n3.  Install the `srtool` command-line interface by running the following command:\n    \n        cargo install --git https://github.com/chevdor/srtool-cli\n    \n4.  View usage information for the `srtool` command-line interface by running the following command:\n    \n        srtool help\n    \n5.  Download the latest `srtool` Docker image by running the following command:\n    \n        srtool pull\n    \n\n[](/build/build-a-deterministic-runtime/#start-a-deterministic-build)\nStart a deterministic build\n-------------------------------------------------------------------------------------------------\n\nAfter you have prepared the environment, you can start compiling the WebAssembly runtime using the `srtool` Docker image.\n\nTo build the runtime:\n\n1.  Open a terminal shell in your Substrate development environment.\n2.  Compile the runtime for a project by running a command similar to the following:\n    \n        srtool build --app --package node-template-runtime --runtime-dir runtime\n    \n    *   The name you specify for the `--package` should be the name defined in the `Cargo.toml` file for the runtime.\n    *   The path you specify for the `--runtime-dir` should be the path to the `Cargo.toml` file for the runtime. If the `Cargo.toml` file for the runtime is located in a `runtime` subdirectory\u2014for example, runtime/kusama\u2014you can omit the `--runtime-dir` command-line option.\n\n[](/build/build-a-deterministic-runtime/#add-workflow-actions)\nAdd workflow actions\n-----------------------------------------------------------------------------------\n\nIf you use a GitHub repository for your Substrate-based project, you can set up a GitHub workflow to start compiling the WebAssembly runtime automatically.\n\nTo add a workflow for building the runtime:\n\n1.  Create a `.github/workflows` directory in your Substrate repository.\n2.  In the `.github/workflows` directory, click **Add file**, then select **Create new file**.\n3.  Copy the sample GitHub action from `basic.yml` example in the [srtools-actions](https://github.com/chevdor/srtool-actions)\n     repository and paste it into the file you created in the previous step.\n4.  Modify the settings in the sample action to suit your chain.\n    \n    For example, modify the following settings:\n    \n    *   the name of the chain\n    *   the name of the runtime package\n    *   the location of the runtime\n5.  Type a name for the action file in your Substrate repository.\n6.  Click **Commit new file**.\n\n[](/build/build-a-deterministic-runtime/#downloading-from-docker-hub)\nDownloading from Docker Hub\n-------------------------------------------------------------------------------------------------\n\nYou must have a Docker account and Docker installed in your build environment to use the Substrate runtime toolbox. If you sign in to Docker Hub, you can search for the `paritytech/srtool` container and find the corresponding images with tag names that identify the Rust compiler version and the build script version.\n\nIf you don't want to use [`srtool-cli`](/reference/command-line-tools/srtool/#srtool-cli)\n or [`srtool-app`](https://gitlab.com/chevdor/srtool-app)\n to work with the `paritytech/srtool` container, you can pull a `paritytech/srtool` container image directly from Docker Hub.\n\nTo pull the image from Docker Hub:\n\n1.  Sign in to Docker Hub.\n2.  Type `paritytech/srtool` in the Search field and press Enter.\n3.  Click **paritytech/srtool**, then click **Tags**.\n4.  Copy the command for the image you want to pull.\n5.  Open a terminal shell on your local computer.\n6.  Paste the command you copied from the Docker Hub.\n    \n    For example, you might run a command similar to the following:\n    \n        docker pull paritytech/srtool:1.62.0\n    \n    The command downloads and unpacks the image.\n    \n\n### [](/build/build-a-deterministic-runtime/#naming-convention-for-images)\nNaming convention for images\n\nUnlike many Docker images, there is no `latest` tag for the `srtool` image. If you are downloading an image directly from Docker Hub, you'll need to select the image that's compatible with the version of the Rust compiler you have installed. The naming convention for `paritytech/srtool` Docker images specifies the version of the Rust compiler used to compile the code included in the image. There are also images that specify both a compiler version and the version of the build script used. For example, an image named `paritytech/srtool:1.62.0-0.9.19` was compiled with version `1.62.0` of the `rustc` compiler but using the version `0.9.19` of the build script.\n\nImages that only specifies the compiler version always contains the latest version of the software. In most cases, that's the image you should use.\n\n### [](/build/build-a-deterministic-runtime/#compiler-version)\nCompiler version\n\nIf you are downloading an image directly from Docker Hub, you should first check the version of the Rust compiler that you are using to ensure the image is compatible with the version of Rust you have installed. If you aren't sure which version of the Rust compiler you use, you can run the following command to check the version you have installed:\n\n    rustc --version\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/build-process/)\n[Next \u2192](/build/troubleshoot-your-code/)\n\nON THIS PAGE\n\n[Tooling for WebAssembly runtime](#tooling-for-webassembly-runtime)\n[Working with the Docker container](#working-with-the-docker-container)\n[Prepare the environment](#prepare-the-environment)\n[Start a deterministic build](#start-a-deterministic-build)\n[Add workflow actions](#add-workflow-actions)\n[Downloading from Docker Hub](#downloading-from-docker-hub)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/build-process/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nBuild process\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/build-process.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nBuild process\n=============\n\nIn [Architecture](/learn/architecture/)\n, you learned that a Substrate node consists of an outer node host and a runtime execution environment. These node components communicate with each other through runtime API calls and host function calls. In this section, you'll learn more about how the Substrate runtime is compiled into a platform-native executable and into a WebAssembly (Wasm) binary that is stored on the blockchain. After you see the inner-working of how the binaries are compiled, you'll learn more about why there are two binaries, when they are used, and how you can change the execution strategies, if you need to.\n\n[](/build/build-process/#compiling-an-optimized-artifact)\nCompiling an optimized artifact\n-----------------------------------------------------------------------------------------\n\nYou probably already know that you can compile a Substrate node by running the `cargo build --release` command in the root directory for a Substrate node project. This command builds both the platform-specific executable and WebAssembly binaries for the project and produces an **optimized** executable artifact. Producing the optimized executable artifact includes some post-compilation processing.\n\nAs part of the optimization process, the WebAssembly runtime binary is compiled and compressed through a series of internal steps before it's included in the genesis state for a chain. To give you a better understanding of the process, the following diagram summarizes the steps.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='689.5211658570437' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![WebAssembly compiled and compressed before included on-chain](https://docs.substrate.io/static/2e75c4294caf833ab4c372b45ce9df16/6d44e/node-executable.png)\n\nThe following sections describe the build process in more detail.\n\n### [](/build/build-process/#build-the-webassembly-binary)\nBuild the WebAssembly binary\n\nThe `wasm-builder` is a tool that integrates the process of building the WebAssembly binary for your project into the main `cargo` build process. This tool is published in the `substrate-wasm-builder` crate.\n\nWhen you start the build process, `cargo` builds a dependency graph from all of the `Cargo.toml` in the project. The runtime `build.rs` module then uses the `substrate-wasm-builder` crate to compile the Rust code for the runtime into a WebAssembly binary, creating the initial binary artifact.\n\n#### Features included in WebAssembly\n\nBy default, the `wasm-builder` enables all of the features defined for the project in both the WebAssembly binary and platform-native executable except for the `default` and `std` features that are only enabled for the native build.\n\n#### Environment variables to customize the build process\n\nYou can use the following environment variables to customize how the WebAssembly binaries are built:\n\n| Use this variable | If you want to do this |\n| --- | --- |\n| `SKIP_WASM_BUILD` | Skip building the WebAssembly binary. This is useful when you only need to recompile the native binary. However, if the WebAssembly binary doesn't exist, no binaries are compiled. You can skip WebAssembly builds for individual projects by including the PROJECT_NAME in the environment variable. For example, to skip build the WebAssembly binary for the cargo project node-runtime, you can use the environment variable SKIP_NODE_RUNTIME_WASM\\_BUILD. |\n| `WASM_BUILD_TYPE` | Specify whether the WebAssembly binary is a `release` build or a `debug` build. By default, the build type you specify for the `cargo` command is used. |\n| `FORCE_WASM_BUILD` | Force a WebAssembly build. This environment variable is rarely required because the `wasm-builder` instructs `cargo` to check for file changes. |\n| `WASM_BUILD_RUSTFLAGS` | Extend the `RUSTFLAGS` passed to the `cargo build` command while building the WebAssembly binary. |\n| `WASM_BUILD_NO_COLOR` | Disable color output of the WebAssembly build. |\n| `WASM_TARGET_DIRECTORY` | Copy the WebAssembly binary to the specified directory. The path needs to be absolute. |\n| `WASM_BUILD_TOOLCHAIN` | Specify the toolchain to use to build the WebAssembly binaries. The format needs to be the same as used by `cargo`, for example, `nightly-2020-02-20`. |\n| `CARGO_NET_OFFLINE` | Prevent network access for some or all processes launched to support offline environments. |\n\n#### Compact and compress the WebAssembly binary\n\nThe `substrate-wasm-builder` crate uses lower-level processes to optimize instruction sequences and remove any unnecessary code\u2014such as the code used for debugging\u2014to create a compact WebAssembly binary. The binary is then further compressed to minimize the size of the final WebAssembly binary. When the compiler processes the `runtime/src/lib.rs` file for the node, it sees the requirement to include the generated WebAssembly binary:\n\n    include!(concat!(env!(\"OUT_DIR\"), \"/wasm_binary.rs\"));\n\nThis code includes the compact WebAssembly binary (`WASM_BINARY`) and the uncompressed WebAssembly binary generated by the compiler (`WASM_BINARY_BLOATY`) in its compilation result, and the final executable binary for the project is generated.\n\nAt each stage of the build process, the WebAssembly binary is compressed to a smaller size than earlier. For example, you can compare the sizes of each WebAssembly binary artifact for Polkadot:\n\n    .rw-r--r-- 1.2M pep  1 Dec 16:13 \u2502  \u251c\u2500\u2500 polkadot_runtime.compact.compressed.wasm\n    .rw-r--r-- 5.1M pep  1 Dec 16:13 \u2502  \u251c\u2500\u2500 polkadot_runtime.compact.wasm\n    .rwxr-xr-x 5.5M pep  1 Dec 16:13 \u2502  \u2514\u2500\u2500 polkadot_runtime.wasm\n\nYou should always use the fully compressed runtime (`*_runtime.compact.compressed.wasm`) WebAssembly binaries for on-chain upgrades and relay chain validation. In most cases, there's no need to use the initial WebAssembly binary or interim compact artifacts.\n\n[](/build/build-process/#execution-strategies)\nExecution strategies\n-------------------------------------------------------------------\n\nAfter you have compiled the node with the native and WebAssembly runtime, you use command-line options to specify how the node should operate. For details about the command-line options you can use to start the node, see the [node-template](/reference/command-line-tools/node-template/)\n command-line reference.\n\nWhen you start the node, the node executable uses the command-line options you specify to initialize the chain and generate the genesis block. As part of this process, the node adds the WebAssembly runtime as a storage item value and a corresponding `:code` key.\n\nAfter you start the node, the running node selects the runtime to use. By default, the node always uses the WebAssembly runtime for all operations, including:\n\n*   Synchronization\n*   Authoring new block\n*   Importing blocks\n*   Interacting with offchain workers\n\n### [](/build/build-process/#selection-of-the-webassembly-runtime)\nSelection of the WebAssembly runtime\n\nUsing the WebAssembly runtime is important because the WebAssembly and native runtimes can diverge. For example, if you make changes to the runtime, you must generate a new WebAssembly blob and update the chain to use the new version of the WebAssembly runtime. After the update, the WebAssembly runtime differs from the native runtime. To account for this difference, all of the execution strategies treat the WebAssembly representation of the runtime as the canonical runtime. If the native runtime and the WebAssembly runtime versions are different, the WebAssembly runtime is always selected.\n\nBecause the WebAssembly runtime is stored as part of the blockchain state, the network must come to consensus about the representation of this binary. To reach consensus about the binary, the blob that represents the WebAssembly runtime must be exactly the same across all synchronizing nodes.\n\n### [](/build/build-process/#webassembly-execution-environment)\nWebAssembly execution environment\n\nThe WebAssembly execution environment can be more restrictive than the Rust execution environment. For example, the WebAssembly execution environment is a 32-bit architecture with a maximum 4GB of memory. Logic that can be executed in the WebAssembly runtime can always be executed in the Rust execution environment. However, not all logic that can be executed in the Rust runtime can be executed in the WebAssembly runtime. Block authoring nodes typically use the WebAssembly execution environment to help ensure that they produce valid blocks.\n\n### [](/build/build-process/#native-runtime)\nNative runtime\n\nAlthough the WebAssembly runtime is selected by default, it is possible for you to override the runtime selected for all or specific operations by specifying an **execution strategy** as a command-line option.\n\nIf the native runtime and the WebAssembly runtime share the same [version](/maintain/runtime-upgrades/#runtime-versioning)\n, you can selectively use the native runtime instead of the WebAssembly runtime, in addition to the WebAssembly runtime, or as a fallback if using the WebAssembly runtime fails. In general, you would only choose to use the native runtime for performance reasons or because it's a less restrictive environment than the WebAssembly runtime. For example, you might want to use the native runtime for initial synchronization. To use the native runtime for synchronizing blocks, you can start the node using the `--execution-syncing native` or `--execution-syncing native-else-wasm` command-line option.\n\nFor information about using the command-line options to specify an execution strategy for all or specific operations, see [node-template](/reference/command-line-tools/node-template/)\n. For information about the execution strategy variant, see [ExecutionStrategy](https://paritytech.github.io/substrate/master/sc_cli/arg_enums/enum.ExecutionStrategy.html)\n\n[](/build/build-process/#building-webassembly-without-a-native-runtime)\nBuilding WebAssembly without a native runtime\n---------------------------------------------------------------------------------------------------------------------\n\nA WebAssembly runtime is required to start a new chain. After an initial WebAssembly runtime is provided, the blob that represents the WebAssembly runtime can be passed to other nodes as part of a [chain specification](/build/chain-spec/)\n. In some rare cases, you might want to compile the WebAssembly target without the native runtime. For example, if you're testing a WebAssembly runtime to prepare for a forkless upgrade, you might want to compile just the new WebAssembly binary.\n\nAlthough it's a rare use case, you can use the [build-only-wasm.sh](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/.maintain/build-only-wasm.sh)\n script to build the `no_std` WebAssembly binary without compiling the native runtime.\n\nYou can also use the `wasm-runtime-overrides` command-line option to load the WebAssembly from the file system.\n\n[](/build/build-process/#compiling-rust-without-webassembly)\nCompiling Rust without WebAssembly\n-----------------------------------------------------------------------------------------------\n\nIf you want to compile the Rust code for a node without building a new WebAssembly runtime, you can use the `SKIP_WASM_BUILD` as a build option. This option is primarily used for faster compile time when you don't need to update the WebAssembly.\n\n[](/build/build-process/#where-to-go-next)\nWhere to go next\n-----------------------------------------------------------\n\n*   [Wasm-builder source](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/wasm-builder/src/lib.rs)\n    \n*   [Rust compilation options](https://doc.rust-lang.org/cargo/commands/cargo-build.html#compilation-options)\n    \n*   [Discussion: Removing the native runtime](https://github.com/paritytech/substrate/issues/10579)\n    \n\n**Last edit:** January 21, 2024\n\n[\u2190 Previous](/build/genesis-configuration/)\n[Next \u2192](/build/build-a-deterministic-runtime/)\n\nON THIS PAGE\n\n[Compiling an optimized artifact](#compiling-an-optimized-artifact)\n[Execution strategies](#execution-strategies)\n[Building WebAssembly without a native runtime](#building-webassembly-without-a-native-runtime)\n[Compiling Rust without WebAssembly](#compiling-rust-without-webassembly)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/chain-spec/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nChain spec\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/chain-spec.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nChain specification\n===================\n\nIn Substrate, a **chain specification** is the collection of information that describes a Substrate-based blockchain network. For example, the chain specification identifies the network that a blockchain node connects to, the other nodes that it initially communicates with, and the initial state that nodes must agree on to produce blocks.\n\nThe chain specification is defined using the [`ChainSpec` struct](https://paritytech.github.io/substrate/master/sc_service/struct.GenericChainSpec.html)\n. The `ChainSpec` struct separates the information required for a chain into two parts:\n\n*   A client specification that contains information used by the Substrate **outer node** to communicate with network participants and send data to telemetry endpoints. Many of these chain specification settings can be overridden by command-line options when starting a node or can be changed after the blockchain has started.\n*   The initial **genesis state** that all nodes in the network agree on. The genesis state must be established when the blockchain is first started and it cannot be changed thereafter without starting an entirely new blockchain.\n\n[](/build/chain-spec/#customizing-outer-node-settings)\nCustomizing outer node settings\n--------------------------------------------------------------------------------------\n\nFor the outer node, the chain specification controls information such as:\n\n*   The boot nodes the node communicates with.\n*   The server endpoints for the node to send telemetry data to.\n*   The human- and machine-readable names for the network the node connects to.\n\nBecause the Substrate framework is extensible, you can also customize the chain specification to include additional information. For example, you can to configure the outer node to connect to specific blocks at specific heights to prevent long range attacks when syncing a new node from genesis.\n\nNote that you can customize outer node settings after genesis. However, nodes only add peers that use the same `protocolId`.\n\n[](/build/chain-spec/#customizing-the-genesis-configuration)\nCustomizing the genesis configuration\n--------------------------------------------------------------------------------------------------\n\nAll nodes in the network must agree on the genesis state before they can agree on any subsequent blocks. The information configured in the genesis portion of a chain specification is used to create a genesis block. It takes effect when you start the first node and cannot be overridden with command-line options. However, you can configure some information in the genesis portion of a chain specification. For example, you can customize the genesis portion of the chain specification to include information such as:\n\n*   Initial token holder balances.\n*   Accounts that are initially part of a governance council.\n*   The administrative account that controls the `sudo` key.\n\nSubstrate nodes also include the compiled WebAssembly for the runtime logic on the chain, so the initial runtime must also be supplied in the chain specification.\n\n[](/build/chain-spec/#storing-chain-specification-information)\nStoring chain specification information\n------------------------------------------------------------------------------------------------------\n\nThe information in the chain specification can be stored as Rust code or as a JSON file. Substrate nodes typically include at least one, and often many, hard-coded chain specifications. Including this information as Rust code directly in the node ensures that the node can connect to at least one chain without any additional information supplied by the node operator. If you are building a blockchain with the intent to define a main network, this main network specification is usually hard-coded in the outer node.\n\nAlternatively, you can use the `build-spec` subcommand to serialize the chain specification into a JSON file. It is common to distribute a JSON-encoded chain specification with a node binary when launching a test network or a private chain.\n\n[](/build/chain-spec/#providing-the-chain-specification-to-start-a-node)\nProviding the chain specification to start a node\n--------------------------------------------------------------------------------------------------------------------------\n\nEach time you start a node, you provide the chain specification that the node should use. In the simplest case, the node uses a default chain specification that is hard-coded into the node binary. You can choose an alternative hard-coded chain specification by using the `--chain` command-line option when you start a node. For example, you can instruct the node to use the chain specification associated with the string \"local\" by specifying `--chain local` as a command-line option.\n\nIf you don't want to start a node with a hard-coded chain specification, you can provide it as a JSON file. For example, you can instruct the node to use the chain specification in the `someCustomSpec.json` file by specifying `--chain=someCustomSpec.json` as a command-line option. If you specify a JSON file, the node attempts to de-serialize the provided JSON chain specification, and then use it.\n\n[](/build/chain-spec/#declaring-storage-items-for-a-runtime)\nDeclaring storage items for a runtime\n--------------------------------------------------------------------------------------------------\n\nIn most cases, a Substrate runtime requires some storage items to be configured at genesis. For example, if you are developing the runtime with FRAME, any storage item that is declared with the `Config` trait in the runtime requires configuration at genesis. These storage values are configured in the genesis portion of the chain specification. For information about how to set initial values for storage items in a pallet, see [Genesis configuration](/build/genesis-configuration/)\n.\n\n### [](/build/chain-spec/#creating-a-custom-chain-specification)\nCreating a custom chain specification\n\nIf you are creating a one-off network for development, testing, or demonstration purposes, you might want a fully customized chain specification. To create a completely customized chain spec, you can export the default chain spec to JSON format, then edit the fields in the JSON file. For example, you can use the `build-spec`sub-command to export the chain specification to a JSON file:\n\n    substrate build-spec > myCustomSpec.json\n\nAfter you export the chain spec, you can modify any of its fields in a text editor. For example, you might want to change the network name, bootnodes, and any genesis storage items, such as token balances. After editing the JSON file, you can start the node using the customized JSON. For example:\n\n    substrate --chain=myCustomSpec.json\n\n[](/build/chain-spec/#raw-chain-specifications)\nRaw chain specifications\n------------------------------------------------------------------------\n\nSubstrate nodes support runtime upgrades. With runtime upgrades, the blockchain's runtime can be different than when the chain began. Chain specifications contain information structured in a way that can be understood by the node's runtime. For example, consider this excerpt from the default chain specification for the Substrate node template:\n\n    \"sudo\": {\n      \"key\": \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"\n    }\n\nIn the JSON file, this key and its associated value are human-readable text. However, this information can't be stored in this format in the underlying storage structures that Substrate uses. Before you can use the chain specification to initialize the genesis storage for a node, the human-readable keys must be transformed into actual storage keys that allow the values to be stored in the [storage trie](/learn/state-transitions-and-storage/)\n. This transformation is straight-forward, but it requires that the chain specification to be encoded in a format that node runtime can read.\n\nTo enable a node with an upgraded runtime to synchronize with a chain from genesis, the human-readable chain specification is encoded in a **raw** format. The raw format enables you distribute chain specifications that all nodes can use to synchronize the chain even after runtime upgrades.\n\nSubstrate-based nodes support the `--raw` command-line option to produce the raw chain specifications. For example, you can produce the raw chain specification for a human-readable `myCustomSpec.json` file by running the following command:\n\n    substrate build-spec --chain=myCustomSpec.json --raw > customSpecRaw.json\n\nAfter the conversion to the raw format, the `sudo key` snippet looks like this:\n\n    \"0x50a63a871aced22e88ee6466fe5aa5d9\": \"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\",\n\n[](/build/chain-spec/#where-to-go-next)\nWhere to go next\n--------------------------------------------------------\n\n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n*   [How-to: Configure genesis state](/reference/how-to-guides/basics/configure-genesis-state/)\n    \n*   [How-to: Customize a chain specification](/reference/how-to-guides/basics/customize-a-chain-specification/)\n    \n*   [Node template chain specification](https://github.com/substrate-developer-hub/substrate-node-template/blob/master/node/src/chain_spec.rs)\n    \n*   [ChainSpec struct](https://paritytech.github.io/substrate/master/sc_service/struct.GenericChainSpec.html)\n    \n*   [ProtocolId struct](https://paritytech.github.io/substrate/master/sc_network/config/struct.ProtocolId.html)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/application-development/)\n[Next \u2192](/build/genesis-configuration/)\n\nON THIS PAGE\n\n[Customizing outer node settings](#customizing-outer-node-settings)\n[Customizing the genesis configuration](#customizing-the-genesis-configuration)\n[Storing chain specification information](#storing-chain-specification-information)\n[Providing the chain specification to start a node](#providing-the-chain-specification-to-start-a-node)\n[Declaring storage items for a runtime](#declaring-storage-items-for-a-runtime)\n[Raw chain specifications](#raw-chain-specifications)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/custom-pallets/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nCustom pallets\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/custom-pallets.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nCustom pallets\n==============\n\nThe most common approach to building a custom runtime is to start with [existing pallets](/reference/frame-pallets/)\n. For example, you might start building an application-specific staking pallet that uses the types exposed in existing Collective and Balances pallets, but includes custom runtime logic required by your application and its staking rules.\n\nAlthough [FRAME pallets](/reference/frame-pallets/)\n provides an overview of the most common pallets, the best place to find current information about existing pallets is the [Rust API](/reference/rust-api/)\n documentation for crates that use the naming convention `pallet_*`.\n\nIf you don't find a pallet that meets your needs, you can use FRAME macros to build the scaffolding for a custom pallet.\n\n[](/build/custom-pallets/#pallet-macros-and-attributes)\nPallet macros and attributes\n------------------------------------------------------------------------------------\n\nFRAME makes extensive use of Rust macros to encapsulate complex blocks of code. The most important macros for building custom pallets is the [`pallet`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html)\n macro. The `pallet` macro defines the core set of attributes that a pallet must provide. For example:\n\n*   `#[pallet::pallet]` is a mandatory pallet attribute that enables you to define a structure (struct) for the pallet so it can store data that can be easily retrieved.\n*   `#[pallet::config]` is a mandatory pallet attribute that enables you to define the configuration trait for the pallet.\n\nThe `pallet` macro also defines the core set of attributes that pallets typically provide. For example:\n\n*   `#[pallet::call]` is the attribute that enables you to implement dispatchable function calls for the pallet.\n*   `#[pallet::error]` is the attribute that enables you to generate dispatchable errors.\n*   `#[pallet::event]` is the attribute that enables you to generate dispatchable events.\n*   `#[pallet::storage]` is the attribute that enables you to generate a storage instance in the runtime and its metadata.\n\nThese core attributes align with the decisions you need to make when writing a custom pallet. For example, you need to consider:\n\n*   Storage. What data does your pallet store? Is the data stored on-chain or off-chain?\n*   Functions. What are the callable functions that your pallet exposes?\n*   Transactionality. Are your function calls designed to atomically modify storage?\n*   Hooks. Will your pallet be making calls to any runtime hooks?\n\nMacros simplify the code you need to write to implement custom runtime logic. However, some macros enforce particular requirements on function declarations. For example, the `Config` trait must be bound by `frame_system::Config` and the `#[pallet::pallet]` struct must be declared as `pub struct Pallet<T>(_);`. For an overview of the macros used in FRAME pallets, see [FRAME macros](/reference/frame-macros/)\n.\n\n**Last edit:** June 12, 2023\n\n[\u2190 Previous](/build/smart-contracts-strategy/)\n[Next \u2192](/build/runtime-storage/)\n\nON THIS PAGE\n\n[Pallet macros and attributes](#pallet-macros-and-attributes)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/events-and-errors/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nEvents and errors\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/events-and-errors.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nEvents and errors\n=================\n\nA pallet can emit events when it wants to send notification about changes or conditions in the runtime to external entities like users, chain explorers, or dApps.\n\nIn custom pallets, you can define:\n\n*   what type of events you want to be emitted\n*   what information is contained within those events\n*   when those events are emitted\n\n[](/build/events-and-errors/#declaring-an-event)\nDeclaring an event\n-------------------------------------------------------------------\n\nEvents are created using the `#[pallet::event]` macro. For example:\n\n    #[pallet::event]\n    #[pallet::generate_deposit(pub(super) fn deposit_event)]\n    pub enum Event<T: Config> {\n    \t/// Set a value.\n    \tValueSet { value: u32, who: T::AccountId },\n    }\n\nThen, the `RuntimeEvent` type is needed to aggregate them for the runtime.\n\n    #[pallet::config]\n    \tpub trait Config: frame_system::Config {\n    \t\t/// The overarching event type.\n    \t\ttype RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;\n    \t}\n\n[](/build/events-and-errors/#exposing-events-to-your-runtime)\nExposing events to your runtime\n---------------------------------------------------------------------------------------------\n\nAny events you define in your pallet must be exposed to the runtime in the `/runtime/src/lib.rs`file.\n\nTo expose events to the runtime:\n\n1.  Open the `/runtime/src/lib.rs`file in a text editor.\n2.  Implement the `RuntimeEvent` type in the configuration trait for your pallet:\n    \n        impl template::Config for Runtime {\n        \t type RuntimeEvent = RuntimeEvent;\n        }\n    \n3.  Add the `RuntimeEvent` type to the `construct_runtime!` macro:\n    \n        construct_runtime!(\n        \t pub enum Runtime where\n        \t Block = Block,\n        \t   NodeBlock = opaque::Block,\n        \t   UncheckedExtrinsic = UncheckedExtrinsic\n        \t {\n           // --snip--\n        \t   TemplateModule: template::{Pallet, Call, Storage, Event<T>},\n        \t   //--add-this------------------------------------->\n        \t\t }\n        );\n    \n    In this example, the event is a generic type and requires the `<T>` parameter. The `<T>` parameter isn't needed if your events don't use generic types.\n    \n\n[](/build/events-and-errors/#depositing-an-event)\nDepositing an event\n---------------------------------------------------------------------\n\nSubstrate provides a default implementation of how to deposit an event using macros. Depositing an event has the following structure:\n\n    // 1. Use the `generate_deposit` attribute when declaring the Events enum.\n    #[pallet::event]\n    \t#[pallet::generate_deposit(pub(super) fn deposit_event)] // <------ here ----\n    \t#[pallet::metadata(...)]\n    \tpub enum Event<T: Config> {\n    \t\t// --snip--\n    \t}\n    \n    // 2. Use `deposit_event` inside the dispatchable function\n    #[pallet::call]\n    \timpl<T: Config> Pallet<T> {\n    \t\t#[pallet::weight(1_000)]\n    \t\tpub(super) fn set_value(\n    \t\t\torigin: OriginFor<T>,\n    \t\t\tvalue: u64,\n    \t\t) -> DispatchResultWithPostInfo {\n    \t\t\tlet sender = ensure_signed(origin)?;\n    \t\t\t// --snip--\n    \t\t\tSelf::deposit_event(RawEvent::ValueSet(value, sender));\n    \t\t}\n    \t}\n\nThe default behavior of this function is to call [`deposit_event`](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.deposit_event)\n from the FRAME system, which writes the event to storage.\n\nThis function places the event in the System pallet's runtime storage for that block. At the beginning of a new block, the System pallet automatically removes all events that were stored from the previous block.\n\nEvents deposited using the default implementation are directly supported by downstream libraries like the [Polkadot-JS API](https://github.com/polkadot-js/api)\n. However, you can implement your own `deposit_event` function if you want to handle events differently.\n\n[](/build/events-and-errors/#supported-types)\nSupported types\n-------------------------------------------------------------\n\nEvents can emit any type which supports type encoding using [SCALE codec](/reference/scale-codec/)\n.\n\nIn the case where you want to use Runtime generic types like `AccountId` or `Balances`, you need to include a [`where` clause](https://doc.rust-lang.org/rust-by-example/generics/where.html)\n to define those types as shown in the example above.\n\n[](/build/events-and-errors/#listening-to-events)\nListening to events\n---------------------------------------------------------------------\n\nThe Substrate RPC does not directly expose an endpoint for querying events. If you used the default implementation, you can see the list of events for the current block by querying the storage of the System pallet. Otherwise, the [Polkadot-JS API](https://github.com/polkadot-js/api)\n supports a WebSocket subscription on runtime events.\n\n[](/build/events-and-errors/#errors)\nErrors\n-------------------------------------------\n\nRuntime code should explicitly and gracefully handle all error cases. Functions in the runtime code must be non-throwing functions that never cause the compiler to [panic](https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html)\n. A common idiom for writing non-throwing Rust code is to write functions that return [`Result` types](https://paritytech.github.io/substrate/master/frame_support/dispatch/result/enum.Result.html)\n. The `Result` enum type possesses an `Err` variant that allows a function to indicate that it failed to execute successfully without needing to panic. Function calls that can be dispatched to the runtime in the FRAME development evironment _must_ return a [`DispatchResult` type](https://paritytech.github.io/substrate/master/frame_support/dispatch/type.DispatchResult.html)\n that _could_ be a [`DispatchError` variant](https://paritytech.github.io/substrate/master/frame_support/dispatch/enum.DispatchError.html)\n if the function encountered an error.\n\nEach FRAME pallet can define a custom `DispatchError` by using the `#[pallet::error]` macro. For example:\n\n    #[pallet::error]\n    pub enum Error<T> {\n    \t\t/// Error names should be descriptive.\n    \t\tInvalidParameter,\n    \t\t/// Errors should have helpful documentation associated with them.\n    \t\tOutOfSpace,\n    \t}\n\nThe FRAME Support module also includes a helpful [`ensure!` macro](https://paritytech.github.io/substrate/master/frame_support/macro.ensure.html)\n that can be used to check pre-conditions and emit an error if they are not met.\n\n    frame_support::ensure!(param < T::MaxVal::get(), Error::<T>::InvalidParameter);\n\n[](/build/events-and-errors/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------\n\n*   [Frame macros](/reference/frame-macros/)\n    \n*   [Polkadot-JS API](https://github.com/polkadot-js/api)\n    .\n*   [`construct_runtime!` macro](https://paritytech.github.io/substrate/master/frame_support/macro.construct_runtime.html)\n    \n*   [`#[frame_support::pallet]` macro](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html)\n    \n*   [`[pallet::error]` macro](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#error-palleterror-optional)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/pallet-coupling/)\n[Next \u2192](/build/randomness/)\n\nON THIS PAGE\n\n[Declaring an event](#declaring-an-event)\n[Exposing events to your runtime](#exposing-events-to-your-runtime)\n[Depositing an event](#depositing-an-event)\n[Supported types](#supported-types)\n[Listening to events](#listening-to-events)\n[Errors](#errors)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nBuild\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nBuild\n=====\n\nThe topics in this section provide a more detailed exploration of the code used to construct the runtime logic, including the libraries and tools available for building and interacting with the node and a closer look at how the logic is compiled to build a Substrate node.\n\n*   [Smart contracts](/build/smart-contracts-strategy/)\n     summarizes how you can use build smart contracts as an approach to application development in a Substrate-based chain.\n*   [Custom pallets](/build/custom-pallets/)\n     exposes the macros and attributes that form the foundation for building custom pallets.\n*   [Runtime storage](/build/runtime-storage/)\n     offers a closer look at storage structure and how to navigate to data stored in the runtime.\n*   [Transactions, weights, and fees](/build/tx-weights-fees/)\n     explains the role of weights and fees in executing transactions and the mechanics of how fees are calculated and refunded.\n*   [Pallet coupling](/build/pallet-coupling/)\n     describes how pallets can be tightly or loosely coupled in a runtime.\n*   [Events and errors](/build/events-and-errors/)\n     explains how to emit events and errors from the runtime.\n*   [Randomness](/build/randomness/)\n     suggests ways you can include randomness in applications that run on a Substrate-based blockchain.\n*   [Privileged calls and origins](/build/origins/)\n     describes how you can use predefined or custom origins to identify the originator of a function call.\n*   [Remote procedure calls](/build/remote-procedure-calls/)\n     summarizes how you can use remote procedure calls and RPC methods to interact with a Substrate node.\n*   [Application development](/build/application-development/)\n     introduces the role of metadata and front-end libraries as tools for building applications that run on the blockchain.\n*   [Chain specification](/build/chain-spec/)\n     discusses the use of chain specifications, including what you can and can't modify, and how to distribute customized chain specifications.\n*   [Genesis configuration](/build/genesis-configuration/)\n     describes the main elements of the genesis configuration.\n*   [Build process](/build/build-process/)\n     delves into the details of how the Rust code compiles to a Rust binary and a WebAssembly target and how these two targets are used to optimize node operations.\n*   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n    s xplains how to use the Substrate runtime toolbox (`srtool`) and Docker to build the WebAssembly runtime for Substrate-based chains.\n*   [Troubleshoot your code](/build/troubleshoot-your-code/)\n     highlights general and Substrate-specific coding techniques for troubleshooting issues and following best practices.\n\n**Last edit:** April 4, 2023\n\n[\u2190 Previous](/install/troubleshoot-rust-issues/)\n[Next \u2192](/build/smart-contracts-strategy/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/genesis-configuration/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nGenesis configuration\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/genesis-configuration.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nGenesis configuration\n=====================\n\n**\u26a0\ufe0f WARNING:** This page contains outdated information. Please refer to the [Rust docs](https://paritytech.github.io/polkadot-sdk/master/frame_support/pallet_macros/attr.genesis_build.html)\n for the most up-to-date documentation on this topic.\n\nThe first block produced by any blockchain is referred to as the genesis block. The hash associated with this block is the top-level parent of all blocks produced after that first block.\n\nThe Substrate node template provides the genesis configuration\u2014the initial state\u2014for a subset of pallets by default. As you add custom logic to the runtime\u2014for example, by adding predefined or custom pallets\u2014you might find that you want to modify the genesis configuration to include other storage items or set different initial values.\n\nAs you learned in [Chain specification](/build/chain-spec/)\n, the chain specification you use to start a node determines the genesis configuration for that node. However, the chain specification doesn't create the storage items that get initialized when you start a node. Instead, the storage items are defined in the pallets included in the runtime as described in [Runtime storage](/build/runtime-storage/)\n.\n\nAfter you create storage items for the runtime, you can choose whether they should be set to some initial value as part of the genesis configuration and included in the genesis block.  \nTo specify the storage items that you want to set an initial state for, Substrate provides two specialized FRAME attribute macros.\n\nThe macros you can use to initialize storage items as part of the genesis configuration for a chain are:\n\n*   The `#[pallet::genesis_config]` macro defines the `GenesisConfig` data type and initializes storage items.\n*   The `#[pallet::genesis_build]` macro builds the genesis configuration.\n\nThese macros are used in combination with the chain specification to define the initial state of the runtime.\n\n[](/build/genesis-configuration/#configure-a-simple-storage-value)\nConfigure a simple storage value\n---------------------------------------------------------------------------------------------------\n\nThe following example demonstrates adding a single storage value to the genesis configuration for the `pallet_template`. By default, the `pallet_template` has one storage item that isn't initialized in the genesis block. This example illustrates how you can use the `#[pallet::genesis_config]` and `#[pallet::genesis_build]` macros to set an initial value for the storage value as part of the genesis configuration for your chain.\n\n### [](/build/genesis-configuration/#configure-macros-in-the-pallet)\nConfigure macros in the pallet\n\nTo initialize a storage item for the `pallet_template`:\n\n1.  Open a new terminal shell and navigate to the root directory for the node template.\n2.  Open the `pallets/template/src/lib.rs` file in a text editor.\n3.  Add the `#[pallet::genesis_config]` macro and add the storage value `something` as the `GenesisConfig` storage item for the pallet. For example, add the following macro to the file:\n    \n        // Test Genesis Configuration\n        #[pallet::genesis_config]\n        #[derive(Default)]\n        pub struct GenesisConfig {\n              pub something: u32,\n        }\n    \n\n    In this example, the `#[derive(Default)]` macro is required to satisfy a trait bound requirement in `frame_support::traits::GenesisBuild`.\n    \n    4. Add the `#[pallet::genesis_build]` macro:\n    \n     ```rust\n     #[pallet::genesis_build]\n     impl<T: Config> GenesisBuild<T> for GenesisConfig {\n        fn build(&self) { }\n     }\n\nIn this example, there's no special handling for the `build` function to perform.\n\n5.  Save your changes and close the file.\n6.  Verify that the pallet compiles by running the following command:\n    \n        cargo build --package pallet-template\n    \n\n### [](/build/genesis-configuration/#configure-the-chain-specification)\nConfigure the chain specification\n\nNow that you have configured the pallet to initialize a storage value in the genesis block, you can set an initial value for that storage item in the chain specification.\n\n1.  Open the `node/src/chain_spec.rs` file in a text editor.\n2.  Add the `TemplateModuleConfig` to the `node_template_runtime`.\n    \n    For example:\n    \n        use node_template_runtime::{\n          AccountId, AuraConfig, BalancesConfig, RuntimeGenesisConfig, GrandpaConfig, Signature, SudoConfig, SystemConfig, TemplateModuleConfig, WASM_BINARY,\n        };\n    \n3.  Locate the `GenesisConfig` and set the initial value for the `something` storage item.\n    \n    For example, in the `node/src/chain_spec.rs` file:\n    \n        -> GenesisConfig {\n            GenesisConfig {\n                    system: SystemConfig {\n                            // Add Wasm runtime to storage.\n                            code: wasm_binary.to_vec(),\n                    },\n        \n                    template_module: TemplateModuleConfig {\n                           something: 221u32,\n                    },\n        \n                    transaction_payment: Default::default(),\n            }\n          }\n    \n\n[](/build/genesis-configuration/#adding-genesis-configuration-to-the-runtime)\nAdding genesis configuration to the runtime\n-------------------------------------------------------------------------------------------------------------------------\n\nAfter you use the [`#[pallet::genesis_config]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#genesis-config-palletgenesis_config-optional)\n macro to add the `GenesisConfig` to each pallet where it's needed, you must include the `Config` trait for each pallet in the runtime to enable the runtime to initialize storage items in the genesis block.\n\nAll of the `GenesisConfig` types for the pallets that included in the construction of the runtime are then aggregated into a single `RuntimeGenesisConfig` type for that runtime.\n\nThe aggregated `RuntimeGenesisConfig` implements the [`BuildStorage`](https://paritytech.github.io/substrate/master/sp_runtime/trait.BuildStorage.html)\n trait to build all of the initial storage items for the runtime. For example, the node template runtime builds storage items for the following pallets that have a `RuntimeGenesisConfig` specified by default:\n\n*   [System pallet](/build/genesis-configuration/#system-pallet)\n    \n*   [Aura pallet](/build/genesis-configuration/#aura-pallet)\n    \n*   [Grandpa pallet](/build/genesis-configuration/#grandpa-pallet)\n    \n*   [Balances pallet](/build/genesis-configuration/#balances-pallet)\n    \n*   [TransactionPayment pallet](/build/genesis-configuration/#transactionpayment-pallet)\n    \n*   [Sudo pallet](/build/genesis-configuration/#sudo-pallet)\n    \n\n### [](/build/genesis-configuration/#system-pallet)\nSystem pallet\n\n    #[pallet::genesis_config]\n    \tpub struct GenesisConfig {\n    \t\t#[serde(with = \"sp_core::bytes\")]\n    \t\tpub code: Vec<u8>,\n    \t}\n\n### [](/build/genesis-configuration/#aura-pallet)\nAura pallet\n\n    #[pallet::genesis_config]\n    \tpub struct GenesisConfig<T: Config> {\n    \t\tpub authorities: Vec<T::AuthorityId>,\n    \t}\n\n### [](/build/genesis-configuration/#grandpa-pallet)\nGrandpa pallet\n\n    #[pallet::genesis_config]\n    \tpub struct GenesisConfig {\n    \t\tpub authorities: AuthorityList,\n    \t}\n\n### [](/build/genesis-configuration/#balances-pallet)\nBalances pallet\n\n    #[pallet::genesis_config]\n    \tpub struct GenesisConfig<T: Config<I>, I: 'static = ()> {\n    \t\tpub balances: Vec<(T::AccountId, T::Balance)>,\n    \t}\n\n### [](/build/genesis-configuration/#transactionpayment-pallet)\nTransactionPayment pallet\n\n    #[pallet::genesis_config]\n    \tpub struct GenesisConfig {\n    \t\tpub multiplier: Multiplier,\n    \t}\n\n### [](/build/genesis-configuration/#sudo-pallet)\nSudo pallet\n\n    #[pallet::genesis_config]\n    \tpub struct GenesisConfig<T: Config> {\n    \t\t/// The `AccountId` of the sudo key.\n    \t\tpub key: Option<T::AccountId>,\n    \t}\n\nBecause these pallets include the #\\[pallet::genesis\\_config\\] macro with a `GenesisConfig` and have the `Config` trait defined in the runtime, they are aggregated into [`node_template_runtime::RuntimeGenesisConfig`](https://paritytech.github.io/substrate/master/node_template_runtime/struct.RuntimeGenesisConfig.html)\n struct for the runtime:\n\n    pub struct RuntimeGenesisConfig {\n        pub system: SystemConfig,\n        pub aura: AuraConfig,\n        pub grandpa: GrandpaConfig,\n        pub balances: BalancesConfig,\n        pub transaction_payment: TransactionPaymentConfig,\n        pub sudo: SudoConfig,\n    }\n\nUltimately, the `RuntimeGenesisConfig` is exposed by way of the [`ChainSpec`](https://paritytech.github.io/substrate/master/sc_chain_spec/trait.ChainSpec.html)\n trait.\n\nFor a more complete example of genesis storage configuration for Substrate, see the [chain specification that ships with the Substrate code base](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/node/cli/src/chain_spec.rs)\n.\n\n[](/build/genesis-configuration/#initialize-storage-items-within-a-pallet)\nInitialize storage items within a pallet\n-------------------------------------------------------------------------------------------------------------------\n\nYou can use the [`#[pallet::genesis_build]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#genesis-build-palletgenesis_build-optional)\n macro to define the initial state of storage items within the pallet itself. Defining the genesis configuration within a pallet allows you to access the pallet's private functions.\n\nThe following example demonstrates using `#[pallet::genesis_config]` and `#[pallet::genesis_build]` to set the initial value of a storage item. In this example, there are two storage items:\n\n*   A list of member account identifiers.\n*   A specific account identifier that designates a member from the list to be the prime member.\n\nThe macros and data types for this example are defined in the `my_pallet/src/lib.rs` file:\n\n    #[pallet::genesis_config]\n    struct GenesisConfig {\n        members: Vec<T::AccountId>,\n        prime: T::AccountId,\n    }\n    \n    #[pallet::genesis_build]\n    impl<T: Config> GenesisBuild<T> for GenesisConfig {\n        fn build(&self) {\n            Pallet::<T>::initialize_members(&self.members);\n            SomeStorageItem::<T>::put(self.prime);\n        }\n    }\n\nThe genesis configuration is defined in the `node/src/chain_spec.rs` file:\n\n    GenesisConfig {\n        my_pallet: MyPalletConfig {\n            members: LIST_OF_IDS,\n            prime: ID,\n        },\n    }\n\nYou can also use the `genesis_build` macro to define a `GenesisConfig` attribute that is not bound to a particular storage item. This can be useful if you want to invoke a private helper function within your pallet that sets several storage items, or to invoke a function defined in some other pallets included within your pallet. For example, using an imaginary private function called `intitialize_members`, the code might look like this:\n\nIn `my_pallet/src/lib.rs`:\n\n    #[pallet::genesis_config]\n    struct GenesisConfig {\n        members: Vec<T::AccountId>,\n        prime: T::AccountId,\n    }\n    \n    #[pallet::genesis_build]\n    impl<T: Config> GenesisBuild<T> for GenesisConfig {\n        fn build(&self) {\n            Pallet::<T>::initialize_members(&config.members);\n            SomeStorageItem::<T>::put(self.prime);\n        }\n    }\n\nIn `chain_spec.rs`:\n\n    GenesisConfig {\n        my_pallet: MyPalletConfig {\n            members: LIST_OF_IDS,\n            prime: ID,\n        },\n    }\n\n**Last edit:** October 6, 2023\n\n[\u2190 Previous](/build/chain-spec/)\n[Next \u2192](/build/build-process/)\n\nON THIS PAGE\n\n[Configure a simple storage value](#configure-a-simple-storage-value)\n[Adding genesis configuration to the runtime](#adding-genesis-configuration-to-the-runtime)\n[Initialize storage items within a pallet](#initialize-storage-items-within-a-pallet)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/origins/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nOrigins\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/origins.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nPrivileged calls and origins\n============================\n\n**\u26a0\ufe0f WARNING:** This page contains outdated information. Please refer to the [Rust docs](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/reference_docs/frame_origin/index.html)\n for the most up-to-date documentation on this topic.\n\nThe runtime origin is used by dispatchable functions to check where a call has come from.\n\n[](/build/origins/#raw-origins)\nRaw origins\n-------------------------------------------\n\nSubstrate defines three raw origins which can be used in your runtime pallets:\n\n    pub enum RawOrigin<AccountId> {\n    \tRoot,\n    \tSigned(AccountId),\n    \tNone,\n    }\n\n*   Root: A system level origin. This is the highest privilege level and can be thought of as the superuser of the runtime origin.\n*   Signed: A transaction origin. This is signed by some on-chain account's private key and includes the account identifier of the signer. This allows the runtime to authenticate the source of a dispatch and subsequently charge transaction fees to the associated account.\n*   None: A lack of origin. This needs to be agreed upon by the validators or validated by a module to be included. This origin type is more complex because it is designed to bypass certain runtime mechanisms. For example, this origin type might be used to allow validators to insert data directly into a block.\n\n[](/build/origins/#origin-call)\nOrigin call\n-------------------------------------------\n\nYou can construct calls within your runtime with any origin. For example:\n\n    // Root\n    proposal.dispatch(system::RawOrigin::Root.into())\n    \n    // Signed\n    proposal.dispatch(system::RawOrigin::Signed(who).into())\n    \n    // None\n    proposal.dispatch(system::RawOrigin::None.into())\n\nYou can look at the source code of the [Sudo module](https://paritytech.github.io/substrate/master/pallet_sudo/index.html)\n for a practical implementation of this.\n\n[](/build/origins/#custom-origins)\nCustom origins\n-------------------------------------------------\n\nIn addition to the three core origin types, runtime developers are also able to define custom origins. These can be used as authorization checks inside functions from specific modules in your runtime, or to define custom access-control logic around the sources of runtime requests.\n\nCustomizing origins allows runtime developers to specify valid origins depending on their runtime logic. For example, it may be desirable to restrict access of certain functions to special custom origins and authorize dispatch calls only from members of a [collective](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/collective)\n. The advantage of using custom origins is that it provides runtime developers a way to configure privileged access over dispatch calls to the runtime.\n\n[](/build/origins/#next-steps)\nNext steps\n-----------------------------------------\n\n### [](/build/origins/#learn-more)\nLearn more\n\n*   Learn about how origin is used in the [`#[pallet::call]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#call-palletcall-optional)\n     macro.\n\n### [](/build/origins/#examples)\nExamples\n\n*   View the [Sudo pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/sudo)\n     to see how it allows a user to call with `Root` and `Signed` origin.\n*   View the [Timestamp pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/timestamp)\n     to see how it validates an a call with `None` origin.\n*   View the [Collective pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/collective)\n     to see how it constructs a custom `Member` origin.\n*   View our recipe for creating and using a custom origin.\n\n### [](/build/origins/#references)\nReferences\n\n*   Visit the reference docs for the [`RawOrigin` enum](https://paritytech.github.io/substrate/master/frame_system/enum.RawOrigin.html)\n    .\n\n**Last edit:** February 27, 2024\n\n[\u2190 Previous](/build/randomness/)\n[Next \u2192](/build/remote-procedure-calls/)\n\nON THIS PAGE\n\n[Raw origins](#raw-origins)\n[Origin call](#origin-call)\n[Custom origins](#custom-origins)\n[Next steps](#next-steps)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/randomness/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nRandomness\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/randomness.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRandomness\n==========\n\nBecause blockchains require deterministic outcomes\u2014where the same input always produces the same output\u2014finding an appropriate source to produce seemingly random results presents a unique challenge. However, there are many applications where randomness can be essential to performing certain operations. For example, you want to include randomness to select the validator responsible for producing a block to prevent validator selection from being predictable, and thereby vulnerable to be exploited in an attack. You might also use randomness in statistical or scientific analyses, in cryptographic operations, or in applications involving gaming or gambling.\n\n[](/build/randomness/#deterministic-randomness)\nDeterministic randomness\n------------------------------------------------------------------------\n\nIn traditional computer applications, what people call random numbers are actually generated using **pseudo-randomness**. Pseudo-randomness depends on a sufficiently random seed\u2014provided by the user or by an external source\u2014and an algorithm that manipulates the seed to generate a series of seemingly-random numbers. The result is a pseudo-random number that is difficult to predict because of the algorithm used to generate it, but deterministic because the same seed input always produces the same series of output.\n\nHowever, applications that run on the blockchain are more tightly constrained because all authorities in the network must agree on any on-chain value, including any randomness data that is injected. Because of this constraint, you can't use real randomness directly in blockchain applications.\n\nFor blockchain applications, the most common approach to providing randomness is a cryptographic primitive called a[verifiable random function](https://en.wikipedia.org/wiki/Verifiable_random_function)\n. A verifiable random function (VRF) is a mathematical operation that takes input and produces a random number and a proof of authenticity that this random number was generated by the submitter. The proof can be verified by any challenger to ensure that the random number generation is valid.\n\nIn the Polkadot ecosystem and Substrate-based chains, verifiable random functions are part of the consensus mechanism provided by the BABE pallet. For more information about the relationship between verifiable random functions and consensus, see [Consensus](/learn/consensus/)\n\n[](/build/randomness/#generate-and-consume-randomness)\nGenerate and consume randomness\n--------------------------------------------------------------------------------------\n\nSubstrate provides a [`Randomness`](https://paritytech.github.io/substrate/master/frame_support/traits/trait.Randomness.html)\n trait called that defines the interface between the logic that **generates randomness** and the logic that **consumes randomness**. This trait allows you to write the logic for generating randomness and consuming randomness independently of each other.\n\n### [](/build/randomness/#generating-randomness)\nGenerating randomness\n\nYou can implement the `Randomness` trait in many different ways, depending on the security guarantees and performance trade-offs that your application requires. Substrate includes two examples of how to implement the `Randomness` trait in pallets that provide different trade-offs between performance, complexity, and security.\n\n*   The [insecure randomness](https://paritytech.github.io/substrate/master/pallet_insecure_randomness_collective_flip/index.html)\n     pallet provides a `random` function that generates pseudo-random values based on the block hashes from the previous 81 blocks.\n    \n    This type of randomness performs well but isn't secure. You should only use this pallet in applications with low security requirements or when testing randomness-consuming applications. You shouldn't use this pallet in a production environment.\n    \n\n\\= The [BABE pallet](https://paritytech.github.io/substrate/master/pallet_babe/index.html)\n provides randomness by using verifiable random functions.\n\nThis pallet provides production-grade randomness, and is used in Polkadot. If you select this pallet as the source of randomness your blockchain must use the blind assignment of blockchain extension ([BABE](/reference/glossary/#blind-assignment-of-blockchain-extension-babe)\n) slot-based consensus for producing blocks.\n\n### [](/build/randomness/#consuming-randomness)\nConsuming randomness\n\nThe `Randomness` trait provides the following methods for consuming randomness:\n\n*   The `random_seed` method takes no parameters and return a raw random value. If you call this method multiple times in a block, it returns the same value each time. Therefore, in most cases, you shouldn't use this method directly.\n*   The `random` method takes a byte-array as a context identifier and returns a result that is unique to this context and independent from other contexts as allowed by the underlying randomness source.\n\nPallets that require random values don't need to provide the randomness source but they do need to specify a randomness source that implements the `Randomness` trait.\n\n### [](/build/randomness/#security-guarantees)\nSecurity guarantees\n\nIt's important to keep in mind that the `Randomness` trait provides a convenient abstraction for defining a randomness source in the runtimes, but the trait itself does not make any security guarantees. It's up to you as a runtime developer to ensure that the randomness source you use meets the security requirements for _all of the pallets_ that consume its randomness.\n\n[](/build/randomness/#where-to-go-next)\nWhere to go next\n--------------------------------------------------------\n\n*   [How-to: Randomness](/reference/how-to-guides/pallet-design/incorporate-randomness/)\n    \n*   [`Randomness`](https://paritytech.github.io/substrate/master/frame_support/traits/trait.Randomness.html)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/events-and-errors/)\n[Next \u2192](/build/origins/)\n\nON THIS PAGE\n\n[Deterministic randomness](#deterministic-randomness)\n[Generate and consume randomness](#generate-and-consume-randomness)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/pallet-coupling/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nPallet coupling\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/pallet-coupling.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nPallet coupling\n===============\n\n**\u26a0\ufe0f WARNING:** This page contains potentially outdated information. Reading it might still be useful, yet we suggest taking it with a grain of salt.\n\nPlease refer to the [\\`polkadot-sdk-docs\\` crate](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/reference_docs/frame_pallet_coupling/index.html)\n for the most up-to-date documentation on this topic.\n\nThe term **coupling** is often used to describe the degree to which two software modules depend on each other. For example, in object-oriented programming tight coupling and loose coupling are used to describe the relationship between objects classes:\n\n*   Tight coupling is when two groups of classes are dependent on each other.\n*   Loose coupling is when a class uses an interface that another class exposes.\n\nIn Substrate, **tight pallet coupling** and **loose pallet coupling** are used to describe how a pallet can call functions in another pallet. Both techniques achieve the same thing in different ways, each having certain trade-offs.\n\n[](/build/pallet-coupling/#tightly-coupled-pallets)\nTightly coupled pallets\n---------------------------------------------------------------------------\n\nBecause tight coupling makes working with pallets less flexible and extensible, you would only use tight pallet coupling if a pallet requires inheriting its coupled counterpart _as a whole_ rather than specific types or methods.\n\nWhen writing a pallet that requires tight coupling, you explicitly specify the pallet's `Config` trait to be bound by the `Config` trait of the pallet to couple with.\n\nAll FRAME pallets are tightly coupled to the `frame_system` pallet. The following example illustrates how to use the `Config` trait of a pallet called `some_pallet` to be tightly coupled with the `frame_system` pallet:\n\n    pub trait Config: frame_system::Config + some_pallet::Config {\n        // --snip--\n    }\n\nThis is very similar to using class inheritance in object-oriented programming. Supplying this trait bound implies that this pallet can only be installed in a runtime that also has `some_pallet` pallet installed. Similar to `frame_system`, the tight coupling in this example would require you to specify `some_pallet` in the coupled pallet's **Cargo.toml** file.\n\nTight coupling has several disadvantages developers should take into account:\n\n*   **Maintainability**: changes in one pallet will often result in needing to modify the other pallet.\n*   **Reusability**: both modules must be included for one to be used, making it more difficult to integrate a tightly coupled pallet.\n\n[](/build/pallet-coupling/#loosely-coupled-pallets)\nLoosely coupled pallets\n---------------------------------------------------------------------------\n\nIn loose pallet coupling, you can specify the traits and function interfaces that certain types need to be bound by.\n\nThe actual implementation of such types happens **outside of the pallet** during the runtime configuration\u2014typically as code defined in the `/runtime/src/lib.rs` file. With loose coupling, you can use types and interfaces from another pallet that has implemented the traits, or you can declare a totally new struct, implement those traits, and assign it when implementing the pallet in runtime.\n\nAs an example, assume you have a pallet that can access account balances and make transfers to another account. This pallet defines a `Currency` trait, which has an **abstract function interface** that will implement the actual transfer logic later.\n\n    pub trait Currency<AccountId> {\n        // -- snip --\n        fn transfer(\n            source: &AccountId,\n            dest: &AccountId,\n            value: Self::Balance,\n            // don't worry about the last parameter for now\n            existence_requirement: ExistenceRequirement,\n        ) -> DispatchResult;\n    }\n\nIn a second pallet, you define the `MyCurrency` associated type and bind it by `Currency<Self::AccountId>` trait so that you can use the balance transfer logic by calling `T::MyCurrency::transfer(...)`.\n\n    pub trait Config: frame_system::Config {\n        type MyCurrency: Currency<Self::AccountId>;\n    }\n    \n    impl<T: Config> Pallet<T> {\n        pub fn my_function() {\n            T::MyCurrency::transfer(&buyer, &seller, price, ExistenceRequirement::KeepAlive)?;\n        }\n    }\n\nNotice that, at this point, you have not specified how the `Currency::transfer()` logic will be implemented. It is only agreed upon that it will be implemented somewhere.\n\nNow, you can use the runtime configuration\u2014`runtime/src/lib.rs`\u2014to implement the pallet and specify the type to be `Balances`.\n\n    impl my_pallet::Config for Runtime {\n        type MyCurrency = Balances;\n    }\n\nThe `Balances` type is specified in `construct_runtime!` macro as part of the [`pallet_balances`](https://paritytech.github.io/substrate/master/pallet_balances/index.html)\n that implements the [`Currency` trait](https://paritytech.github.io/substrate/master/pallet_balances/index.html#implementations-1)\n.\n\nWith the implementation provided by the runtime, you can make use of `Currency<AccountId>` trait in your loosely coupled pallet.\n\nMany FRAME pallets are coupled to this [Currency trait](https://paritytech.github.io/substrate/master/frame_support/traits/tokens/currency/trait.Currency.html)\n in this way.\n\n[](/build/pallet-coupling/#choosing-a-pallet-coupling-strategy)\nChoosing a pallet coupling strategy\n---------------------------------------------------------------------------------------------------\n\nIn general, loose coupling provides more flexibility than tight coupling and is considered a better practice from a system design perspective. It guarantees better maintainability, reusability, and extensibility of your code. However, tight coupling can be useful for pallets that are less complex or that have more overlap in methods and types than differences.\n\nIn FRAME, there are two pallets that are tightly coupled to [`pallet_treasury`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/treasury)\n:\n\n*   [Bounties pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/bounties)\n    \n*   [Tipping pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/tips)\n    \n\nAs a general rule, the more complex a pallet is, the less desirable it is to tightly couple it. This evokes a concept in computer science called [cohesion](https://en.wikipedia.org/wiki/Cohesion_(computer_science))\n, a metric used to examine the overall quality of a software system.\n\n[](/build/pallet-coupling/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------------\n\n*   [How-to: Use loose coupling](/reference/how-to-guides/pallet-design/use-loose-coupling/)\n    \n*   [How-to: Use tight coupling](/reference/how-to-guides/pallet-design/use-tight-coupling/)\n    \n\n**Last edit:** March 6, 2024\n\n[\u2190 Previous](/build/tx-weights-fees/)\n[Next \u2192](/build/events-and-errors/)\n\nON THIS PAGE\n\n[Tightly coupled pallets](#tightly-coupled-pallets)\n[Loosely coupled pallets](#loosely-coupled-pallets)\n[Choosing a pallet coupling strategy](#choosing-a-pallet-coupling-strategy)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/libraries/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nLibraries\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/libraries.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nIntroduction to libraries\n=========================\n\nIn working with the node template, you don\u2019t need to know anything about the underlying architecture or libraries being used because the basic components are already assembled and ready to use.  \nHowever, if you want to design and build a custom blockchain, you might want to be familiar with the libraries available and know what these different libraries do.\n\nIn [Architecture](/learn/architecture/)\n, you learned about the core components of a Substrate node and how different parts of the node take on different responsibilities. On a more technical level, the separation of duties between different layers of a node are reflected in the core libraries used to build a Substrate-based blockchain. The following diagram illustrates how the libraries mirror the outer node and runtime responsibilities and how a library of **primitives** provides the communication layer between the two.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1145' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Core node libraries for the outer node and runtime](https://docs.substrate.io/static/dae77f7ece855ad265b5c93651f4881b/c337e/libraries.png)\n\n[](/build/libraries/#core-node-libraries)\nCore node libraries\n-------------------------------------------------------------\n\nThe libraries that enable a Substrate node to handle its network responsibilities, including consensus and block execution are Rust crates that use the `sc_` prefix in the crate name. For example, the [`sc_service`](https://paritytech.github.io/substrate/master/sc_service/index.html)\n library is responsible for building the networking layer for Substrate blockchains, managing the communication between the network participants and the transaction pool.\n\nThe libraries that provide the communication layer between the outer node and the runtime are Rust crates that use the `sp_` prefix in the crate name. These libraries orchestrate the activities that require the outer node and runtime to interact. For example, the[`sp_std`](https://paritytech.github.io/substrate/master/sp_std/index.html)\n library takes useful primitives from Rust's standard library and makes them usable with any code that depends on the runtime.\n\nThe libraries that enable you to build the runtime logic and to encode and decode the information passed into and out of the runtime are Rust crates that use the `frame_` prefix in the crate name. The `frame_*` libraries provide the infrastructure for the runtime. For example, the [`frame_system`](https://paritytech.github.io/substrate/master/frame_system/index.html)\n library provides a basic set of functions for interacting with other Substrate components and[`frame_support`](https://paritytech.github.io/substrate/master/frame_support/index.html)\n enables you to declare runtime storage items, errors, and events.\n\nIn addition to the infrastructure provided by the `frame_*` libraries, the runtime can include one or more `pallet_*` libraries. Each Rust crate that uses the `pallet_` prefix represents a single FRAME module. In most cases, you use the `pallet_*` libraries to assemble the functionality you want to incorporate in the blockchain to suit your project.\n\nYou can build a Substrate runtime without using the `frame_*` or `pallet_*` libraries using the primitives exposed by the `sp_*` core libraries. However, the `frame_*` or `pallet_*` libraries provide the most efficient path to composing a Substrate runtime.\n\n[](/build/libraries/#modular-architecture)\nModular architecture\n---------------------------------------------------------------\n\nThe separation of the core libraries provides a flexible and modular architecture for writing the blockchain logic. The primitives library provides a foundation that both the outer node and the runtime can build on without communicating directly with each other. Primitive types and traits are exposed in their own separate crates, so they are available to the outer node and runtime components without introducing cyclic dependency issues.\n\n[](/build/libraries/#front-end-libraries)\nFront-end libraries\n-------------------------------------------------------------\n\nIn addition to the core libraries that enable you to build a Substrate-based blockchain, there are client libraries that you can use to interact with Substrate nodes. You can use the client libraries to build application-specific front-ends. In general, the capabilities that the client libraries expose are implemented on top of Substrate remote procedure call (RPC) APIs. For more information about using metadata and front-end libraries to build applications, see [Application development](/build/application-development/#rpc-apis)\n.\n\n[](/build/libraries/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------\n\nNow that you are familiar with the libraries used to build and interact with Substrate nodes, you might want to explore the libraries in more depth. To learn more about the technical details for any library, you should review the [Rust API](https://paritytech.github.io/substrate/master/)\n documentation for that library.\n\n**Last edit:** April 3, 2023\n\n[Next \u2192](/quick-start/)\n\nON THIS PAGE\n\n[Core node libraries](#core-node-libraries)\n[Modular architecture](#modular-architecture)\n[Front-end libraries](#front-end-libraries)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/remote-procedure-calls/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nRemote procedure calls\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/remote-procedure-calls.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRemote procedure calls\n======================\n\nRemote procedure calls, or RPC methods, are a way for an external program\u2014for example, a browser or front-end application\u2014to communicate with a Substrate node. In general, these methods enable an RPC client to connect to an RPC server endpoint to request some type of service. For example, you might use an RPC method to read a stored value, submit a transaction, or request information about the chain a node is connected to.\n\nThe most convenient way to access the default [JSON-RPC methods](https://polkadot.js.org/docs/substrate/rpc/)\n for a Substrate node is through the [Polkadot-JS API](https://polkadot.js.org/docs/api/)\n.\n\n[](/build/remote-procedure-calls/#safe-and-unsafe-rpc-methods)\nSafe and unsafe RPC methods\n------------------------------------------------------------------------------------------\n\nIt's important to be aware that RPC methods can provide access to core node operations, including consensus and storage, and can also be exposed as public interfaces to allow external users to submit transactions to or retrieve information from the blockchain. Therefore, for the security of the blockchain, it's important to consider what different RPC methods expose and whether they should be restricted to running on a local node or made publicly available.\n\n### [](/build/remote-procedure-calls/#public-rpc-interfaces)\nPublic RPC interfaces\n\nSubstrate nodes provide the following command-line options that allow you to expose the RPC interfaces publicly:\n\n    --ws-external\n    --rpc-external\n    --unsafe-ws-external\n    --unsafe-rpc-external\n\nBy default, the node will refuse to start if you try to expose an RPC interface and run a validator node at the same time. The `--unsafe-*` flags allow you to suppress this security measure. Exposing RPC interfaces can open up a huge surface of attacks and has to be carefully reviewed.\n\nThere are quite a few RPC methods that you can use to control the node's behavior, but you should avoid exposing. For example, you should not expose the following RPC methods:\n\n*   [`submit_extrinsic`](https://paritytech.github.io/substrate/master/sc_rpc_api/author/trait.AuthorApiClient.html)\n     - allows submitting transactions to local pool.\n*   [`insert_key`](https://paritytech.github.io/substrate/master/sc_rpc_api/author/trait.AuthorApiClient.html)\n     - allows inserting private keys to local keystore.\n*   [`rotate_keys`](https://paritytech.github.io/substrate/master/sc_rpc_api/author/trait.AuthorApiClient.html)\n     - session keys rotation.\n*   [`remove_extrinsic`](https://paritytech.github.io/substrate/master/substrate_rpc_client/trait.AuthorApi.html#method.remove_extrinsic)\n     - remove and ban extrinsic from the pool.\n*   [`add_reserved_peer`](https://paritytech.github.io/substrate/master/sc_rpc_api/system/trait.SystemApiClient.html)\n     - add reserved node.\n*   [`remove_reserved_peer`](https://paritytech.github.io/substrate/master/sc_rpc_api/system/trait.SystemApiClient.html)\n     - removed reserved node.\n\nYou should also avoid exposing RPC methods that can take a long time to execute, potentially blocking the client from syncing. For example, you should avoid using the following RPC methods:\n\n*   [`storage_keys_paged`](https://paritytech.github.io/substrate/master/sc_rpc_api/state/trait.StateApiClient.html)\n     - get all the keys in the state with a particular prefix and pagination support.\n*   [`storage_pairs`](https://paritytech.github.io/substrate/master/sc_rpc_api/state/trait.StateApiClient.html)\n     - get all the keys in the state with a particular prefix together with their values.\n\nThese RPCs are declared by using the `#[rpc(name = \"rpc_method\")]` macro, where `rpc_method` is be the name of the function, for example, `submit_extrinsic`.\n\nIt's critical to filter out these kind of calls if the requests are coming from untrusted users. The way to do it is through a [JSON-RPC](/reference/glossary/#json-rpc)\n proxy that is able to inspect calls and only pass an allowed set of API calls.\n\n[](/build/remote-procedure-calls/#rpcs-for-remote_externalities)\nRPCs for remote\\_externalities\n-----------------------------------------------------------------------------------------------\n\nSubstrate also provides some specialized RPC methods to call [`remote_externalities`](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/remote-externalities/src/lib.rs#L347-#L746)\n for a node. These specialized methods for remote externalities enable you to make one-off RPC calls to a Substrate node to get information about blocks and headers. The information returned by these calls can be useful for testing purposes with tools like [`try-runtime`](/reference/command-line-tools/try-runtime/)\n.\n\n[](/build/remote-procedure-calls/#endpoints)\nEndpoints\n------------------------------------------------------\n\nWhen you start a Substrate node locally, there is one endpoint available by default:\n\n*   HTTP & WebSocket endpoint: `ws://localhost:9944/`\n\nMost of the Substrate front-end libraries and tools use the endpoint to interact with the blockchain. For example, if you use the Polkadot-JS application to connect to a local node or a public chain, your are typically connecting to the HTTP & WebSocket endpoint. WebSocket connections allow for bidirectional communication between the front-end application and the backend node responding to requests. However, you can also call RPC methods individually without keeping an open communication channel by connecting to the endpoint using `curl` commands. For example, you can use curl commands to get system information or subscribe to a chain to receive notification when there are specific types of changes to the block state.\n\nTo call RPC methods using the endpoint:\n\n1.  Open a terminal shell and change to the root directory for the Substrate node template.\n2.  Start the node locally in development mode by running the following command:\n    \n        ./target/release/node-template --dev\n    \n3.  Connect to the local node and call the `rpc_methods` endpoint by running the following command:\n    \n        curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"rpc_methods\"}' http://localhost:9944/\n    \n    This command returns a list of the JSON-RPC methods exposed for the local node.\n    \n4.  Call additional methods using the appropriate method name.\n    \n    For example, you can run the following command to get version information about the local node:\n    \n        curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"system_version\"}' http://localhost:9944/\n    \n    In most cases, connecting to the RPC endpoint directly returns JSON-formatted results. For example:\n    \n        {\"jsonrpc\":\"2.0\",\"result\":\"4.0.0-dev-de262935ede\",\"id\":1}\n    \n\nFor the return value to be human-readable, you can decode it using SCALE codec. For more information about encoding and decoding information, see [Type encoding (SCALE)](/reference/scale-codec/)\n.\n\nEach storage item has a relative storage key associated to it which is used to [query storage](/main-docs/build/runtime-storage/#querying-storage)\n. This is how RPC endpoints know where to look.\n\n[](/build/remote-procedure-calls/#examples)\nExamples\n----------------------------------------------------\n\n### [](/build/remote-procedure-calls/#state_getmetadata)\nstate\\_getMetadata\n\nTo get metadata for a local node, you can run the following command:\n\n    curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"state_getMetadata\"}' http://localhost:9944/\n\nThis command returns the metadata in hex-encoded bytes rather than a human-readable format. The JavaScript for this RPC request looks like this:\n\n    function get_metadata_request(endpoint) {\n      let request = new Request(endpoint, {\n        method: \"POST\",\n        body: JSON.stringify({\n          id: 1,\n          jsonrpc: \"2.0\",\n          method: \"state_getMetadata\",\n        }),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      return request;\n    }\n\nNaive text decoding:\n\n    function decode_metadata(metadata) {\n      return new TextDecoder().decode(util.hexToU8a(metadata));\n    }\n\n### [](/build/remote-procedure-calls/#state_getstorage)\n`state_getStorage`\n\nRPC request:\n\n    Request:   {\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"state_getStorage\",[\"{storage_key}\"]}\n\nWhere `storage_key` is a parameter generated by the name of a pallet, function and key (optionally):\n\n    function get_runtime_storage_parameter_with_key(module_name, function_name, key) {\n      // We use xxhash 128 for strings the runtime developer can control\n      let module_hash = util_crypto.xxhashAsU8a(module_name, 128);\n      let function_hash = util_crypto.xxhashAsU8a(function_name, 128);\n    \n      // We use blake2 256 for strings the end user can control\n      let key_hash = util_crypto.blake2AsU8a(keyToBytes(key));\n    \n      // Special syntax to concatenate Uint8Array\n      let final_key = new Uint8Array([...module_hash, ...function_hash, ...key_hash]);\n    \n      // Return a hex string\n      return util.u8aToHex(final_key);\n    }\n\n[](/build/remote-procedure-calls/#where-to-go-next)\nWhere to go next\n--------------------------------------------------------------------\n\n*   [Rust implementation of JSON-RPC](https://github.com/paritytech/jsonrpc)\n    \n*   [Type encoding (SCALE)](/reference/scale-codec/)\n    \n*   [Runtime storage](/main-docs/build/runtime-storage/)\n    \n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/build/origins/)\n[Next \u2192](/build/application-development/)\n\nON THIS PAGE\n\n[Safe and unsafe RPC methods](#safe-and-unsafe-rpc-methods)\n[RPCs for remote\\_externalities](#rpcs-for-remote_externalities)\n[Endpoints](#endpoints)\n[Examples](#examples)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/runtime-storage/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nRuntime storage\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/runtime-storage.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRuntime storage structures\n==========================\n\nAs you develop runtime logic, you'll need to make important decisions about the information you store and how to make storing information as efficient as possible. As discussed in [State transitions and storage](/learn/state-transitions-and-storage/)\n, reading and writing data to storage is expensive. In addition, storing unnecessarily large data sets can slow your network and strain system resources.\n\nSubstrate is designed to provide a flexible framework that allows you to build the blockchain that suits your needs. However, you should keep a few basic guidelines in mind when designing runtime storage to ensure that you build a blockchain that is secure, performant, and maintainable in the long-term.\n\n[](/build/runtime-storage/#deciding-what-to-store)\nDeciding what to store\n-------------------------------------------------------------------------\n\nThe fundamental principle for blockchain runtime storage is to minimize both the number and size of the data items you store. For example, you should only store _consensus-critical_ information in the runtime. You shouldn't store intermediate or temporary data in the runtime or data that won't be needed if an operation fails.\n\n[](/build/runtime-storage/#use-hashed-data)\nUse hashed data\n-----------------------------------------------------------\n\nWhenever possible, use techniques like hashing to reduce the amount of data you must store. For example, many governance capabilities\u2014such as the [`propose`](https://paritytech.github.io/substrate/master/pallet_democracy/pallet/enum.Call.html#variant.propose)\n function in the Democracy pallet\u2014allow network participants to vote on the _hash_ of a dispatchable call instead of the call itself. The hash of the call is always bounded in size, whereas the call might be unbounded in length.\n\nUsing the hash of a call is particularly important in the case of runtime upgrades where the dispatchable call takes an entire runtime Wasm blob as its parameter. Because these governance mechanisms are implemented _on-chain_, all the information that is needed to come to consensus on the state of a given proposal must also be stored on-chain - this includes _what_ is being voted on. However, by binding an on-chain proposal to its hash, Substrate's governance mechanisms allow this to be done in a way that defers bringing all the data associated with a proposal on-chain until _after_ it has been approved. This means that storage is not wasted on proposals that fail.\n\nOnce a proposal has passed, someone can initiate the actual dispatchable call (including all its parameters), which will be hashed and compared to the hash in the proposal.\n\nAnother common pattern for using hashes to minimize data that is stored on-chain is to store the pre-image associated with an object in [IPFS](https://docs.ipfs.io)\n; this means that only the IPFS location (a hash that is bounded in size) needs to be stored on-chain.\n\n### [](/build/runtime-storage/#avoid-storing-transient-data)\nAvoid storing transient data\n\nDo not use runtime storage to store intermediate or transient data within the context of an operation that is logically atomic or data that will not be needed if the operation is to fail. This does not mean that runtime storage should not be used to track the state of actions that require multiple atomic operations, as in the case of [the multi-signature capabilities from the Utility pallet](https://paritytech.github.io/substrate/master/pallet_utility/pallet/enum.Call.html#variant.as_multi)\n. In this case, runtime storage is used to track the signatories on a dispatchable call even though a given call may never receive enough signatures to actually be invoked. In this case, each signature is considered an atomic event in the ongoing multi-signature operation. The data needed to record a single signature is not stored until after all the preconditions associated with that signature have been met.\n\n### [](/build/runtime-storage/#create-bounds)\nCreate bounds\n\nCreating bounds on the size of storage items is an extremely effective way to control the use of runtime storage and one that is used repeatedly throughout the Substrate codebase. In general, any storage item whose size is determined by user action should have a bound on it. The multi-signature capabilities from the [Multisig pallet](https://paritytech.github.io/substrate/master/pallet_multisig/pallet/trait.Config.html#associatedtype.MaxSignatories)\n that were described above are one such example. In this case, the list of signatories associated with a multi-signature operation is provided by the multi-signature participants. Because this signatory list is [necessary to come to consensus](/build/runtime-storage/#what-to-store)\n on the state of the multi-signature operation, it must be stored in the runtime. However, to control how much space signatory list can use, the Utility pallet requires users to configure a bound on this number to be included as a precondition before anything is written to storage.\n\n[](/build/runtime-storage/#transactional-storage)\nTransactional storage\n-----------------------------------------------------------------------\n\nAs explained in [State transitions and storage](/learn/state-transitions-and-storage/)\n, runtime storage involves an underlying key-value database and in-memory storage overlay abstractions that keep track of keys and state changes until the values are committed to the underlying database. By default, functions in the runtime write changes to a single in-memory **transactional storage layer** before committing them to the main storage overlay. If an error prevents the transaction from being completed, the changes in the transactional storage layer are discarded instead of being passed on to the main storage overlay and state in the underlying database remains unchanged.\n\n### [](/build/runtime-storage/#adding-transactional-storage-layers)\nAdding transactional storage layers\n\nYou can extend the transactional storage layer by using the `#[transactional]` macro to spawn additional in-memory storage overlays. By spawning additional in-memory transactional storage overlays, you can choose whether you want to commit specific changes to the main storage overlay or not. The additional transactional storage layers give you the flexibility to isolate changes to specific function calls and select at any point which changes to commit.\n\nYou can also nest transactional storage layers up to a maximum of ten nested transactional layers. With each nested transactional storage layer you create, you can choose whether you want to commit changes to the transactional layer below it, giving you a great deal of control over what is committed to the underlying database. Limiting the total number of nested transactional storage layers limits the computational overhead in resolving the changes to be committed.\n\n### [](/build/runtime-storage/#dispatching-transactional-storage-layer-call)\nDispatching transactional storage layer call\n\nIf you want to dispatch a function call within its own transactional layer, you can use the `dispatch_with_transactional(call)` function to explicitly spawn a new transactional layer for the call and use that transactional layer context to handle the result.\n\n### [](/build/runtime-storage/#committing-changes-without-the-transactional-storage-layer)\nCommitting changes without the transactional storage layer\n\nIf you want to commit changes to the main storage overlay without using the default transactional storage layer, you can use the `#[without_transactional]` macro. The `#[without_transactional]` macro enables you to identify a function that is safe to be executed without its own transactional layer.\n\nFor example, you might define a function like this:\n\n    /// This function is safe to execute without an additional transactional storage layer.\n    #[without_transactional]\n    fn set_value(x: u32) -> DispatchResult {\n        Self::check_value(x)?;\n        MyStorage::set(x);\n        Ok(())\n    }\n\nCalling this function doesn't spawn a transactional storage layer.\n\nHowever, if you use the `#[without_transactional]` macro, keep in mind that changes to storage will affect the values in the main in-memory storage overlay. If an error occurs after you have modified storage, those changes will persist, and potentially could result in your database being left in an inconsistent state.\n\n[](/build/runtime-storage/#accessing-runtime-storage)\nAccessing runtime storage\n-------------------------------------------------------------------------------\n\nIn [State transitions and storage](/learn/state-transitions-and-storage/)\n, you learned how Substrate uses storage abstractions to provide read and write access to the underlying key-value database. The FRAME [`Storage`](https://paritytech.github.io/substrate/master/frame_support/storage)\n module simplifies access to these layered storage abstractions. You can use the FRAME storage data structures to read or write any value that can be encoded by the [SCALE codec](/reference/scale-codec/)\n. The storage module provides the following types of storage structures:\n\n*   [StorageValue](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageValue.html)\n     to store any single value, such as a `u64`.\n*   [StorageMap](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageMap.html)\n     to store a single key to value mapping, such as a specific account key to a specific balance value.\n*   [StorageDoubleMap](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageDoubleMap.html)\n     to store values in a storage map with two keys as an optimization to efficiently remove all entries that have a common first key.\n*   [StorageNMap](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageNMap.html)\n     to store values in a map with any arbitrary number of keys.\n\nYou can include any of these storage structures in pallets to introduce new storage items that will become part of the blockchain state. The type of storage items you choose to implement depends entirely on how you want to use the information in the context of the runtime logic.\n\n[](/build/runtime-storage/#simple-storage-values)\nSimple storage values\n-----------------------------------------------------------------------\n\nYou can use `StorageValue` storage items for values that are viewed as a single unit by the runtime. For example, you should use this type of storage for the following common use cases:\n\n*   Single primitive values\n*   Single `struct` data type objects\n*   Single collection of related items\n\nIf you use this type of storage for lists of items, you should be conscious about the size of the lists you store. Large lists and `structs` incur storage costs and iterating over a large list or `struct` in the runtime can affect network performance or stop block production entirely. If iterating over storage exceeds the block production time and your project is a [parachain](/reference/glossary/#parachain)\n, the blockchain will stop producing blocks and functioning.\n\nRefer to the [StorageValue](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageValue.html#required-methods)\n documentation for a comprehensive list of methods that StorageValue exposes.\n\n[](/build/runtime-storage/#single-key-storage-maps)\nSingle key storage maps\n---------------------------------------------------------------------------\n\nMap data structures are ideal for managing sets of items whose elements will be accessed randomly, as opposed to iterating over them sequentially in their entirety. Single key storage maps in Substrate are similar to traditional [hash maps](https://en.wikipedia.org/wiki/Hash_table)\n with key-to-value mapping to perform random lookups. To give you flexibility and control, Substrate allows you to select the hashing algorithm you want to use to generate the map keys. For example, if a map stores sensitive data you might want to generate keys using a hashing algorithm with stronger encryption over a hashing algorithm with better performance but weaker encryption properties. For more information about selecting a hashing algorithm for a map to use, see [Hashing algorithms](/build/runtime-storage/#hashing-algorithms)\n.\n\nRefer to the [StorageMap](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageMap.html#required-methods)\n documentation for a comprehensive list of methods that StorageMap exposes.\n\n[](/build/runtime-storage/#double-key-storage-maps)\nDouble key storage maps\n---------------------------------------------------------------------------\n\n[DoubleStorageMap](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageDoubleMap.html)\n storage items are similar to single key storage maps except that they contain two keys. Using this type of storage structure is useful for querying values with common keys.\n\n[](/build/runtime-storage/#multi-key-storage-maps)\nMulti-key storage maps\n-------------------------------------------------------------------------\n\nThe [StorageNMap](https://paritytech.github.io/substrate/master/frame_support/storage/trait.StorageNMap.html)\n storage structure is also similar to single key and double key storage maps, but enable you to define any number of keys. To specify the keys in a `StorageNMap` structure, you must provide a tuple containing the `NMapKey` struct as a type to the Key type parameter while declaring the `StorageNMap`.\n\nRefer to the [StorageNMap documentation](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.StorageNMap.html)\n for more details about the syntax to use in declaring this type of storage structure.\n\n[](/build/runtime-storage/#iterating-over-storage-maps)\nIterating over storage maps\n-----------------------------------------------------------------------------------\n\nYou can iterate over Substrate storage maps using the map keys and values. However, it's important to keep in mind that maps are often used to track unbounded or very large sets of data, such as accounts and balances. Iterating over a large data set can consume a lot of the limited resources you have available for producing blocks. For example, if the time it takes to iterate over a data set exceeds the maximum time allocated for producing blocks, the runtime might stop producing new blocks, halting the progress of the chain. In addition, the database reads required to access the elements in a storage map far exceeds the database reads required to access the elements in a list. Therefore, it is significantly more costly\u2014in terms of performance and execution time\u2014to iterate over the elements in a storage map than to read the elements in a list.\n\nWith the relative costs in mind, it's generally better to avoid iterating over storage maps in the runtime. However, there are no firm rules about how you use Substrate storage capabilities, and, ultimately, it's up to you to decide the best way to access runtime storage for your application.\n\nSubstrate provides the following methods to enable you to iterate over storage maps:\n\n| Method | Description |\n| --- | --- |\n| `iter()` | Enumerates all elements in the map in no particular order. If you alter the map while doing this, you'll get undefined results. For more information, see [`IterableStorageMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageMap.html#tymethod.iter)<br>, [`IterableStorageDoubleMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageDoubleMap.html#tymethod.iter)<br>, or [`IterableStorageNMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageNMap.html#tymethod.iter)<br>. |\n| `drain()` | Removes all elements from the map and iterate through them in no particular order. If you add elements to the map while doing this, you'll get undefined results. For more information, see [`IterableStorageMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageMap.html#tymethod.drain)<br>, [`IterableStorageDoubleMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageDoubleMap.html#tymethod.drain)<br>, [`IterableStorageNMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageNMap.html#tymethod.drain)<br>. |\n| `translate()` | Translates all elements of the map in no particular order. To remove an element from the map, return `None` from the translation function. For more information, see [`IterableStorageMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageMap.html#tymethod.translate)<br>, [`IterableStorageDoubleMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageDoubleMap.html#tymethod.translate)<br>, [`IterableStorageNMap`](https://paritytech.github.io/substrate/master/frame_support/storage/trait.IterableStorageNMap.html#tymethod.translate)<br>. |\n\n[](/build/runtime-storage/#declaring-storage-items)\nDeclaring storage items\n---------------------------------------------------------------------------\n\nYou can create runtime storage items with the[`#[pallet::storage]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#storage-palletstorage-optional)\n attribute macro in any FRAME-based pallet. The following examples illustrate how to declare different types of storage items.\n\n### [](/build/runtime-storage/#single-storage-value)\nSingle storage value\n\n    #[pallet::storage]\n    type SomePrivateValue<T> = StorageValue<\n        _,\n        u32,\n        ValueQuery\n    >;\n    \n    #[pallet::storage]\n    #[pallet::getter(fn some_primitive_value)]\n    pub(super) type SomePrimitiveValue<T> = StorageValue<_, u32, ValueQuery>;\n    \n    #[pallet::storage]\n    pub(super) type SomeComplexValue<T: Config> = StorageValue<_, T::AccountId, ValueQuery>;\n\n### [](/build/runtime-storage/#single-key-storage-map)\nSingle key storage map\n\n    #[pallet::storage]\n    #[pallet::getter(fn some_map)]\n    pub(super) type SomeMap<T: Config> = StorageMap<\n        _,\n        Blake2_128Concat, T::AccountId,\n        u32,\n        ValueQuery\n    >;\n\n### [](/build/runtime-storage/#double-key-storage-map)\nDouble key storage map\n\n    #[pallet::storage]\n    pub(super) type SomeDoubleMap<T: Config> = StorageDoubleMap<\n        _,\n        Blake2_128Concat, u32,\n        Blake2_128Concat, T::AccountId,\n        u32,\n        ValueQuery\n    >;\n\n### [](/build/runtime-storage/#multi-key-storage-map)\nMulti-key storage map\n\n    #[pallet::storage]\n    #[pallet::getter(fn some_nmap)]\n    pub(super) type SomeNMap<T: Config> = StorageNMap<\n        _,\n        (\n            NMapKey<Blake2_128Concat, u32>,\n            NMapKey<Blake2_128Concat, T::AccountId>,\n            NMapKey<Twox64Concat, u32>,\n        ),\n        u32,\n        ValueQuery,\n    >;\n\nNotice that the map's storage items specify [the hashing algorithm](/build/runtime-storage/#hashing-algorithms)\n that will be used.\n\n### [](/build/runtime-storage/#handling-query-return-values)\nHandling query return values\n\nWhen you declare a storage item, you can specify how queries should handle the return value if there is no value in storage for the specified key. In the storage declaration, you specify the following:\n\n*   [`OptionQuery`](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.OptionQuery.html)\n     to query an optional value from storage and return `Some` if storage contains a value or `None` if there's no value is in storage.\n*   [`ResultQuery`](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.ResultQuery.html)\n     to query a result value from storage and return an error if there's no value is in storage.\n*   [`ValueQuery`](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.ValueQuery.html)\n     to query a value from storage and return the value. You can also use `ValueQuery` to return the default value if you have configured a specific default for a storage item or return the value configured with the `OnEmpty` generic.\n\n### [](/build/runtime-storage/#visibility)\nVisibility\n\nIn the examples above, all the storage items except `SomePrivateValue` are made public by way of the `pub` keyword. Blockchain storage is always publicly visible from _outside_ of the runtime. The visibility of Substrate storage items only impacts whether or not other pallets _within_ the runtime will be able to access a storage item.\n\n### [](/build/runtime-storage/#getter-methods)\nGetter methods\n\nThe `#[pallet::getter(..)]` macro provides an optional `get` extension that can be used to implement a getter method for a storage item on the module that contains that storage item. The extension takes the desired name of the getter function as an argument. If you omit this optional extension, you can access the storage item value, but you will not be able to do so by way of a getter method implemented on the module; instead, you will need to use [the storage item's `get` method](/build/runtime-storage/#methods)\n.\n\nThe optional `getter` extension only impacts the way that a storage item can be accessed from _within_ Substrate code\u2014you will always be able to [query the storage of your runtime](/build/runtime-storage/#Querying-Storage)\n to get the value of a storage item.\n\nHere is an example that implements a getter method named `some_value` for a Storage Value named `SomeValue`. This pallet would now have access to a `Self::some_value()` method in addition to the `SomeValue::get()` method:\n\n    #[pallet::storage]\n    #[pallet::getter(fn some_value)]\n    pub(super) type SomeValue = StorageValue<_, u64, ValueQuery>;\n\n### [](/build/runtime-storage/#default-values)\nDefault values\n\nSubstrate allows you to specify a default value that is returned when a storage item's value is not set. Although the default value does **not** actually occupy runtime storage, the runtime logic will see this value during execution.\n\nHere is an example of specifying a default value in storage:\n\n    #[pallet::type_value]\n    pub(super) fn MyDefault<T: Config>() -> T::Balance { 3.into() }\n    #[pallet::storage]\n    pub(super) type MyStorageValue<T: Config> =\n        StorageValue<Value = T::Balance, QueryKind = ValueQuery, OnEmpty = MyDefault<T>>;\n\nNotice that for the sake of adding clarity to each storage field, the syntax above is the non-abbreviated version of declaring storage items.\n\n[](/build/runtime-storage/#accessing-storage-items)\nAccessing storage items\n---------------------------------------------------------------------------\n\nBlockchains that are built with Substrate expose a remote procedure call (RPC) server that can be used to query runtime storage. You can use software libraries like [Polkadot JS](https://polkadot.js.org/)\n to easily interact with the RPC server from your code and access storage items. The Polkadot JS team also maintains [the Polkadot Apps UI](https://polkadot.js.org/apps)\n, which is a fully-featured web app for interacting with Substrate-based blockchains, including querying storage.\n\n[](/build/runtime-storage/#hashing-algorithms)\nHashing algorithms\n-----------------------------------------------------------------\n\nA novel feature of Storage Maps in Substrate is that they allow developers to specify the hashing algorithm that will be used to generate a map's keys. A Rust object that is used to encapsulate hashing logic is referred to as a \"hasher\". Broadly speaking, the hashers that are available to Substrate developers can be described in two ways: (1) whether or not they are cryptographic; and (2) whether or not they produce a transparent output.\n\nFor the sake of completeness, the characteristics of non-transparent hashing algorithms are described below, but keep in mind that any hasher that does not produce a transparent output has been deprecated for FRAME-based blockchains.\n\n### [](/build/runtime-storage/#cryptographic-hashing-algorithms)\nCryptographic hashing algorithms\n\nCryptographic hashing algorithms enable us to build tools that make it extremely difficult to manipulate the input of a hashing algorithm to influence its output. For example, a cryptographic hashing algorithm would produce a wide distribution of outputs even if the inputs were the numbers 1 through 10. It is critical to use cryptographic hashing algorithms when users are able to influence the keys of a Storage Map. Failure to do so creates an attack vector that makes it easy for malicious actors to degrade the performance of your blockchain network. An example of a map that should use a cryptographic hash algorithm to generate its keys is a map used to track account balances. In this case, it is important to use a cryptographic hashing algorithm so that an attacker cannot bombard your system with many small transfers to sequential account numbers. Without the appropriate cryptographic hashing algorithm this would create an imbalanced storage structure that would suffer in performance. Read more about common hashers in Subsrate in [Common Substrate hashers](/build/runtime-storage/#common-substrate-hashers)\n.\n\nCryptographic hashing algorithms are more complex and resource-intensive than their non-cryptographic counterparts, which is why it is important for runtime engineers to understand their appropriate usages in order to make the best use of the flexibility Substrate provides.\n\n### [](/build/runtime-storage/#transparent-hashing-algorithms)\nTransparent hashing algorithms\n\nA transparent hashing algorithm is one that makes it easy to discover and verify the input that was used to generate a given output. In Substrate, hashing algorithms are made transparent by concatenating the algorithm's input to its output. This makes it trivial for users to retrieve a key's original unhashed value and verify it if they'd like (by re-hashing it). The creators of Substrate have **deprecated the use of non-transparent hashers** within FRAME-based runtimes, so this information is provided primarily for completeness. In fact, it is _necessary_ to use a transparent hashing algorithm if you would like to access [iterable map](/build/runtime-storage/#iterable-storage-maps)\n capabilities.\n\n### [](/build/runtime-storage/#common-substrate-hashers)\nCommon Substrate hashers\n\nThis table lists some common hashers used in Substrate and denotes those that are cryptographic and those that are transparent:\n\n| Hasher | Cryptographic | Transparent |\n| --- | --- | --- |\n| [Blake2 128 Concat](https://paritytech.github.io/substrate/master/frame_support/struct.Blake2_128Concat.html) | X   | X   |\n| [TwoX 64 Concat](https://paritytech.github.io/substrate/master/frame_support/struct.Twox64Concat.html) |     | X   |\n| [Identity](https://paritytech.github.io/substrate/master/frame_support/struct.Identity.html) |     | X   |\n\nThe Identity hasher encapsulates a hashing algorithm that has an output equal to its input (the identity function). This type of hasher should only be used when the starting key is already a cryptographic hash.\n\n[](/build/runtime-storage/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------------\n\nCheck out some guides covering various topics on storage:\n\n*   [How-to: Create a storage structure](/reference/how-to-guides/pallet-design/create-a-storage-structure/)\n    \n*   [StorageValue](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.StorageValue.html)\n    \n*   [StorageMap](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.StorageMap.html)\n    \n*   [StorageDoubleMap](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.StorageDoubleMap.html)\n    \n*   [StorageNMap](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.StorageNMap.html)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/custom-pallets/)\n[Next \u2192](/build/tx-weights-fees/)\n\nON THIS PAGE\n\n[Deciding what to store](#deciding-what-to-store)\n[Use hashed data](#use-hashed-data)\n[Transactional storage](#transactional-storage)\n[Accessing runtime storage](#accessing-runtime-storage)\n[Simple storage values](#simple-storage-values)\n[Single key storage maps](#single-key-storage-maps)\n[Double key storage maps](#double-key-storage-maps)\n[Multi-key storage maps](#multi-key-storage-maps)\n[Iterating over storage maps](#iterating-over-storage-maps)\n[Declaring storage items](#declaring-storage-items)\n[Accessing storage items](#accessing-storage-items)\n[Hashing algorithms](#hashing-algorithms)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/smart-contracts-strategy/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nSmart contracts strategy\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/smart-contracts-strategy.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nSmart contracts\n===============\n\nAs discussed in [Decide what to build](/design/decide-what-to-build/)\n, smart contracts are one approach to building an application to run on a Substrate-based blockchain. Although there are certain limitations, there are also advantages to smart contracts. For example, one reason you might want to start building your project with smart contracts is because contracts typically can be developed and tested quickly, allowing you to iterate on your design decisions and release your applications to the market faster.\n\nIn general, there are two types of smart contracts that you can deploy in a Substrate runtime:\n\n*   WebAssembly contracts.\n*   EVM-compatible contracts.\n\nThe type of contract you want to build is one of the first decisions you need to make. It's also important to note that smart contracts are instructions that are instantiated and executed using a specific chain address\u2014the smart contract account address. This means that\u2014in addition to selecting a language for writing the smart contract\u2014you need to identify the chain that will serve as the host platform for your contract. For example, you might want to deploy your application as a smart contract on an existing parachain in the Polkadot or Kusama ecosystem, work with another team to build a custom paraachain specifically for the type of contract you want to deploy, or build your own runtime with the specific features and functionality you want to deliver.\n\n[](/build/smart-contracts-strategy/#about-the-contracts-pallet)\nAbout the Contracts pallet\n------------------------------------------------------------------------------------------\n\nIn most cases, the Contracts pallet is best option if you want to build smart contracts for a Substrate runtime. By adding the Contracts pallet to the runtime, you can deploy and execute WebAssembly-based smart contracts. If you are building your own runtime to host smart contracts, there are two main reasons for including the Contracts pallet:\n\n*   You want to build a general-purpose blockchain that uses smart contracts to provide the **core functionality** you want to deliver.\n    \n    For example, if you have an innovative idea that focuses on the use of smart contracts, you can use the Contracts pallet to build the base layer of your chain, then complement the base layer with only the minimal number of additional pallets required to achieve your application-specific goals.\n    \n*   You want to build an application-specific blockchain with the **flexibility** to use smart contracts to interact with the chain.\n    \n    For example, if you are building a chain with most of the logic defined using other Substrate pallets, you can expose some parts of the chain logic to users through smart contracts. Smart contracts are ideal for this type of use case because they treat all user input as untrusted and potentially adversarial.\n    \n    As an example, assume you are building a decentralized exchange. Most of the logic is defined in pallets, but you want to allow users to upload their own trading algorithms through a smart contract. With the gas fees associated with executing a smart contract, users have to pay for the execution time of their trading algorithms.\n    \n    The Contracts pallet provides the [Chain extension](https://ink.substrate.io/macros-attributes/chain-extension/)\n     primitive for exactly that functionality and programming languages\u2014like [ink!](https://paritytech.github.io/ink/)\n    \u2014can make use of the business logic primitives your chain exposes.\n    \n\n[](/build/smart-contracts-strategy/#smart-contract-accounts)\nSmart contract accounts\n------------------------------------------------------------------------------------\n\nThe Contracts pallet extends accounts based on the `Currency` trait to have smart contract functionality. You can use these **smart contract accounts** to instantiate smart contracts and to make calls to other contract and non-contract accounts.\n\nThe smart contract code is stored in a cache and can be retrieved using its hash. This design enables multiple smart contracts to be instantiated from the same hash without replicating the code each time.\n\nWhen a user interacts with a smart contract by calling one of its functions, the associated smart contract code is retrieved using the code hash and the function is executed. Calling a smart contract function can result in:\n\n*   Changing the storage associated wih the smart contract account.\n*   Changing the storage associated wih a non-contract account.\n*   instantiating a new smart contract.\n*   Calling another smart contract account.\n\nIf a smart contract account is depleted, its associated code and storage is also be deleted.\n\n[](/build/smart-contracts-strategy/#contract-execution-and-gas)\nContract execution and gas\n------------------------------------------------------------------------------------------\n\nAll instructions invoked by a smart contract require payment in the form of **gas** fees. Senders must specify a gas limit for every call. Unused gas is refunded after the call, regardless of the execution outcome.\n\nIf the gas limit is reached, then all calls and state changes\u2014including balance transfers\u2014are only reverted at the current call\u2019s contract level. For example, if contract A calls contract B and contract B runs out of gas mid-call, then all of the contract B calls and state changes are reverted. If contract A has correct error handling, any other calls and state changes make by contract A persist.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/)\n[Next \u2192](/build/custom-pallets/)\n\nON THIS PAGE\n\n[About the Contracts pallet](#about-the-contracts-pallet)\n[Smart contract accounts](#smart-contract-accounts)\n[Contract execution and gas](#contract-execution-and-gas)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/troubleshoot-your-code/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nTroubleshoot your code\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/troubleshoot-your-code.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTroubleshoot your code\n======================\n\nBecause Substrate and FRAME provide a flexible and modular framework for building blockchain applications, it\u2019s important to follow common best practices and basic coding principles to avoid introducing errors or making code difficult to debug.\n\n[](/build/troubleshoot-your-code/#general-coding-practices)\nGeneral coding practices\n------------------------------------------------------------------------------------\n\nThe following general principles aren\u2019t unique to Substrate or to using FRAME but they are particularly important when building complex software with stringent security requirements and constrained resources like a blockchain application:\n\n*   [Formatting and readability](https://code.tutsplus.com/tutorials/top-15-best-practices-for-writing-super-readable-code--net-8118)\n    . Use consistent formatting and follow best practices for writing readable code to make your programs easy for you and others to understand and maintain.\n*   [Comments](https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/)\n    . Add clear and concise comments to your code to explain what the code does, and, where applicable, why the code is written the way it is.\n*   [Style and naming conventions](https://doc.rust-lang.org/1.0.0/style/style/naming/README.html)\n    . Follow the Rust style guidelines and naming conventions to make your code consistent with other Rust programs and make it easier for other Rust programmers to read and debug your code.\n*   [Licencing](https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project)\n    . Ensure your repository includes the appropriate open source license and any licenses, copyright notices, and attributions required for code you're using that you didn't write. In most cases, if you are using code you didn't write, you should retain the original licenses and mention the authors.\n*   [Refactoring](https://en.wikipedia.org/wiki/Code_refactoring)\n    . Improve the design, structure, or implementation of your code code to create simpler, cleaner, more performant, or more expressive programs. In general, refactoring simplifies code logic with changing the code functionality and results in code that is more readable, maintainable, and extensible.\n*   [Don\u2019t repeat yourself (DRY)](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n    . Follow the DRY principle of software development and use data abstractions or data normalization to avoid redundancy.\n*   [Testing](https://en.wikipedia.org/wiki/Unit_testing)\n    . Write and execute unit tests to ensure all individual software components work as intended. For more information about unit testing and testing modules in the runtime, see [Test](/test/)\n    .\n*   [Errors and warnings](https://rustc-dev-guide.rust-lang.org/diagnostics.html)\n    . Address all errors and warnings reported by the compiler to ensure you understand the cause of the error or warning and how to resolve it.\n*   [Dependencies](https://developerexperience.io/articles/updating-the-dependencies)\n    . Update dependencies regularly to ensure your code doesn't fall too far behind new releases and become out of date. You should periodically update the Rust compiler and toolchain and check for changes where there are new releases of Polkadot.\n*   [Hard coding](https://en.wikipedia.org/wiki/Hard_coding)\n    . Avoid embedding data directly in the source code.\n\n[](/build/troubleshoot-your-code/#common-substrate-issues)\nCommon Substrate issues\n----------------------------------------------------------------------------------\n\nThere are a few common aspects of Substrate that can introduce errors or cause performance issues if not handled correctly. As you are writing the logic for your chain, you should pay particular attention to the following potential trouble spots:\n\n*   [Benchmarks](/build/troubleshoot-your-code/#benchmarks)\n    \n*   [Pallet coupling](/build/troubleshoot-your-code/#pallet-coupling)\n    \n*   [Offchain workers](/build/troubleshoot-your-code/#offchain-workers)\n    \n*   [Storage](/build/troubleshoot-your-code/#storage)\n    \n*   [Events](/build/troubleshoot-your-code/#events)\n    \n\n### [](/build/troubleshoot-your-code/#benchmarks)\nBenchmarks\n\nThe Substrate benchmarking system is designed to help you determine the appropriate weight to assign to the functions in your pallets. Setting an appropriate weight is a critical step to ensure that your blockchain is reliable and secure. Although you can skip benchmarking and setting weights for transactions in the early phases of development, you should be aware that using a weight of zero makes your code vulnerable to attack. If there are no transaction fees associated with the execution of a function, a malicious actor could call the function repeatedly\u2014essentially spamming the network with transactions\u2014to halt the chain in a denial of service (DoS) attack.\n\nIn general, you should ensure that all functions that can be executed in the runtime have a weight defined and subtract a corresponding fee from a calling account. Transaction fees are typically an important economic incentive to prevent denial of service (DoS) attacks and create a sustainable economic model for the chain.\n\nFor more information about the benchmarking system, see [Benchmark](/test/benchmark/)\n. For a simple example of how to write and run benchmarks, see [Add benchmarks](/reference/how-to-guides/weights/add-benchmarks/)\n.\n\n### [](/build/troubleshoot-your-code/#pallet-coupling)\nPallet coupling\n\nIn Substrate, there are two ways that one pallet can call the functions in another palletPallet coupling is about how a pallet can call functions in another pallet.\n\n*   **Tight pallet coupling** is more restrictive and most often used when one pallet depends on all or a substantial number of the types and methods in the other pallet.\n*   **Loose pallet coupling** is more flexible and most often used when one pallets depends on specific traits or function interfaces an interface that another pallet exposes.\n\nTight pallet coupling requires both pallets to be installed in the runtime and the pallets can't be used independently. In addition, tightly-coupled pallets can be harder to maintain because changes in one pallet often require changes in the other pallet. In most cases, loose coupling is more flexible solution because you can reuse types and interfaces from another pallet without including that pallet in the runtime.\n\nFor more information about tight and loose pallet coupling, see [Pallet coupling](/build/pallet-coupling/)\n and this [code example](https://substrate.stackexchange.com/questions/922/pallet-loose-couplingtight-coupling-and-missing-traits?rq=1)\n. For simple examples of pallet coupling see [Use tight pallet coupling](/reference/how-to-guides/pallet-design/use-tight-coupling/)\n and [Use loose pallet coupling](/reference/how-to-guides/pallet-design/use-loose-coupling/)\n.\n\n### [](/build/troubleshoot-your-code/#offchain-workers)\nOffchain workers\n\nYou can use offchain operations to query data from offchain sources or to process data offchain. For example, offchain workers enable you to offload the execution of tasks that might take longer than the maximum block execution time allows. However, some characteristics of offchain operations can have unintended consequences. If you plan to use offchain workers, you should consider the following:\n\n*   By default, offchain workers run on validator nodes when those nodes are performing their block authoring.\n*   If you want to run an offchain worker on a node that is not a validator, you must use the `--offchain-worker always` command-line option.\n*   To prevent any node\u2014validator or not\u2014from running an offchain work, you can use the `--offchain-worker never` command-line option.\n*   If you have offchain workers running as parallel processes on he network, you might need to implement concurrent programming techniques to avoid race conditions.\n*   By default, offchain workers are triggered for every block import even if the block isn't finalized.\n*   Because offchain worker have full access to state, you can create conditions that trigger them to run only in some specific cases.\n\nFor more information about offchain operations, see [Offchain operations](/learn/offchain-operations/)\n. For examples of how to use offchain components, see [Offchain workers](/reference/how-to-guides/offchain-workers/)\n.\n\n### [](/build/troubleshoot-your-code/#storage)\nStorage\n\nAs discussed in [Runtime storage](/build/runtime-storage/)\n, the fundamental principle for blockchain storage is to minimize both the number and size of the data items you store. Storing data unnecessarily can lead to slow network performance and resources running out.\n\nIn planning and reviewing your code for potential issues, keep the following guidelines in mind:\n\n*   Only store critical information.\n*   Don\u2019t store intermediate or transient information.\n*   Don\u2019t store data that won\u2019t be needed if the operation fails.\n*   If possible, don\u2019t store information that is already stored in another structure\n*   Store limited length hashed data where possible.\n\nAs a general rule, it is better to have one larger data structure than many smaller data structures to reduce complexity and the number of read and write operations. However, this isn't always the case and you should use benchmarking to measure and optimize how you store data on a case-by-case basis.\n\nBoth lists and storage maps incur storage costs, so you should be conscious about how you use them. The more items you have in a list or a map, the more iterating over the items affects the performance in the runtime. Storage maps often store unbounded sets of data, and\u2014because accessing the elements of a map requires more database reads than accessing the elements of a list\u2014iterating when using storage maps can be significantly more costly.\n\nBeing conscious of the time required to iterate over items in a storage map is particularly important if your project is a parachain. If the time required to iterate over storage exceeds the maximum time allowed for block production, the blockchain will stop producing blocks and thus stop working.\n\nIn general, you should avoid having unbounded data in storage maps and avoid iterating over storage maps that store a large data set. You should use benchmarks to test the performance of all functions in the runtime under different conditions, including iterating over a large number of items in a list or storage map. By testing for specific conditions\u2014for example, triggering a function to execute over a large data set with many iteractions\u2014benchmarks can help you identify when it's best to enforce boundaries by limiting the number of elements in a list or the number of iterations in a loop.\n\nFor more guidelines about storage and storage structures, see [State transitions and storage](/learn/state-transitions-and-storage/)\n and [Runtime storage](/build/runtime-storage/)\n. For more information about iterating over storage, see [Iterating over storage maps](/build/runtime-storage/#iterating-over-storage-maps)\n.\n\n### [](/build/troubleshoot-your-code/#events)\nEvents\n\nPallets typically emit events to send notifications about changes to data or conditions in the runtime to receiving entities\u2014like users or applications\u2014that are outside of the runtime.\n\nIn custom pallets, you can define the following event-related information:\n\n*   The type of the event.\n*   The information contained within the event.\n*   The conditions for emitting the event.\n\nIn general, events inform users or applications such as a block explorer that a change occurred. Events aren't intended to describe differences in state or to contain detailed information. You should use caution in adding more information to an event than is needed because additional information increases storage and computational overhead involved in producing events. If additional information about a change is needed, users can query the chain state.\n\nFor information about adding events to a custom pallet, see [Declaring an event](/build/events-and-errors/#declaring-an-event)\n.\n\n[](/build/troubleshoot-your-code/#unsafe-or-insecure-patterns)\nUnsafe or insecure patterns\n------------------------------------------------------------------------------------------\n\nSecure operations and coding principles are critical for ensuring data integrity and the viability of a blockchain. There are several common unsafe or insecure coding practices that can introduce errors or make you chain vulnerable to attack if not handled correctly. As you are writing the logic for your chain, you should pay particular attention to the following potential trouble spots:\n\n*   [Error handling](/build/troubleshoot-your-code/#error-handling)\n    \n*   [Unsafe math: floating point numbers](/build/troubleshoot-your-code/#unsafe-math-floating-point-numbers)\n    \n*   [Unsafe math: overflows](/build/troubleshoot-your-code/#unsafe-math-overflows)\n    \n*   [Unbounded Vec data types](/build/troubleshoot-your-code/#unbounded-vec-data-types)\n    \n\n### [](/build/troubleshoot-your-code/#error-handling)\nError handling\n\nRuntime code should explicitly and gracefully handle all error cases. In general, you shouldn't use the `panic!` macro for error handling except in tests and benchmarks. Functions in the runtime should never generate a panic and must not throw errors. Only bugs detected by the compiler should generate unrecoverable panic errors.\n\nIn Rust, you should write functions that use the `Result` type to return errors with the `Err` variant. The `Result` type with the `Err` variant allows the function to indicate failed execution without panicking. As a best practice, you should have many individual and specific error messages to make it easier it to diagnose problems.\n\nYou should also be aware that using `unwrap()` in the runtime with the `Result` type can generate undefined behavior. Instead of using `unwrap()`, try using `ok_or`, `unwrap_or`, `ensure` or returning `Err` in a matching pattern. For example:\n\n    let a = TryInto::<u128>::try_into(id.fee).ok().unwrap();\n    let b = a.checked_mul(8).ok_or(Error::<T>::Overflow)?\n             .checked_div(10).ok_or(Error::<T>::Overflow)?;\n    \n    let b = id.fee\n        .checked_mul(&8u32.saturated_into()).ok_or(Error::<T>::Overflow)?\n        .checked_div(&10u32.saturated_into()).ok_or(Error::<T>::Overflow)?;\n\nFor more information about error handling in pallets, see [Error pallet attribute](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#error-palleterror-optional)\n and [Errors](/build/events-and-errors/#errors)\n.\n\n### [](/build/troubleshoot-your-code/#unsafe-math-floating-point-numbers)\nUnsafe math: Floating point numbers\n\nBlockchains require deterministic operations to ensure that independent nodes can reach consensus reliably. Because floating point numbers can lead to non-deterministic results, you should avoid operations involving floating point numbers and always use fixed point arithmetic in the runtime. Substrate provides primitives for use fixed point arithmetic in the [`sp_arithmetic`](https://paritytech.github.io/substrate/master/sp_arithmetic/index.html)\n crate.\n\nYou can use specific **Per** methods to represent a part of a whole depending on the precision you need. For example:\n\n*   Percent: Parts per hundred represents \\[0, 1\\] from \\[0, 100\\].\n*   Permill: Parts per million represents \\[0, 1\\] from \\[0, 1_000_000\\].\n*   Perbill: Parts per billion represents \\[0, 1\\] from \\[0, 1_000_000\\_000\\].\n\nNote that using higher resolution requires data types with higher sizes, so having more precision comes with a cost.\n\n### [](/build/troubleshoot-your-code/#unsafe-math-overflows)\nUnsafe math: Overflows\n\nOverflows happen if the computed value of data to be returned exceeds the limits of its defined data type. There are two ways you can handle data overflows: use of saturating methods or handle the case of an invalid value using checked arithmetic operations.\n\n*   Use `saturating` methods. If the result of an operation would be too large for the type, `saturating` methods return the maximum value of the type. If the result would be too small, `saturating` methods return the minimum value of the type. For more information, see [Saturating](https://doc.rust-lang.org/std/num/struct.Saturating.html)\n    .\n*   Use `checked_*` methods. These methods perform the calculations in an isolated environment and, based on the result, return Some or None. For more information, see [checked\\_add](https://doc.rust-lang.org/std/primitive.u32.html#method.checked_add)\n    .\n\n### [](/build/troubleshoot-your-code/#unbounded-vec-data-types)\nUnbounded Vec data types\n\nAs noted in [Runtime storage](/build/runtime-storage/)\n and [Storage](/build/troubleshoot-your-code/#storage)\n, it's important to minimize the number and size of the data items you store to ensure the chain is performant and secure. Using Vec data types without setting bounds for size makes your chain vulnerable to both intentional and unintentional misuse of the limited resources available. For example, a malicious actor or an end-user acting without restrictions could add unlmited data and overwhelm your storage capacity, leading to undefined behavior in the runtime. In general, any storage item with its size determined by user action should have a bound on it.\n\nThe following code illustrates an unbounded `Vec` data type:\n\n    type Proposal<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, Vec<T::Hash>, ValueQuery>;\n\nFor safer code, replace the `Vec` data type with the `BoundedVec` data type:\n\n    type Proposal<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, BoundedVec<T::Hash, ValueQuery>;\n\nBy default, all pallet storage items are limited by the bound defined in the `pallet_prelude::MaxEncodedLen` attribute. The `#[pallet::without_storage_info]` attribute macro allows you to override this default behavior if you require unbounded storage for an entire pallet. For example:\n\n    #[pallet::pallet]\n    #[pallet::without_storage_info]\n    pub struct Pallet<T>(_);\n\nThis macro applies to all storage items in your pallet, so you should only use it in a test or development environment. You should never use the `#[pallet::without_storage_info]` macro in production. By removing this macro after testing, you can ensure that your pallet follows the default behavior. If necessary, you can use the `#[pallet::unbounded]` attribute macro to declare a specific storage item as unbounded.\n\nFor more information about limiting storage using `BoundedVec` data types, see [Create bounds](/build/runtime-storage/#create-bounds)\n and [BoundedVec](https://crates.parity.io/frame_support/storage/bounded_vec/struct.BoundedVec.html)\n. For more information about pallet macros, see [FRAME macros](/reference/frame-macros/)\n.\n\n### [](/build/troubleshoot-your-code/#secure-hashing-algorithms)\nSecure hashing algorithms\n\nSubstrate provides the following hashing algorithms by default:\n\n*   `xxHash` is a fast hashing function, but it is not cryptographically secure. With this hashing algorithm, hash collisions\u2014in which different inputs hash to the same output\u2014are possible. You should only use this hashing algorithm in functions that aren't available to outside entities that could try to manipulate the input and attack the system.\n*   `Blake2` is a relatively fast cryptographic hashing function. In most cases, you can use the Blake2 hashing algorithm in any situations where security matters. However, Substrate can support any hash algorithm that implements the `Hasher` trait.\n\nFor more information about hashing algorithms, see [Hashing algorithms](/learn/cryptography/#hashing-algorithms)\n.\n\n### [](/build/troubleshoot-your-code/#inaccurate-weight)\nInaccurate weight\n\nWeight is a Substrate construct that represents the resources consumed to execute a transaction in a block. The appropriate weight for executing a transaction depends on a number of factors, including the hardware, the computational complexity, the storage requirements, and the database operation performed. Every executable transaction should be assigned an appropriate weight.\n\nIf you have multiple transactions assigned the same weights, it's likely that the weight assignment doesn't accurately reflect the actual time of execution. Benchmarking helps you evaluate and estimate the resources that each function in the runtime is likely to consume under different circumstances. Modeling the expected weight of each runtime function enables the blockchain to calculate how many transactions or system-level calls it can execute within a certain period of time.\n\nIf you set the weight for a transaction too low, an attacker or an unsuspecting user can create blocks that are overweight and cause block production timeouts. You should run appropriate benchmark tests for all functions under different conditions to ensure that that all transaction have appropriate weights that take into account the factors that affect the resources consumed.\n\nFor more information about using benchmarks and calculating weight, see [Benchmarking and weight](/test/benchmark/#benchmarking-and-weight)\n and [Weights](/reference/how-to-guides/weights/)\n.\n\n### [](/build/troubleshoot-your-code/#insecure-randomness)\nInsecure randomness\n\nRandomness is used in many different applications on blockchains. Substrate provides two default implementations of randomness.\n\n*   The [insecure randomness collective flip](https://paritytech.github.io/substrate/master/pallet_insecure_randomness_collective_flip/index.html)\n     pallet generates random values based on the block hashes from the previous 81 blocks. This pallet can be useful when defending against weak adversaries or in low-security situations like testing. For example, you can use this pallet when testing randomness-consuming pallets. You should never use this pallet in production as a true source of randomness.\n*   The [BABE](https://paritytech.github.io/substrate/master/pallet_babe/index.html)\n     pallet uses verifiable random functions (VRF) to implement a more secure version of randomness. This pallet provides production-grade randomness. However, it isn't suite for every purpose. For example, the randomness provided by the BABE pallet isn't suitable for gambling applications.\n\nAs alternative to these pallets, you can use an oracle as a secure source of randomness.\n\nFor more information about using randomness, see [Randomness](/build/randomness/)\n and [Incorporate randomness](/reference/how-to-guides/pallet-design/incorporate-randomness/)\n.\n\n[](/build/troubleshoot-your-code/#anti-patterns)\nAnti-patterns\n--------------------------------------------------------------\n\nAnti-patterns are solutions meant to perform common tasks that introduce more problems than they solve. There are several coding patterns that you might be inclined to follow that fall into the category of anti-patterns you should avoid.\n\n### [](/build/troubleshoot-your-code/#dont-dispatch-a-function-to-read-from-storage)\nDon't dispatch a function to read from storage\n\nIn Substrate, you shouldn't use a dispatchable function call to read an item from storage. Instead, you should either define a `getter` macro for the storage item or to use an RPC method. For example, assume you have the following storage map:\n\n    #[pallet::storage]\n    #[pallet::getter(fn product_information)]\n    pub type ProductInformation<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, Product<T::AccountId, T::Hash>>;\n\nYou can read the item by calling `Self::product_information(id)` instead of writing a separate dispatchable function like this:\n\n    // !!! Don't create a dispatchable function to read storage state !!!\n    ~~~~#[pallet::weight(T::WeightInfo::get_product())]\n    pub fn get_product(\n    origin: OriginFor<T>,\n    id: T::Hash\n    ) -> DispatchResult {\n    \n    let sender = ensure_signed(origin)?;\n    let product = if <ProductInformation<T>>::contains_key(&id) {\n                    Some(Self::product_information(&id))\n                } else { None };\n    \n    match product {\n                Some(value) => {\n                    Self::deposit_event(Event::ItemFetched(value));\n                }\n                None => return Err(Error::<T>::NotFound.into()),\n            }\n       Ok(())\n    }\n\nFor more information about declaring storage and the `getter` macro, see [Declare storage items](/build/runtime-storage/#declaring-storage-items)\n.\n\nIf a storage `getter` macro is not flexible enough for your requirements, you can create a custom RPC method. For information about creating a custom RPC method, see [Add custom RPC to the node](https://hackmd.io/@d9WGfolYQmSRBmnxyOQmAg/BkEANECJs)\n.\n\n**Last edit:** August 31, 2023\n\n[\u2190 Previous](/build/build-a-deterministic-runtime/)\n[Next \u2192](/test/)\n\nON THIS PAGE\n\n[General coding practices](#general-coding-practices)\n[Common Substrate issues](#common-substrate-issues)\n[Unsafe or insecure patterns](#unsafe-or-insecure-patterns)\n[Anti-patterns](#anti-patterns)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/community/article-bounties/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n[Home](/)\n[Community](/community/)\nArticle bounties\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/community/article-bounties.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nSubmitting articles to receive a bounty\n=======================================\n\n<Message type=\"yellow\" title=\"Information\" text={`This section is still work in progress. There is no official Substrate Developer Hub bounty program although we plan to introduce one soon.`} />\n\nTo encourage community support and contributions to the developer ecosystem, we have established a bounty program. The bounty program provides prizes\u2014in the form of XXX\u2014to content developers who submit articles that expand and improve Substrate documentation by covering new \u201chow-to\u201d type topics.\n\n[](/community/article-bounties/#participate)\nParticipate\n--------------------------------------------------------\n\nTo participate in the program:\n\n1.  On the [Issues](https://github.com/substrate-developer-hub/substrate-docs/issues)\n     page for the Substrate Developer Hub documentation repository, select the **how-to guide** and **new content** labels to filter the list of issues displayed.\n2.  Select an issue that you are interested in that requires a guide.\n\nFor example:\n\n*   [How to call a function from another pallet](https://github.com/substrate-developer-hub/substrate-docs/issues/75)\n    \n*   [How to use benchmarking to calculate weights](https://github.com/substrate-developer-hub/substrate-docs/issues/88)\n    \n\nIf there isn\u2019t an issue for the topic you want to contribute, create an issue describing what you want to cover and at least one use case where it is applicable first. It\u2019s valuable to know the issues that are important to the community to help us prioritize the topics to cover.\n\n1.  Use the [how-to-guide template](https://github.com/substrate-developer-hub/substrate-docs/blob/main/static/assets/contribute-templates/how-to-template.md)\n     to organize the information for your topic.\n\nBe sure your article includes the following **required** sections.\n\n*   Overview\n*   Steps\n*   Examples\n\n**If applicable**, your article should also include the following sections:\n\n*   Use cases\n*   Before you begin\n*   Related resources\n\nBefore submitting, verify your content meets the following requirements:\n\n*   Follows the how-to guide template structure.\n*   States a clear goal in the guide title or the overview section.\n*   Focuses on achieving the stated goal.\n*   Includes a link to working code or an example repo.\n*   Provides supporting references where relevant.\n*   Add the appropriate tags to describe your content \\[complexity\\] and \\[category\\].\n*   Create a branch in the [how-to-guides](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/how-to-guides/index.md)\n     repository.\n*   Create a Pull Request (PR) for the article you want to contribute.\n*   Add the **Bounty submission** label to the PR for your article.\n*   Update the issue you selected or created with a link to the PR for your article.\n\nThe article you submit will be evaluated as part of the Pull Request review and judged based on the following criteria:\n\n*   Usefulness. The material your article covers does not already exist and presents at least one clear use case.\n*   Structure. You\u2019ve followed the [how-to guide template](https://github.com/substrate-developer-hub/substrate-docs/blob/main/static/assets/contribute-templates/how-to-template.md)\n     structure and the conventions described in the \\[contributor guidelines\\].\n*   Correctness and completeness. Each step is clearly articulated, correct, and complete.\n*   Reproducibility. The steps achieve the expected result consistently.\n\n**Last edit:** May 7, 2023\n\n[Next \u2192](/quick-start/)\n\nON THIS PAGE\n\n[Participate](#participate)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/build/tx-weights-fees/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    *   [Smart contracts](/build/smart-contracts-strategy/)\n        \n    *   [Custom pallets](/build/custom-pallets/)\n        \n    *   [Runtime storage](/build/runtime-storage/)\n        \n    *   [Transactions, weights, and fees](/build/tx-weights-fees/)\n        \n    *   [Pallet coupling](/build/pallet-coupling/)\n        \n    *   [Events and errors](/build/events-and-errors/)\n        \n    *   [Randomness](/build/randomness/)\n        \n    *   [Privileged calls and origins](/build/origins/)\n        \n    *   [Remote procedure calls](/build/remote-procedure-calls/)\n        \n    *   [Application development](/build/application-development/)\n        \n    *   [Chain specification](/build/chain-spec/)\n        \n    *   [Genesis configuration](/build/genesis-configuration/)\n        \n    *   [Build process](/build/build-process/)\n        \n    *   [Build a deterministic runtime](/build/build-a-deterministic-runtime/)\n        \n    *   [Troubleshoot your code](/build/troubleshoot-your-code/)\n        \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Build](/build/)\nTx weights fees\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/build/tx-weights-fees.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTransactions, weights, and fees\n===============================\n\nWhen transactions are executed or data is stored on-chain, the activity changes the state of the chain and consumes blockchain resources. Because the resources available to a blockchain are limited, it\u2019s important to manage how operations on-chain consume them. In addition to being limited in practical terms\u2014such as storage capacity\u2014blockchain resources represent a potential attack vector for malicious users. For example, a malicious user might attempt to overload the network with messages to stop the network from producing new blocks. To protect blockchain resources from being drained or overloaded, you need to manage how they are made available and how they are consumed. The resources to be aware of include:\n\n*   Memory usage\n*   Storage input and output\n*   Computation\n*   Transaction and block size\n*   State database size\n\nSubstrate provides block authors with several ways to manage access to resources and to prevent individual components of the chain from consuming too much of any single resource. Two of the most important mechanisms available to block authors are **weights** and **transaction fees**.\n\n[Weights](/reference/glossary/#weight)\n are used to manage the time it takes to validate a block. In general, weights are used to characterize the time it takes to execute the calls in the body of a block. By controlling the execution time that a block can consume, weights set limits on storage input and output and computation.\n\nSome of the weight allowed for a block is consumed as part of the block's initialization and finalization. The weight might also be used to execute mandatory inherent extrinsic calls. To help ensure blocks don\u2019t consume too much execution time\u2014and prevent malicious users from overloading the system with unnecessary calls\u2014weights are used in combination with **transaction fees**.\n\nTransaction fees provide an economic incentive to limit execution time, computation, and the number of calls required to perform operations. Transaction fees are also used to make the blockchain economically sustainable because they are typically applied to transactions initiated by users and deducted before a transaction request is executed.\n\n[](/build/tx-weights-fees/#how-fees-are-calculated)\nHow fees are calculated\n---------------------------------------------------------------------------\n\nThe final fee for a transaction is calculated using the following parameters:\n\n*   _base fee_: This is the minimum amount a user pays for a transaction. It is declared as a **base weight** in the runtime and converted to a fee using `WeightToFee`.\n*   _weight fee_: A fee proportional to the execution time (input and output and computation) that a transaction consumes.\n*   _length fee_: A fee proportional to the encoded length of the transaction.\n*   _tip_: An optional tip to increase the priority of the transaction, giving it a higher chance to be included by the transaction queue.\n\nThe base fee and proportional weight and length fees constitute the **inclusion fee**. The inclusion fee is the minimum fee that must be available for a transaction to be included in a block.\n\n[](/build/tx-weights-fees/#using-the-transaction-payment-pallet)\nUsing the transaction payment pallet\n-----------------------------------------------------------------------------------------------------\n\nThe [Transaction Payment pallet](https://paritytech.github.io/substrate/master/pallet_transaction_payment/index.html)\n provides the basic logic for calculating the inclusion fee.\n\nYou can also use the Transaction Payment pallet to:\n\n*   Convert a weight value into a deductible fee based on a currency type using `Config::WeightToFee`.\n*   Update the fee for the next block by defining a multiplier, based on the final state of the chain at the end of the previous block using `Config::FeeMultiplierUpdate`.\n*   Manage the withdrawal, refund, and deposit of transaction fees using `Config::OnChargeTransaction`.\n\nYou can learn more about these configuration traits in the [Transaction Payment](https://paritytech.github.io/substrate/master/pallet_transaction_payment/index.html)\n documentation.\n\nYou should note that transaction fees are withdrawn before the transaction is executed. After the transaction is executed, the transaction weight can be adjusted to reflect the actual resources the transaction used. If a transaction uses fewer resources than expected, the transaction fee is corrected and the adjusted transaction fee is deposited.\n\n### [](/build/tx-weights-fees/#a-closer-look-at-the-inclusion-fee)\nA closer look at the inclusion fee\n\nThe formula for calculating the final fee looks like this:\n\n    inclusion_fee = base_fee + length_fee + [targeted_fee_adjustment * weight_fee];\n    final_fee = inclusion_fee + tip;\n\nIn this formula, the `targeted_fee_adjustment` is a multiplier that can tune the final fee based on the congestion of the network.\n\n*   The `base_fee` derived from the base weight covers inclusion overhead like signature verification.\n*   The `length_fee` is a per-byte fee that is multiplied by the length of the encoded extrinsic.\n*   The `weight_fee` fee is calculated using two parameters:\n    \n    The `ExtrinsicBaseWeight` that is declared in the runtime and applies to all extrinsics.\n    \n    The `#[pallet::weight]` annotation that accounts for an extrinsic's complexity.\n    \n\nTo convert the weight to Currency, the runtime must define a `WeightToFee` struct that implements a conversion function, `Convert<Weight,Balance>`.\n\nNote that the extrinsic sender is charged the inclusion fee before the extrinsic is invoked. The fee is deducted from the sender's balance even if the transaction fails upon execution.\n\n### [](/build/tx-weights-fees/#accounts-with-an-insufficient-balance)\nAccounts with an insufficient balance\n\nIf an account does not have a sufficient balance to pay the inclusion fee and remain alive\u2014that is, enough to pay the inclusion fee and maintain the minimum **existential deposit**\u2014then you should ensure the transaction is cancelled so that no fee is deducted and the transaction does not begin execution.\n\nSubstrate does not enforce this rollback behavior. However, this scenario would be a rare occurrence because the transaction queue and block-making logic perform checks to prevent it before adding an extrinsic to a block.\n\n### [](/build/tx-weights-fees/#fee-multiplier)\nFee multiplier\n\nThe inclusion fee formula always results in the same fee for the same input. However, weight can be dynamic and\u2014based on how [`WeightToFee`](https://paritytech.github.io/substrate/master/pallet_transaction_payment/pallet/trait.Config.html#associatedtype.WeightToFee)\n is defined\u2014the final fee can include some degree of variability.\n\nTo account for this variability, the Transaction Payment pallet provides the [`FeeMultiplierUpdate`](https://paritytech.github.io/substrate/master/pallet_transaction_payment/pallet/trait.Config.html#associatedtype.FeeMultiplierUpdate)\n configurable parameter.\n\nThe default update function is inspired by the Polkadot network and implements a targeted adjustment in which a target saturation level of block weight is defined. If the previous block is more saturated, then the fees are slightly increased. Similarly, if the previous block has fewer transactions than the target, fees are decreased by a small amount. For more information about fee multiplier adjustments, see the [Web3 research page](https://research.web3.foundation/Polkadot/overview/token-economics#relay-chain-transaction-fees-and-per-block-transaction-limits)\n.\n\n[](/build/tx-weights-fees/#transactions-with-special-requirements)\nTransactions with special requirements\n---------------------------------------------------------------------------------------------------------\n\nInclusion fees must be computable prior to execution, and therefore can only represent fixed logic. Some transactions warrant limiting resources with other strategies. For example:\n\n*   Bonds are a type of fee that might be returned or slashed after some on-chain event.\n    \n    For example, you might want to require users to place a bond to participate in a vote. The bond might then be returned at the end of the referendum or slashed if the voter attempted malicious behavior.\n    \n*   Deposits are fees that might be returned later.\n    \n    For example, you might require users to pay a deposit to execute an operation that uses storage. If a subsequent operation frees up storage, the user's deposit could be returned.\n    \n*   Burn operations are used to pay for a transaction based on its internal logic.\n    \n    For example, a transaction might burn funds from the sender if the transaction creates new storage items to pay for the increased the state size.\n    \n*   Limits enable you to enforce constant or configurable limits on certain operations.\n    \n    For example, the default Staking pallet only allows nominators to nominate 16 validators to limit the complexity of the validator election process.\n    \n\nIt is important to note that if you query the chain for a transaction fee, it only returns the inclusion fee.\n\n[](/build/tx-weights-fees/#default-weight-annotations)\nDefault weight annotations\n---------------------------------------------------------------------------------\n\nAll dispatchable functions in Substrate must specify a weight. The way of doing that is using the annotation-based system that lets you combine fixed values for database read/write weight and/or fixed values based on benchmarks. The most basic example would look like this:\n\n    #[pallet::weight(100_000)]\n    fn my_dispatchable() {\n        // ...\n    }\n\nNote that the `ExtrinsicBaseWeight` is automatically added to the declared weight to account for the costs of simply including an empty extrinsic into a block.\n\n### [](/build/tx-weights-fees/#weights-and-database-readwrite-operations)\nWeights and database read/write operations\n\nTo make weight annotations independent of the deployed database backend, they are defined as a constant and then used in the annotations when expressing database accesses performed by the dispatchable:\n\n    #[pallet::weight(T::DbWeight::get().reads_writes(1, 2) + 20_000)]\n    fn my_dispatchable() {\n        // ...\n    }\n\nThis dispatchable does one database read and two database writes in addition to other things that add the additional 20,000. A database access is generally every time a value that is declared inside the `#[pallet::storage]` block is accessed. However, only unique accesses are counted because after a value is accessed it is cached and accessing it again does not result in a database operation. That is:\n\n*   Multiple reads of the same value count as one read.\n*   Multiple writes of the same value count as one write.\n*   Multiple reads of the same value, followed by a write to that value, count as one read and one write.\n*   A write followed by a read only counts as one write.\n\n### [](/build/tx-weights-fees/#dispatch-classes)\nDispatch classes\n\nDispatches are broken into three classes:\n\n*   `Normal`\n*   `Operational`\n*   `Mandatory`\n\nIf a dispatch is not defined as `Operational` or `Mandatory` in the weight annotation, the dispatch is identified as `Normal` by default. You can specify that the dispatchable uses another class like this:\n\n    #[pallet::dispatch((DispatchClass::Operational))]fn my_dispatchable() {\n        // ...\n    }\n\nThis tuple notation also allows you to specify a final argument that determines whether or not the user is charged based on the annotated weight. If you don't specify otherwise, `Pays::Yes` is assumed:\n\n    #[pallet::dispatch(DispatchClass::Normal, Pays::No)]\n    fn my_dispatchable() {\n        // ...\n    }\n\n#### Normal dispatches\n\nDispatches in this class represent normal user-triggered transactions. These types of dispatches only consume a portion of a block's total weight limit. For information about the maximum portion of a block that can be consumed for normal dispatches, see [`AvailableBlockRatio`](https://paritytech.github.io/substrate/master/frame_system/limits/struct.BlockLength.html#method.max_with_normal_ratio)\n. Normal dispatches are sent to the [transaction pool](/reference/glossary/#transaction-pool)\n.\n\n#### Operational dispatches\n\nUnlike normal dispatches, which represent _usage_ of network capabilities, operational dispatches are those that _provide_ network capabilities. Operational dispatches can consume the entire weight limit of a block. They are not bound by the [`AvailableBlockRatio`](https://paritytech.github.io/substrate/master/frame_system/limits/struct.BlockLength.html#method.max_with_normal_ratio)\n. Dispatches in this class are given maximum priority and are exempt from paying the `length_fee`.\n\n#### Mandatory dispatches\n\nMandatory dispatches are included in a block even if they cause the block to surpass its weight limit. You can only use the mandatory dispatch class for [inherent transactions](/reference/glossary/#inherent-transactions)\n that are submitted by the block author. This dispatch class is intended to represent functions that are part of the block validation process. Because these dispatches are always included in a block regardless of the function weight, it is critical that the validation process prevents malicious nodes from abusing the function to craft blocks that are valid but impossibly heavy. You can typically accomplish this by ensuring that:\n\n*   The operation performed is always light.\n*   The operation can only be included in a block once.\n\nTo make it more difficult for malicious nodes to abuse mandatory dispatches, they cannot be included in blocks that return errors. This dispatch class exists to serve the assumption that it is better to allow an overweight block to be created than to not allow any block to be created at all.\n\n### [](/build/tx-weights-fees/#dynamic-weights)\nDynamic weights\n\nIn addition to purely fixed weights and constants, the weight calculation can consider the input arguments of a dispatchable. The weight should be trivially computable from the input arguments with some basic arithmetic:\n\n    use frame_support:: {\n        dispatch:: {\n            DispatchClass::Normal,\n            Pays::Yes,\n        },\n       weights::Weight,\n    };\n    \n    #[pallet::weight(FunctionOf(\\\n      |args: (&Vec<User>,)| args.0.len().saturating_mul(10_000),\\\n      )\\\n    ]\n    fn handle_users(origin, calls: Vec<User>) {\n        // Do something per user\n    }\n\n[](/build/tx-weights-fees/#post-dispatch-weight-correction)\nPost dispatch weight correction\n-------------------------------------------------------------------------------------------\n\nDepending on the execution logic, a dispatchable function might consume less weight than was prescribed pre-dispatch. To correct weight, the function declares a different return type and returns its actual weight:\n\n    #[pallet::weight(10_000 + 500_000_000)]\n    fn expensive_or_cheap(input: u64) -> DispatchResultWithPostInfo {\n        let was_heavy = do_calculation(input);\n    \n        if (was_heavy) {\n            // None means \"no correction\" from the weight annotation.\n            Ok(None.into())\n        } else {\n            // Return the actual weight consumed.\n            Ok(Some(10_000).into())\n        }\n    }\n\n[](/build/tx-weights-fees/#custom-fees)\nCustom fees\n---------------------------------------------------\n\nYou can also define custom fee systems through custom weight functions or inclusion fee functions.\n\n### [](/build/tx-weights-fees/#custom-weights)\nCustom weights\n\nInstead of using the default weight annotations, you can create a custom weight calculation type using the [weights](https://paritytech.github.io/substrate/master/frame_support/weights/index.html)\n module. The custom weight calculation type must implement the following traits:\n\n*   `WeighData<T>` to determine the weight of the dispatch.\n*   `ClassifyDispatch<T>` to determine the class of the dispatch.\n*   `Pays<T>` to determine whether the sender of the dispatch pays fees.\n\nSubstrate then bundles the output information of the three traits into the `DispatchInfo` struct and provides it by implementing the `GetDispatchInfo` for all `Call` variants and opaque extrinsic types. This is used internally by the System and Executive modules.\n\n`ClassifyDispatch`, `WeighData`, and `PaysFee` are generic over `T`, which gets resolved into the tuple of all dispatch arguments except for the origin. The following example illustrates a `struct` that calculates the weight as `m * len(args)` where `m` is a given multiplier and `args` is the concatenated tuple of all dispatch arguments. In this example, the dispatch class is `Operational` if the transaction has more than 100 bytes of length in arguments and will pay fees if the encoded length is greater than 10 bytes.\n\n    struct LenWeight(u32);\n    impl<T> WeighData<T> for LenWeight {\n        fn weigh_data(&self, target: T) -> Weight {\n            let multiplier = self.0;\n            let encoded_len = target.encode().len() as u32;\n            multiplier * encoded_len\n        }\n    }\n    \n    impl<T> ClassifyDispatch<T> for LenWeight {\n        fn classify_dispatch(&self, target: T) -> DispatchClass {\n            let encoded_len = target.encode().len() as u32;\n            if encoded_len > 100 {\n                DispatchClass::Operational\n            } else {\n                DispatchClass::Normal\n            }\n        }\n    }\n    \n    impl<T> PaysFee<T> {\n        fn pays_fee(&self, target: T) -> Pays {\n            let encoded_len = target.encode().len() as u32;\n            if encoded_len > 10 {\n                Pays::Yes\n            } else {\n                Pays::No\n            }\n        }\n    }\n\nA weight calculator function can also be coerced to the final type of the argument, instead of defining it as a vague type that can be encoded. The code would roughly look like this:\n\n    struct CustomWeight;\n    impl WeighData<(&u32, &u64)> for CustomWeight {\n        fn weigh_data(&self, target: (&u32, &u64)) -> Weight {\n            ...\n        }\n    }\n    \n    // given a dispatch:\n    #[pallet::call]\n    impl<T: Config<I>, I: 'static> Pallet<T, I> {\n        #[pallet::weight(CustomWeight)]\n        fn foo(a: u32, b: u64) { ... }\n    }\n\nIn this example, the `CustomWeight` can only be used in conjunction with a dispatch with a particular signature `(u32, u64)`, as opposed to `LenWeight`, which can be used with anything because there aren't any assumptions about `<T>`.\n\n### [](/build/tx-weights-fees/#custom-inclusion-fee)\nCustom inclusion fee\n\nThe following example illustrates how to customize your inclusion fee. You must configure the appropriate associated types in the respective module.\n\n    // Assume this is the balance type\n    type Balance = u64;\n    \n    // Assume we want all the weights to have a `100 + 2 * w` conversion to fees\n    struct CustomWeightToFee;\n    impl WeightToFee<Weight, Balance> for CustomWeightToFee {\n        fn convert(w: Weight) -> Balance {\n            let a = Balance::from(100);\n            let b = Balance::from(2);\n            let w = Balance::from(w);\n            a + b * w\n        }\n    }\n    \n    parameter_types! {\n        pub const ExtrinsicBaseWeight: Weight = 10_000_000;\n    }\n    \n    impl frame_system::Config for Runtime {\n        type ExtrinsicBaseWeight = ExtrinsicBaseWeight;\n    }\n    \n    parameter_types! {\n        pub const TransactionByteFee: Balance = 10;\n    }\n    \n    impl transaction_payment::Config {\n        type TransactionByteFee = TransactionByteFee;\n        type WeightToFee = CustomWeightToFee;\n        type FeeMultiplierUpdate = TargetedFeeAdjustment<TargetBlockFullness>;\n    }\n    \n    struct TargetedFeeAdjustment<T>(sp_std::marker::PhantomData<T>);\n    impl<T: Get<Perquintill>> WeightToFee<Fixed128, Fixed128> for TargetedFeeAdjustment<T> {\n        fn convert(multiplier: Fixed128) -> Fixed128 {\n            // Don't change anything. Put any fee update info here.\n            multiplier\n        }\n    }\n\n[](/build/tx-weights-fees/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------------\n\nYou now know what the weight system is, how it affects transaction fee computation, and how to specify weights for your dispatchable calls. The next step is determining the correct weight to account for the operations your dispatchable performs. You can use Substrate **benchmarking functions** and `frame-benchmarking` calls to test your functions with different parameters and empirically determine the correct weight in their worst case scenarios.\n\n*   [Benchmark](/test/benchmark/)\n    \n*   [SignedExtension](https://paritytech.github.io/substrate/master/sp_runtime/traits/trait.SignedExtension.html)\n    \n*   [Custom weights for the Example pallet](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/basic/src/weights.rs)\n    \n*   [Web3 Foundation Research](https://research.web3.foundation/Polkadot/overview/token-economics#relay-chain-transaction-fees-and-per-block-transaction-limits)\n    \n\n**Last edit:** February 16, 2024\n\n[\u2190 Previous](/build/runtime-storage/)\n[Next \u2192](/build/pallet-coupling/)\n\nON THIS PAGE\n\n[How fees are calculated](#how-fees-are-calculated)\n[Using the transaction payment pallet](#using-the-transaction-payment-pallet)\n[Transactions with special requirements](#transactions-with-special-requirements)\n[Default weight annotations](#default-weight-annotations)\n[Post dispatch weight correction](#post-dispatch-weight-correction)\n[Custom fees](#custom-fees)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/community/contributor-guidelines/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n[Home](/)\n[Community](/community/)\nContributor guidelines\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/community/contributor-guidelines.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nContributor guidelines\n======================\n\nThank you for your interest in contributing to documentation for the Substrate development framework. As a member of the community, you are invited and encouraged to contribute to the ever-evolving technical documentation and to the code base. There are a lot of ways to get involved. For example, you can contribute by:\n\n*   Submitting issues\n*   Offering suggestions for improvements to existing content\n*   Adding review comments to existing pull requests\n*   Proposing new content\n*   Creating new pull requests to fix issues yourself\n*   Creating pull request for new content other community members might find useful\n\nWe value, respect, and appreciate all contributions from the developer community and only ask that you agree to abide by our [Code of conduct](https://github.com/paritytech/substrate/blob/master/docs/CODE_OF_CONDUCT.md)\n and follow these Contributor guidelines.\n\nTo learn more about how to contribute, see the following topics:\n\n*   [Before you contribute](/community/contributor-guidelines/#before-you-contribute)\n    \n*   [How to contribute](/community/contributor-guidelines/#how-to-contribute)\n    \n*   [What to contribute](/community/contributor-guidelines/#what-to-contribute)\n    \n\n[](/community/contributor-guidelines/#before-you-contribute)\nBefore you contribute\n----------------------------------------------------------------------------------\n\nBefore contributing, please take a few minutes to review these contributor guidelines. The contributor guidelines are intended to make the contribution process easy and effective for everyone involved in addressing your issue, assessing changes, and finalizing your pull requests.\n\nBefore contributing, consider the following:\n\n*   If you want to report an issue, click **Issues** and provide as much information about the problem as possible.\n*   If you have a technical question or need help finding specific information, post your question on [Stack Exchange](https://substrate.stackexchange.com/)\n    .\n\nIf you want to contribute directly to this repository, typical fixes might include any of the following:\n\n*   Spelling, grammar, or typo fixes.\n*   Code indentation, white space, or formatting changes.\n*   Broken or missing links.\n\nNote that any contribution to this repository must be submitted in the form of a **pull request**. Before you create a pull request, be sure that the pull request only implements one bug fix.\n\nIf you are new to working with GitHub repositories and creating pull requests, consider exploring [First Contributions](https://github.com/firstcontributions/first-contributions)\n or [How to Contribute to an Open Source Project on GitHub](https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github)\n.\n\n[](/community/contributor-guidelines/#how-to-contribute)\nHow to contribute\n--------------------------------------------------------------------------\n\nThis repository contains the documentation source for the [docs.substrate.io](https://docs.substrate.io/)\n site and is focused primarily on documentation for Substrate blockchain developers and parachain developers.\n\n### [](/community/contributor-guidelines/#making-simple-edits)\nMaking simple edits\n\nFor simple changes, like fixing a typo or making minor changes to a sentence:\n\n1.  Click **Edit this page**.\n2.  Edit the page in GitHub.\n3.  Replace the default commit message with a short description of your change, then click **Commit Changes**.\n4.  Select **Create a new branch for this commit and start a pull request**.\n\n### [](/community/contributor-guidelines/#creating-branches-and-pull-requests)\nCreating branches and pull requests\n\nIf your contribution is more than a simple change, you'll need to follow the full work flow for creating a working branch and submitting a pull request. Here's a summary of what you need to do:\n\n1.  Navigate to the [substrate-docs](https://github.com/substrate-developer-hub/substrate-docs)\n     public repository in a web browser.\n2.  Clone or fork the repository to create a copy of the repository on your local machine.\n3.  Create a new branch for your fix by running a command similar to the following:\n    \n        git switch -c my-initials/my-branch-name-here\n    \n4.  Open the file you want to fix in a text editor and make the appropriate changes for the issue you are trying to address.\n5.  Add the file contents of the changed files by running a command similar to the following:\n    \n        git add path-to-changed-file\n    \n6.  Commit your changes to store the contents you added along with a descriptive message by running a command similar to the following:\n    \n        git commit -m \"Description of the fix being committed.\"\n    \n7.  Push the changes to the remote repository by running a command similar to the following:\n    \n        git push origin my-initials/my-branch-name-here\n    \n8.  Click **Create pull request** to start a new pull request and provide any additional information about the changes you made.\n    \n    A maintainer will review your pull request and approve or request changes. If no changes are required, the maintainer will merge your pull request. If a maintainer requested changes or clarification, update your pull request and request another reviewer.\n    \n9.  When you see your changes have been merged, celebrate your success! \ud83e\udd42\n\n[](/community/contributor-guidelines/#what-to-contribute)\nWhat to contribute\n----------------------------------------------------------------------------\n\nThe most valuable contributions from the community typically take the form of how-to guides or tutorials that help other developers solve specific problems, learn specific skills, or demonstrate specific tasks.\n\nIf you would like to contribute, you might be wondering \u201cWhat is the difference between a \u2018how-to\u2019 guide and a tutorial?\u201d.\n\n### [](/community/contributor-guidelines/#how-to-guides)\nHow-to guides\n\nA how-to guide describes how to achieve a goal or complete a task. Only the information that is pertinent to achieving that goal or completing the task is included. With how-to guides, readers have enough information to know what they want to do\u2014for example, open a bank account\u2014but not necessarily enough information to know how to do it. For example, the how-to guide for opening a bank account wouldn't explain what a bank account is or why you might want to open one, but would focus on specific steps such as:\n\n1.  Select an institution.\n2.  Fill out an application.\n3.  Deposit a minimum amount of currency.\n\nHow-to guides often include links to additional information, but should not include explanations that take the focus away from what the reader wants to accomplish. For more information about writing _How-to_ guides, see the [Template - How-to guide](/community/template-how-to-guide/)\n and the [Markdown template](https://github.com/substrate-developer-hub/substrate-docs/blob/main/static/assets/contribute-templates/how-to-template.md)\n.\n\n### [](/community/contributor-guidelines/#tutorials)\nTutorials\n\nA tutorial is a hands-on illustration or lesson that enables the reader to achieve a **highly-predictable** result. Tutorials assume that readers have no prior knowledge on the subject being covered and that they require explicit guidance to complete each step to reach a **well-known** outcome. Typically, a tutorial is a guided tour that helps the reader complete one organic task from start to finish. There are no detours and the information should not be broken out into subtopics because the steps must be completed in order, not in a sequence of the reader\u2019s choosing.\n\nThe single most important aspect of a tutorial is that it should always result in a successful, expected outcome. The successful outcome is what inspires confidence and delight in the reader. The single most important distinction between a how-to guide and a tutorial is that, in a tutorial, the author decides what the goal should be and the author eliminates all distractions that would detract from the successful achievement of the goal.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/community/content-style-guide/)\n[Next \u2192](/community/template-how-to-guide/)\n\nON THIS PAGE\n\n[Before you contribute](#before-you-contribute)\n[How to contribute](#how-to-contribute)\n[What to contribute](#what-to-contribute)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/community/content-style-guide/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n[Home](/)\n[Community](/community/)\nContent style guide\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/community/content-style-guide.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nContent style guide\n===================\n\nThis guide focuses on best practices for writing technical documentation and on the style conventions to use when developing documentation for Parity Technologies products and audiences. The goal of this guide is to help members of the documentation team and any one interested in contributing to documentation write material that is clear, concise, and consistent.\n\nThis guide also includes peculiarities to working with this repo specifically for active contributors to be aware of available in the [Builder notes](/community/content-style-guide/#builder-notes)\n section.\n\nIf you can't find the answer to a style, voice, or terminology question in this guide, consult the following resources:\n\n*   [Google developer documentation style guide](https://developers.google.com/style)\n    \n*   [Microsoft Style Guide](https://docs.microsoft.com/en-us/style-guide/welcome/)\n    \n*   [Chicago Manual of Style](https://www.chicagomanualofstyle.org/book/ed17/frontmatter/toc.html)\n    \n*   [Merriam-Webster Dictionary](https://www.merriam-webster.com/)\n    \n\nIf you can't the answer in any of these resources, open an issue.\n\n[](/community/content-style-guide/#general-guidance-for-writing-engaging-content)\nGeneral guidance for writing engaging content\n-------------------------------------------------------------------------------------------------------------------------------\n\nThere are three keys to writing content that engages the audience:\n\n*   Use the _second person_ point of view to directly address the reader.\n*   Use an _active voice_ and _present tense_ whenever possible.\n*   Use a _conversational tone_ that is not too formal or too chummy.\n\n### [](/community/content-style-guide/#point-of-view)\nPoint of view\n\nIn most cases, address the reader directly. For tutorials, use either first person plural\u2014we, us, our, ours\u2014or second person point of view. Because tutorials provide a more guided approach to a topic, using the first person plural is a more natural and commonly-accepted practice than in other types of documentation.\n\nUse the first person point of view sparingly and with intention. When overused, the first person narrative can overwhelm the sense of a shared experience and obscure the reader\u2019s journey.\n\nDo not use \u201cI\u201d or \u201cme\u201d unless it appears in the text of a user interface element.\n\nDo not use \u201cwe\u201d to refer to Parity or the Substrate Developer Hub team. For example, if you are documenting a recommended setting or practice, use \u201cParity Technologies recommends....\u201d not \u201cWe recommend...\u201d.\n\n### [](/community/content-style-guide/#passive-constructions)\nPassive constructions\n\nIn spite of the axiom to never use the passive voice, there are situations where a passive sentence structure might be appropriate. Don\u2019t twist a sentence into knots just to avoid a passive construction. Passive voice does have its place, but be wary of using it.\n\nWhen writing about software, it\u2019s often tempting to describe what\u2019s happening from the code point of view. However, there\u2019s almost always a human being with a goal or task to complete who is initiating the activity that the software is executing. If you keep this human presence in mind, your writing will be more dynamic, easier to follow, and more interesting to read.\n\n### [](/community/content-style-guide/#contractions-and-conversational-tone)\nContractions and conversational tone\n\nContractions are generally acceptable because they give documentation a more natural conversational tone\u2014at least for English speakers. Be conscious of when and why you use contractions.\n\nTo keep the tone conversational but concise, adhere to the following common-sense guidelines:\n\n*   Use common, well-known words whenever possible.\n*   Don\u2019t use flowery language or literary flourish words and phrases like \u201cand so forth\u201d, \u201calbeit\u201d, \u201cheretofore\u201d, or \u201cthus\u201d.\n*   Try to be precise in word choice. For example:\n    \n    *   Don\u2019t use \u201cwhen\u201d\u2014implying eventuality and time\u2014as interchangeable with \u201cif\u201d, which implies the possibility of something happening.\n    *   Don\u2019t use phrases that introduce ambiguity. For example, instead of \u201cWhen the process completes...\u201d use \u201cAfter the process completes...\u201d.\n    *   Think carefully about word choices like using \u201csince\u201d (implying a period of time) instead of \u201cbecause\u201d (implying cause and result) or using \u201conce\u201d (single occurrence) instead of \u201cafter\u201d (each time).\n*   Avoid using dead language words and phrases even if they are generally accepted as English words in practice. For example:\n    \n    *   Instead of \u201ci.e.\u201d, use \u201cthat is\u201d or rewrite the sentence to make the meaning clear without needing extra qualification.\n    *   Instead of \u201ce.g.\u201d, use \u201cfor example\u201d.\n    *   Instead of \u201cvia\u201d, use an appropriate English substitute such as \u201cby\u201d, \u201cthrough\u201d, or \u201cusing\u201d.\n    *   Instead of \u201cetc.\u201d, use \u201cand so on\u201d or revise the content to make the term unnecessary. For example, revise to use such as or like followed by an example or two.\n    *   Instead of \u201ccaveat\u201d, use an appropriate English substitute such as \u201cnotice\u201d, \u201ccaution\u201d, or \u201cwarning\u201d.\n*   Avoid adding unnecessary words or phrases. For example:\n    \n    *   Instead of \u201cIn order to\u201d, just use \u201cto\u201d.\n    *   Instead of \u201cas well as\u201d, just use \u201cand\u201d.\n    *   Instead of \u201cand then\u201d, just use \u201cthen\u201d.\n*   Avoid jargon, colloquialisms, and idiomatic phrases.\n*   Avoid adverbs and subjective statements. For example, don\u2019t use words and phrases that include easily, rapidly, simply, quickly.\n    \n    *   Experienced developers who truly prefer to skip the tutorial...\n    *   We can quickly test if this code is functioning as expected...\n\n[](/community/content-style-guide/#headings)\nHeadings\n-----------------------------------------------------\n\nAll heading levels should use the following conventions:\n\n*   Use sentence style case.\n*   Use active, present tense verbs in headings wherever appropriate, especially in the context of tutorials and how-to guides.\n*   Serve as a summary of the content they contain.\n*   Avoid generic headings like overview and introduction, if possible. While generic heading can be conceptually useful, they add no value to the content or the navigational experience.\n*   Always contain content. A heading should never be immediately followed by another heading. As a best practice, avoid using headings strictly for navigation.\n*   Avoid using code, proper names, product-specific jargon, and backticks in headings.\n*   Keep headings as succinct as possible while providing meaningful clues about the content.\n\n### [](/community/content-style-guide/#limit-heading-levels)\nLimit heading levels\n\nAs a best practice, avoid building an information hierarchy with more than three heading levels. Most content can be effectively organized using two internal heading levels, making it easier to navigate and scan for relevant topics.\n\n### [](/community/content-style-guide/#topic-titles)\nTopic titles\n\nAvoid using gerunds (verbs that end with -ing) in titles and headings. Procedure titles and headings should answer the question: _What are you trying to do?_ For example, if the answer to _What are you trying to do?_ is _I want to create an account_, the article heading should be _Create an account_. In most cases, concept and reference topics are named with a noun phrase, such as _Event hooks_.\n\n[](/community/content-style-guide/#lists)\nLists\n-----------------------------------------------\n\nIntroduce lists with a heading, a sentence, or a fragment that ends with a colon.\n\nUse **numbered lists** for processes and procedures that must be completed in sequential order. Use **bulleted lists** for items that don't need to appear in order.\n\nMake all list items parallel in structure. For example, start each item in the list using a noun or a phrase that starts with a verb.\n\n### [](/community/content-style-guide/#bullets)\nBullets\n\nBullets are for unordered lists. The order of items in a bulleted list can imply importance, but generally all list items are peers.\n\nEach list item should start with a capital letter and end with a period unless all of the list items are single words or short phrases of no more than four words. Use parallel structure in phrasing the items in a list. For example, each list item might start with a verb, noun, or gerund.\n\n### [](/community/content-style-guide/#numbered-steps)\nNumbered steps\n\nOnly use numbered paragraphs for steps in procedures. If a procedure has more than nine steps, always consider breaking it into subsections with headings. Ideally, each procedure or subtask should be three to six steps, not have nested sub-steps, and have minimal embedded paragraphs describing what happens\u2014the result or outcome to expect\u2014in an unnumbered paragraph following the step.\n\nDon't combine different actions into one step except when two actions complete a task, such as \"Enter the user name, then click **Next**.\"\n\n[](/community/content-style-guide/#pronouns)\nPronouns\n-----------------------------------------------------\n\nUse gender-neutral pronouns, like \u201cthey\u201d whenever possible. Generally, you can change any noun from singular to plural to have subject-verb-pronoun agreement and avoid the use of gender-specific pronouns like \u201che\u201d, \u201chim\u201d, \u201chis\u201d or \u201cshe\u201d, \u201cher\u201d, \u201chers\u201d.\n\nBe wary of impersonal and potentially ambiguous pronouns such as:\n\n*   all, another, any\n*   each, either\n*   few, many, neither, none,\n*   one, other\n*   same, several, some, such\n*   that, them, these, those\n\nIf you use any of these impersonal pronouns, be sure you answer \u201cof what?\u201d, \u201cof which?\u201d, or \u201cas what?\u201d in the sentence.\n\n[](/community/content-style-guide/#terminology-and-usage-conventions)\nTerminology and usage conventions\n-------------------------------------------------------------------------------------------------------\n\nThis section covers common terminology, style, and usage questions and recommended practices.\n\n### [](/community/content-style-guide/#above-and-below)\nAbove and below\n\nDon't use _above_ to mean _earlier_ or as an adjective preceding a noun (_the above section_) or following a noun (_the code above_). Use a hyperlink, or use _previous_, _preceding_, or _earlier_.\n\nDon't use _below_ to mean _later_ or as an adjective preceding a noun (_the below section_) or following a noun (_the code below_). Use a hyperlink, or use _later_ or _the following_.\n\nFor example: Use the preceding code to display information about the database. Use the following code to display information about the database.\n\n### [](/community/content-style-guide/#dates-and-numbers)\nDates and numbers\n\nUse the DD Mon YYYY or DD Month YYYY format for dates.\n\nIn body text, spell out whole numbers from zero through nine. Use numerals for 10 or greater. Use commas in numbers with four or more digits. Use _more than_ instead of _over_ (over is a spatial term).\n\n### [](/community/content-style-guide/#emphasis-and-admonitionments)\nEmphasis and admonitionments\n\nUse bold formatting for user interface elements that the user interacts with, including:\n\n*   Dialog titles\n*   Field labels\n*   Buttons labels\n*   Options displayed in the user interface\n\nDon't use bold, italics, or underlining for emphasis. If there's text that requires more attention than the surrounding body, consider isolating it as a standalone note or tip.\n\n**Use admonishment components sparingly!** They are generally disruptive to the reader\u2019s experience. Ask yourself if it is really necessary to stop the reader\u2019s forward progress by adding a Note, Caution, or Tip component.\n\n#### Note\n\nIndicates neutral or positive information that emphasizes or supplements important points of the main text. A note supplies information that may apply only in special cases. Examples are memory limitations, equipment configurations, or details that apply to specific versions of a program.\n\n#### Tip\n\nHelps users apply the techniques and procedures described in the text to their specific needs. A tip suggests alternative methods that may not be obvious and helps users understand the benefits and capabilities of the product. A tip is not essential to the basic understanding of the text.\n\n#### Caution\n\nAdvises users that failure to take or avoid a specific action could result in loss of data.\n\n### [](/community/content-style-guide/#images)\nImages\n\nDiagrams and illustrations can help readers visualize and internalize complex ideas and processes. So, use them liberally but with intention. Images also help to break up long text flows, but they should always reinforce and reflect the text immediately preceding or immediately following the image.\n\nIf you include screenshots, only include the relevant parts of the screen and use callouts to highlight how what is captured in the image is relevant to the text.\n\nBe wary of using diagrams or illustrations that include any information\u2014visual or textual\u2014that is likely to get stale.\n\n### [](/community/content-style-guide/#log-in-formats)\nLog in formats\n\nMost Linux distributions and macOS use log in to describe how a user initiates an interactive session. Windows uses log on.\n\n*   Use _log in_ as two words with no hyphen when describing an action (verb usage).\n*   Use _login_ as one word when used as a noun (rare but some platforms use login to mean user or an identity).\n*   Use _log-in_ with a hyphen when modifying a noun (adjective usage).\n\n### [](/community/content-style-guide/#optional-steps)\nOptional steps\n\nUse (Optional) to the beginning of steps that are optional. For example:\n\n1.  Open a new terminal.\n2.  Open the attributes file in a text editor.\n3.  (Optional) Add a custom field.\n\n### [](/community/content-style-guide/#punctuation)\nPunctuation\n\n| Element | How to use it |\n| --- | --- |\n| apostrophe (\u2018) | Use in contractions for a conversational tone. Avoid using the possessive form. |\n| capitalization | Use sentence style capitalization for all headings. When referring to elements in the user interface, follow the capitalization that is used in the labels or text. Do not capitalize common terms. |\n| colon (:) | Use a colon at the end of the statement that introduces a procedure, bulleted list, or table. |\n| comma (,) | Use a serial comma to separate three or more items in a series, including the item before the conjunction. |\n| em dash (\u2014) | Use an em dash (\u2014) to set off a parenthetical phrase with more emphasis than parentheses provide. Don\u2019t add spaces around an em dash. Don\u2019t capitalize the first word after an em dash unless the word is a proper noun. |\n| hyphenation (-) | Avoid using hyphenated compound words. Use hyphens only if the meaning is unclear without them or if the only recognized form of the word includes a hyphen. |\n| quotation marks (\" \") | Avoid using quotation marks unless you need to quote a message or as tring that would otherwise be confusing given its surrounding context. |\n| semicolons (;) | Don't use semicolons instead of commas to separate items in a list. If you think the content should use semicolons, consider rewriting it into subtopics or an unordered bullet list. |\n| Slashes (/) and backslashes () | Avoid using slashes or backslashes except when documenting paths that require either forward or backward slashes. Never use _and/or_ in documentation. |\n\n### [](/community/content-style-guide/#software-versions)\nSoftware versions\n\nUse or later or and later to refer to multiple versions of software. For example:\n\n*   Firefox 3.6 or later\n*   Rust compiler (rustc) version 1.55.0 and later\n\n### [](/community/content-style-guide/#tense)\nTense\n\nUse **present tense** whenever possible. Use past tense only if you must describe something that has already occurred. Use future tense only if you must describe something that has not yet occurred but can be safely assumed.\n\n### [](/community/content-style-guide/#user-interface-elements)\nUser interface elements\n\nIn general, you should avoid writing about user interface elements. Instead, documentation should always focus on what the audience needs to do or wants to accomplish and not what is displayed on the screen.\n\n| Element | What to do |\n| --- | --- |\n| button | Use bold for the button label. Don't include \"button\" in the description. For example: Click **Submit**. |\n| checkbox | Use checkbox, not box or check box, if you need to refer to a checkbox in the user interface. Use _select_ and _clear_ with checkboxes, not turn on and turn off, mark and unmark, check and uncheck, or unselect and deselect. |\n| click | Use click to describe taking action on a standalone button. Do not use click on. Click and select are not interchangeable. |\n| dialog | If you need to refer to a dialog box, use dialog. Don't use pop-up window, dialog box, or dialogue box. |\n| dropdown | Use _dropdown_ as an adjective, not as a noun. For example, use _dropdown list_. |\n\n### [](/community/content-style-guide/#verb-usage)\nVerb usage\n\n| Verb | How to use it |\n| --- | --- |\n| allow, enable | Avoid using software as a point of view and consider rewriting to focus on the human interacting with the software. |\n| can, may, might | Use the verb _can_ when describing ability, capability, or capacity. Avoid using the verb _may_ because it implies permission. Use the past tense _might_ when describing the possibility or eventuality of an outcome. |\n| clear | Use \\__clear_ rather than _deselect_ or _unselect_ if you have to describe removing a selection from a checkbox. |\n| displays | Use the transitive verb displays rather than the intransitive verb appears. Use displays with a direct object. For example, The command displays log messages. |\n| ensure | Use _ensure_ to mean to make sure or to guarantee. Remember that this is not interchangeable with assure (to make confident) and insure (to provide insurance). |\n| enter, type | Use _enter_ to instruct the user to input a value by pressing the Enter or Return key. Use _type_ to instruct the user to type a value in a field. |\n| select | Use select to describe taking action on a menu item, checkbox, or radio button. Note that click and select are not interchangeable. |\n| set up, setup | Use _set up_\u2014two words, no hyphen\u2014when used as a verb. Don't hyphenate. Use _setup_\u2014one word, no hyphen\u2014when used as an adjective or as a noun. |\n| want, wish | Use _want_ instead of wish or desire when the user has a choice of actions. |\n\n### [](/community/content-style-guide/#word-choice)\nWord choice\n\n| Word in question | How to use it |\n| --- | --- |\n| affect, effect | Use _affect_ as a verb and use _effect_ as a noun. |\n| app, application | Use _application_ or _applications_ unless there\u2019s a specific reason for using the shorthand term _app_ or _apps_. |\n| back-end, front-end | Using the hyphen in these terms is still more common than not using it. Both forms are acceptable, but for consistency use the hyphen. |\n| email | It hasn\u2019t been e-mail for thirty-plus years. Never use emails. Don\u2019t use email as a verb. |\n| file name | Use _file name_ as two words, not _filename_. |\n| its, it\u2019s | Use _its_ as a possessive meaning belonging to or associated with an object or idea previously mentioned. Because it is a vague pronoun, be sure what _it_ refers to can be easily identified. Use _it\u2019s_ only as a contraction for _it is_ or _it has_. |\n| please | Avoid using _please_ in documentation unless there\u2019s a specific reason for using it. For example, you might use please if quoting the content of a message that asks the user to do something inconvenient. |\n| prerequisite | As a section title, use _Before you begin_ instead. If you use _prerequisite_ in the text, there\u2019s no hyphen. |\n| that, which | Use _that_ at the beginning of a clause that\u2019s necessary for the sentence to make sense. Don\u2019t put a comma before it. Don't use that when introducing a clause referring to people. Use _who_. Use _which_ at the beginning of a clause that adds supporting or parenthetical information to a sentence. If you can omit the clause and the sentence still makes sense, use _which_, and put a comma before it. |\n| user name | Use user name as two words, not username. |\n\n[](/community/content-style-guide/#best-practices-and-common-mistakes)\nBest practices and common mistakes\n---------------------------------------------------------------------------------------------------------\n\nThis section highlights best practices and common mistakes to avoid.\n\n### [](/community/content-style-guide/#make-every-word-count)\nMake every word count\n\nConcise sentences are easier to read, comprehend, and translate.\n\n*   Use simple words with precise meanings.\n*   Remove words that don\u2019t add substance.\n*   Avoid using passive _to be_ verbs like been and being.\n*   Avoid weak or vague verbs, such as _have_, _make_, and _do_.\n\nWhen in doubt, choose the simple word or phrase over a more formal or complex one. For example:\n\n| Use this | Not this |\n| --- | --- |\n| use | utilize, make use of |\n| remove | extract, take away, eliminate |\n| tell | inform, let know |\n| to  | in order to, as a means to |\n| also | in addition |\n| connect | establish connectivity |\n\nWhenever possible, choose words that have one clear meaning. Omit unnecessary adverbs\u2014words that describe how, when, or where. Unless they're important to the meaning of a statement, leave them out.\n\n### [](/community/content-style-guide/#be-consistent)\nBe consistent\n\nUse one term consistently to represent one concept. For example, if you use extrinsic, dispatchable, and transaction interchangeably or ambiguously, you\u2019ll leave the reader confused and uncertain. If terminology changes, be prepared to root out old terminology.\n\nIf you use words that can be both nouns and verbs\u2014for example, words like file, post, mark, screen, record, and report\u2014use sentence structure and context to eliminate ambiguity.\n\n### [](/community/content-style-guide/#avoid-dangling-participles)\nAvoid dangling participles\n\nParticiples are modifiers so they must have a noun to modify. A dangling participle is a participle that doesn\u2019t have a noun to modify. If you misplace or leave out the word being modified, you\u2019ll end up with a sentence that is difficult to understand, illogical, or ambiguous (though potentially amusing). Here are a few examples of sentences with dangling participles:\n\n*   Looking around the yard, dandelions sprouted in every corner.\n*   Walking through the kitchen, the smoke alarm was going off.\n*   Driving like a maniac, the deer was hit and killed.\n\nYou can correct these sentences by bringing the participle phrase closer to the subject the phrase is intended to modify or changing the word order of the sentence to clarify who is doing what. You can also fix these types of problems by changing the tense or using the active voice. For example:\n\n*   Looking around the yard, I saw dandelions had sprouted in every corner.\n*   As I was walking through the kitchen, the smoke alarm was going off.\n*   Driving like a maniac, he hit a deer and killed it.\n\n### [](/community/content-style-guide/#dangling-prepositions)\nDangling prepositions\n\nIn modern English, it\u2019s perfectly acceptable to end a sentence with a preposition. Don\u2019t twist a sentence into knots just to avoid using a preposition at the end.\n\n*   This is something you might be interested in.\n*   This is an example you should pay attention to.\n\n### [](/community/content-style-guide/#cross-reference-formats)\nCross-reference formats\n\nMost cross-references should include information that clarifies what the reader can expect to be found in the referenced topic.\n\n*   For cross-references to topics in the Substrate documentation, use the following formats:\n    \n    For more information about \\[task or concept\\], see \\[topic-title\\].\n    \n*   For cross-references in a glossary entry to other glossary entries, use the following format:\n    \n    See \\[topic\\].\n    \n*   For cross-references to external resources, use the title of the destination instead of the URL of the destination.\n\nAvoid using links to unnamed destinations. For example, don\u2019t use links like click here or see this article.\n\n[](/community/content-style-guide/#writing-concept-topics)\nWriting concept topics\n---------------------------------------------------------------------------------\n\nConcept topics answer \u201cwhy?\u201d and \u201cwhat is\u2026?\u201d questions. Use concept topics to:\n\n*   Explain abstract ideas.\n*   Introduce new terminology.\n*   Offer analysis.\n*   Provide background information.\n\nThe goal of a concept topic is to help the reader understand the bigger picture, the key components of a system or architecture, relationships between components.\n\nConcept topics tend to be relatively stable, requiring little, if any, ongoing maintenance.\n\nAt a minimum, a concept topic includes at least one heading and one or more body paragraphs. A concept topic can also include:\n\n*   One or more examples.\n*   Two or more subsections, marked by subheadings.\n*   A list of related topics.\n\n[](/community/content-style-guide/#builder-notes)\nBuilder notes\n---------------------------------------------------------------\n\nThis repository has some conventions and peculiarities that you need to take into account when modifying it (in any way). Please read this entire section to avoid common `gotchas` and help make your life and the maintainers lives easier.\n\n### [](/community/content-style-guide/#new-pages-and-moving-files)\nNew pages and moving files\n\n*   If you are adding or renaming a page, you **must** add it correctly in `src/components/DevNavMenu.tsx` and possibly `gatsby-config.js` and `gatsby-node.js`. Your `index.mdx` file's `title` is not the source for the navigation rendering.\n\n### [](/community/content-style-guide/#internal-link-conventions)\nInternal link conventions\n\n*   All `/rustdoc/` internal links must end with `.html` or `.html#some-ID`. Reasoning can be found in [#425](https://github.com/substrate-developer-hub/substrate-docs/issues/425)\n    .\n\n### [](/community/content-style-guide/#check-rendering-images-by-clearing-cache)\nCheck rendering images by clearing `.cache`\n\nFrom time to time, the development server local cache becomes corrupted. To fix this in a one liner:\n\n    yarn clean && yarn dev\n\n**_PLEASE do this when reviewing a page before every PR_** - this ensures your state is what the build CI see as well.\n\n### [](/community/content-style-guide/#new-or-updated-yarn-packages)\nNew or updated `yarn` packages\n\nFrom time to time, BREAKING changes happen in the `yarn` dependencies. To fix this in a one liner on `main`:\n\n    git checkout main && git pull && yarn install && yarn clean && yarn dev\n\nChange the branch above to your working brach of choice, or start a new on for a new PR based on latest `main` this way.\n\nNOTE: please discard the `\"private\": false,` field this adds to `package.json`.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/community/)\n[Next \u2192](/community/contributor-guidelines/)\n\nON THIS PAGE\n\n[General guidance for writing engaging content](#general-guidance-for-writing-engaging-content)\n[Headings](#headings)\n[Lists](#lists)\n[Pronouns](#pronouns)\n[Terminology and usage conventions](#terminology-and-usage-conventions)\n[Best practices and common mistakes](#best-practices-and-common-mistakes)\n[Writing concept topics](#writing-concept-topics)\n[Builder notes](#builder-notes)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/community/", "markdown": "\n\nNavigation Menu\n---------------\n\nToggle navigation\n\n[](https://github.com/)\n\n[Sign in](/login?return_to=https%3A%2F%2Fgithub.com%2Fsubstrate-developer-hub%2Fawesome-substrate%2Fblob%2Fmaster%2FREADME.md)\n\n*   Product\n    \n    *   [Actions\\\n        \\\n        Automate any workflow](https://github.com/features/actions)\n        \n    *   [Packages\\\n        \\\n        Host and manage packages](https://github.com/features/packages)\n        \n    *   [Security\\\n        \\\n        Find and fix vulnerabilities](https://github.com/features/security)\n        \n    *   [Codespaces\\\n        \\\n        Instant dev environments](https://github.com/features/codespaces)\n        \n    *   [GitHub Copilot\\\n        \\\n        Write better code with AI](https://github.com/features/copilot)\n        \n    *   [Code review\\\n        \\\n        Manage code changes](https://github.com/features/code-review)\n        \n    *   [Issues\\\n        \\\n        Plan and track work](https://github.com/features/issues)\n        \n    *   [Discussions\\\n        \\\n        Collaborate outside of code](https://github.com/features/discussions)\n        \n    \n    Explore\n    \n    *   [All features](https://github.com/features)\n        \n    *   [Documentation](https://docs.github.com)\n        \n    *   [GitHub Skills](https://skills.github.com)\n        \n    *   [Blog](https://github.blog)\n        \n    \n*   Solutions\n    \n    For\n    \n    *   [Enterprise](https://github.com/enterprise)\n        \n    *   [Teams](https://github.com/team)\n        \n    *   [Startups](https://github.com/enterprise/startups)\n        \n    *   [Education](https://education.github.com)\n        \n    \n    By Solution\n    \n    *   [CI/CD & Automation](https://github.com/solutions/ci-cd)\n        \n    *   [DevOps](https://github.com/solutions/devops)\n        \n    *   [DevSecOps](https://github.com/solutions/devsecops)\n        \n    \n    Resources\n    \n    *   [Learning Pathways](https://resources.github.com/learn/pathways)\n        \n    *   [White papers, Ebooks, Webinars](https://resources.github.com)\n        \n    *   [Customer Stories](https://github.com/customer-stories)\n        \n    *   [Partners](https://partner.github.com)\n        \n    \n*   Open Source\n    \n    *   [GitHub Sponsors\\\n        \\\n        Fund open source developers](/sponsors)\n        \n    \n    *   [The ReadME Project\\\n        \\\n        GitHub community articles](https://github.com/readme)\n        \n    \n    Repositories\n    \n    *   [Topics](https://github.com/topics)\n        \n    *   [Trending](https://github.com/trending)\n        \n    *   [Collections](https://github.com/collections)\n        \n    \n*   Enterprise\n    \n    *   [Enterprise platform\\\n        \\\n        AI-powered developer platform](/enterprise)\n        \n    \n    Available add-ons\n    \n    *   [Advanced Security\\\n        \\\n        Enterprise-grade security features](https://github.com/enterprise/advanced-security)\n        \n    *   [GitHub Copilot\\\n        \\\n        Enterprise-grade AI features](/features/copilot#enterprise)\n        \n    *   [Premium Support\\\n        \\\n        Enterprise-grade 24/7 support](/premium-support)\n        \n    \n*   [Pricing](https://github.com/pricing)\n    \n\nSearch or jump to...\n\nSearch code, repositories, users, issues, pull requests...\n==========================================================\n\nSearch\n\nClear\n\n[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)\n\nProvide feedback\n================\n\nWe read every piece of feedback, and take your input very seriously.\n\n Include my email address so I can be contacted\n\nCancel Submit feedback\n\nSaved searches\n==============\n\nUse saved searches to filter your results more quickly\n------------------------------------------------------\n\nName  \n\nQuery \n\nTo see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)\n.\n\nCancel Create saved search\n\n[Sign in](/login?return_to=https%3A%2F%2Fgithub.com%2Fsubstrate-developer-hub%2Fawesome-substrate%2Fblob%2Fmaster%2FREADME.md)\n\n[Sign up](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-repo&source_repo=substrate-developer-hub%2Fawesome-substrate)\n\nYou signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert\n\n[substrate-developer-hub](/substrate-developer-hub) / **[awesome-substrate](/substrate-developer-hub/awesome-substrate)** Public\n\n*   [Notifications](/login?return_to=%2Fsubstrate-developer-hub%2Fawesome-substrate)\n     You must be signed in to change notification settings\n*   [Fork 139](/login?return_to=%2Fsubstrate-developer-hub%2Fawesome-substrate)\n    \n*   [Star 733](/login?return_to=%2Fsubstrate-developer-hub%2Fawesome-substrate)\n    \n\n*   [Code](/substrate-developer-hub/awesome-substrate)\n    \n*   [Issues 8](/substrate-developer-hub/awesome-substrate/issues)\n    \n*   [Pull requests 4](/substrate-developer-hub/awesome-substrate/pulls)\n    \n*   [Actions](/substrate-developer-hub/awesome-substrate/actions)\n    \n*   [Security](/substrate-developer-hub/awesome-substrate/security)\n    \n*   [Insights](/substrate-developer-hub/awesome-substrate/pulse)\n    \n\nAdditional navigation options\n\n*   [Code](/substrate-developer-hub/awesome-substrate)\n    \n*   [Issues](/substrate-developer-hub/awesome-substrate/issues)\n    \n*   [Pull requests](/substrate-developer-hub/awesome-substrate/pulls)\n    \n*   [Actions](/substrate-developer-hub/awesome-substrate/actions)\n    \n*   [Security](/substrate-developer-hub/awesome-substrate/security)\n    \n*   [Insights](/substrate-developer-hub/awesome-substrate/pulse)\n    \n\nFiles\n-----\n\n\u00a0master\n\n*   .github\n    \n*   .editorconfig\n    \n*   LICENSE\n    \n*   README.md\n    \n*   contributing.md\n    \n\nBreadcrumbs\n-----------\n\n1.  [awesome-substrate](/substrate-developer-hub/awesome-substrate/tree/master)\n    \n\n/\n\nREADME.md\n=========\n\nBlame\n\nBlame\n\nLatest commit\n-------------\n\nHistory\n-------\n\n[History](/substrate-developer-hub/awesome-substrate/commits/master/README.md)\n\n[](/substrate-developer-hub/awesome-substrate/commits/master/README.md)\n\n244 lines (208 loc) \u00b7 23.5 KB\n\nBreadcrumbs\n-----------\n\n1.  [awesome-substrate](/substrate-developer-hub/awesome-substrate/tree/master)\n    \n\n/\n\nREADME.md\n=========\n\nTop\n\nFile metadata and controls\n--------------------------\n\n*   Preview\n    \n*   Code\n    \n*   Blame\n    \n\n244 lines (208 loc) \u00b7 23.5 KB\n\n[Raw](https://github.com/substrate-developer-hub/awesome-substrate/raw/master/README.md)\n\nAwesome Substrate [![Awesome](https://camo.githubusercontent.com/d8a7a4fac2f2d3bf4b2c51bcfd52e313ba9f174d739073645c5b7efbce171fd4/68747470733a2f2f617765736f6d652e72652f62616467652d666c61742e737667)](https://awesome.re)\n\n===========================================================================================================================================================================================================================\n\n[](#awesome-substrate-)\n\n> Please see [`awesome-dot`](https://github.com/haquefardeen/awesome-dot)\n>  for a similar list that is more general to the entire Polkadot ecosystem, not just Substrate.\n\n* * *\n\n> An awesome list is a list of awesome things curated by the Substrate community.\n\nSubstrate is a framework for building upgradable, modular and efficient blockchains. Substrate is an open-source library of [Rust](https://www.rust-lang.org/)\n code that is maintained by [Parity Technologies](https://www.parity.io/)\n. Source code available on [GitHub](https://github.com/paritytech/substrate)\n.\n\nContents\n--------\n\n[](#contents)\n\n*   [Resources](#resources)\n    \n*   [Support](#support)\n    \n*   [Social](#social)\n    \n*   [Events](#events)\n    \n*   [Blogs](#blogs)\n    \n*   [Videos](#videos)\n    \n*   [Templates](#templates)\n    \n*   [FRAME Pallets](#frame-pallets)\n    \n*   [Framework Extensions](#framework-extensions)\n    \n*   [Client Libraries](#client-libraries)\n    \n*   [Mobile](#mobile)\n    \n*   [Tools](#tools)\n    \n*   [Products and Services](#products-and-services)\n    \n*   [Alternative Implementations](#alternative-implementations)\n    \n*   [SCALE Codec](#scale-codec)\n    \n\nResources\n---------\n\n[](#resources)\n\n*   [DotJobs](https://dotjobs.net/)\n     - A job board for the Substrate and Polkadot ecosystem projects, maintained by [Stateless.Money](https://stateless.money/)\n    .\n*   [Developer Hub GitHub](https://github.com/substrate-developer-hub/)\n     - Substrate Developer Hub repositories.\n*   [Ecosystem Projects](https://substrate.io/ecosystem/projects/)\n     - Projects and teams building with Substrate.\n*   [Polkadot Stack](https://github.com/w3f/Grants-Program/blob/master/docs/polkadot_stack.md)\n     - An `awesome list` maintained by our friends at [Web3 Foundation](https://web3.foundation/)\n    .\n*   [Official Homepage](https://substrate.io/)\n     - Vision, ecosystem, opportunities, and much more.\n    *   [Docs](https://docs.substrate.io/)\n         - Developer documentation.\n    *   [Tutorials](https://docs.substrate.io/tutorials)\n         - Guided exercises to get you started.\n    *   [How-to guides](https://docs.substrate.io/how-to-guides)\n         - Workflows outlined to achieve a specific goal.\n    *   [Reference Docs](https://docs.substrate.io/rustdocs)\n         - Versioned API documentation.\n*   Technical Papers\n    *   [Polkadot Lightpaper](https://polkadot.network/Polkadot-lightpaper.pdf)\n        \n    *   [Polkadot: Vision for a heterogeneous multi-chain framework](https://github.com/polkadot-io/polkadotpaper/raw/master/PolkaDotPaper.pdf)\n        \n    *   [Overview of Polkadot and its Design Considerations](https://arxiv.org/abs/2005.13456.pdf)\n        *   [Chinese Translation](https://github.com/AmadeusGB/Overview-of-Polkadot)\n             (by community)\n\nSupport\n-------\n\n[](#support)\n\n*   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n     - White-glove solutions and dedicated support team for visionary teams using Substrate.\n*   [Stack Exchange](https://substrate.stackexchange.com/)\n     - The best place for all technical questions.\n*   [Web3 Foundation Grants](https://web3.foundation/grants)\n     - Funding for ecosystem development.\n*   [Polkadot Treasury](https://wiki.polkadot.network/docs/learn-treasury#creating-a-treasury-proposal)\n     - The Treasury funds are allocated through the voting on spending proposal.\n\nSocial\n------\n\n[](#social)\n\n*   [Substrate Developers Chat (Telegram)](https://t.me/substratedevs)\n     - Chat with other Substrate developers, also bridged to [matrix](https://matrix.to/#/#substratedevs:matrix.org)\n    .\n*   [Twitter](https://twitter.com/substrate_io)\n     - Follow us to stay up-to-date.\n*   [Polkaverse](https://polkaverse.com)\n     - A decentralized news-feed style social platform for the Polkadot community to discuss, share knowledge, post ecosystem updates and interact with posts. Built on top of [Subsocial](https://subsocial.network)\n    .\n\nEvents\n------\n\n[](#events)\n\n*   [Sub0 Developer Conference](https://sub0.parity.io/)\n     - Semiannual, online and in-person for all things Substrate.\n*   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n     - Bi-weekly collaborative learning sessions.\n\nBlogs\n-----\n\n[](#blogs)\n\n*   [DotLeap](https://dotleap.com/)\n     - Polkadot and Substrate Community blog and newsletter.\n*   [Official](https://www.parity.io/blog/tag/parity-substrate)\n     - Published by Parity.\n\nVideos\n------\n\n[](#videos)\n\n*   [Parity YouTube](https://www.youtube.com/c/paritytech)\n    *   [Substrate Seminar (YouTube Archive)](https://www.youtube.com/playlist?list=PLp0_ueXY_enXRfoaW7sTudeQH10yDvFOS)\n        \n    *   [Sub0 Conference Nov. 2022](https://youtube.com/playlist?list=PLOyWqupZ-WGvywLqJDsMIYdCn8QEa2ShQ)\n        \n    *   [Sub0 Conference Oct. 2020](https://www.youtube.com/playlist?list=PLp0_ueXY_enUZk1RuEAU9ly5h0wy5FuLs)\n        \n    *   [Sub0 Conference Dec. 2019](https://www.youtube.com/playlist?list=PLp0_ueXY_enWZ4UZE7rM0hdT8Z_ZTjU5V)\n        \n    *   [Sub0 Conference Apr. 2019](https://www.youtube.com/playlist?list=PLp0_ueXY_enWqrfP_vR4PLhzQj76fLT8y)\n        \n*   [Polkadot Network Technical Explainers](https://www.youtube.com/playlist?list=PLOyWqupZ-WGuAuS00rK-pebTMAOxW41W8)\n    \n*   [Substrate Seminar Twitch](https://www.twitch.tv/polkadotdev)\n     - Biweekly stream hosted by Polkadot Developers Twitch.\n    *   [Old Seminar Crowdcast](https://www.crowdcast.io/e/substrate-seminar-2/)\n         - Seminar archive.\n    *   [Older Seminar Crowdcast](https://www.crowdcast.io/e/substrate-seminar/)\n         - Older still Seminar archive.\n*   [Substrate: A Rustic Vision for Polkadot by Gavin Wood at Web3 Summit 2018](https://www.youtube.com/watch?v=0IoUZdDi5Is)\n    \n\nTemplates\n---------\n\n[](#templates)\n\n*   [Base](https://github.com/substrate-developer-hub/substrate-node-template)\n     - Minimal FRAME-based node, derived from [upstream](https://github.com/paritytech/substrate/tree/master/bin/node-template)\n    .\n*   [Frontier](https://github.com/paritytech/frontier/tree/master/template)\n     - Fronter enabled EVM and Ethereum RPC compatible Substrate node, ready for hacking.\n*   [Front-End](https://github.com/substrate-developer-hub/substrate-front-end-template)\n     - Polkadot-JS API and [React](https://reactjs.org/)\n     app to build front-ends for Substrate-based chains.\n*   [Parachain](https://github.com/substrate-developer-hub/substrate-parachain-template)\n     - Cumulus enabled Substrate node, derived from [upstream](https://github.com/paritytech/cumulus/tree/master/parachain-template)\n    .\n*   [`substrate-stencil`](https://github.com/kaichaosun/substrate-stencil)\n     - A template for a Substrate node that includes staking and governance capabilities.\n*   [polkadot-js-api-ts-template](https://github.com/kianenigma/polkadot-js-api-ts-template)\n     - A template project to kickstart hacking on top of `@polkadot/api`.\n*   [INK!athon](https://inkathon.xyz/)\n     - Full-stack dApp boilerplate with ink! smart contracts and a React frontend using the `useInkathon` (listed below) hooks library maintained by [Scio Labs](https://scio.xyz)\n    .\n*   [Subsocial Starter Kit](https://docs.subsocial.network/docs/develop/developer-quickstart)\n     - A starter-kit for building web3 social apps for the Polkadot ecosystem, powered by the [Subsocial blockchain](https://subsocial.network)\n    .\n\nFRAME Pallets\n-------------\n\n[](#frame-pallets)\n\n*   [Chainlink Feed Pallet](https://github.com/smartcontractkit/chainlink-polkadot)\n     - Chainlink feed token interface.\n*   [Official in Substrate](https://github.com/paritytech/substrate/tree/master/frame)\n     - Large collection, Parity maintained.\n*   [Open Runtime Module Library (ORML)](https://github.com/open-web3-stack/open-runtime-module-library)\n     - Community maintained collection of Substrate runtime modules.\n*   [Sunshine Bounty](https://github.com/sunshine-protocol/sunshine-bounty/tree/master/pallets)\n     - Distributed autonomous organization (DAO) for administering a bounty program.\n*   [Sunshine Identity](https://github.com/sunshine-protocol/sunshine-keybase/tree/master/identity/pallet)\n     - Keybase-inspired identity management.\n*   [Sunshine Faucet](https://github.com/sunshine-protocol/sunshine-keybase/tree/master/faucet/pallet)\n     - Dispense resources for a development chain.\n*   [RMRK Pallets](https://github.com/rmrk-team/rmrk-substrate)\n     - Nested, conditional & Multi-resourced NFTs.\n\nFramework Extensions\n--------------------\n\n[](#framework-extensions)\n\n*   [Bridges](https://github.com/paritytech/parity-bridges-common)\n     - A collection of tools for cross-chain communication.\n*   [Cumulus](https://github.com/paritytech/cumulus)\n     - A set of tools for writing Substrate-based Polkadot parachains.\n*   [FRAME](https://docs.substrate.io/v3/runtime/frame/)\n     - A system for building Substrate runtimes.\n*   [Frontier](https://github.com/paritytech/frontier)\n     - End-to-end Ethereum emulation for Substrate chains.\n*   [ink!](https://github.com/paritytech/ink)\n     - Rust smart contract language for Substrate chains.\n*   [IntegriTEE](https://book.integritee.network/)\n     - Trusted off-chain execution framework that uses [Intel SGX](https://en.wikipedia.org/wiki/Software_Guard_Extensions)\n     trusted execution environments.\n*   [Polkadot-JS](https://polkadot.js.org/)\n     - Rich JavaScript API framework for front-end development.\n\nClient Libraries\n----------------\n\n[](#client-libraries)\n\n*   [.Net API](https://github.com/usetech-llc/polkadot_api_dotnet)\n     - Maintained by [Usetech](https://usetech.com/blockchain/)\n    .\n*   [.NET Substrate API](https://github.com/ajuna-network/Ajuna.NetApi)\n     - Used in [nuget](https://www.nuget.org/packages/Ajuna.NetApi/)\n    , and [Unity Example](https://github.com/ajuna-network/SubstrateNET/tree/master/SubstrateNET.UnityDemo)\n    ; Maintained by [Ajuna Network](https://ajuna.io/)\n    .\n*   [.NET Toolchain/SDK](https://github.com/ajuna-network/Ajuna.SDK)\n     - Toolchain for Substrate .NET. Pre-generated [SubstrateNET](https://github.com/ajuna-network/SubstrateNET)\n    ; Maintained by Ajuna Network.\n*   [`go-substrate-gen`](https://github.com/Aphoh/go-substrate-gen)\n     - Generate Go (de)serialization/client code from Substrate metadata.\n*   [`sube`](https://github.com/virto-network/sube)\n     - Lightweight Rust client library and CLI with support for type information.\n*   [`subxt`](https://github.com/paritytech/substrate-subxt)\n     - Official Rust client.\n*   [C++ API](https://github.com/usetech-llc/polkadot_api_cpp)\n     - Maintained by Usetech.\n*   [Go RPC Client](https://github.com/centrifuge/go-substrate-rpc-client/)\n     - Maintained by [Centrifuge](https://centrifuge.io/)\n    .\n*   [Kotlin Client](https://github.com/NodleCode/substrate-client-kotlin)\n     - Maintained by [Nodle.io](https://github.com/NodleCode)\n    .\n*   [Polkadot-JS API](https://github.com/polkadot-js/api/)\n     - Semi-official JavaScript library for Substrate-based chains.\n*   [Python Interface](https://github.com/polkascan/py-substrate-interface)\n     - Maintained by [Polkascan Foundation](https://polkascan.org/)\n    .\n*   [Rust API Client](https://github.com/scs/substrate-api-client)\n     - Rust client maintained by [Supercomputers Systems AG](https://www.scs.ch/)\n    .\n*   [Subscan Go Utilities](https://github.com/itering/subscan-essentials)\n     - SS58 and more, developed by Subscan.\n*   [Sub-Api](https://github.com/kodadot/packages/tree/main/sub-api)\n     - Friendly wrapper for Polkadot.js API maintained by KodaDot.\n*   [`useInkathon`](https://github.com/scio-labs/use-inkathon)\n     - Typesafe React Hooks library abstracting functionality by polkadot.js for working with Substrate-based networks and ink! smart contracts maintained by Scio Labs.\n*   [Subsocial JS SDK](https://github.com/dappforce/subsocial-js)\n     - A JS SDK for developers to build web3 social apps on top of Subsocial.\n\nMobile\n------\n\n[](#mobile)\n\n*   [Fearless Utils Android](https://github.com/soramitsu/fearless-utils-Android)\n     - Android Substrate tools.\n*   [Fearless Utils iOS](https://github.com/soramitsu/fearless-utils-iOS)\n     - iOS Substrate tools.\n*   [Nova Substrate SDK Android](https://github.com/nova-wallet/substrate-sdk-android)\n     - Substrate SDK and tools for Android.\n*   [Nova Substrate SDK iOS](https://github.com/nova-wallet/substrate-sdk-ios)\n     - Substrate SDK and tools for iOS.\n*   [Polkadot-Dart](https://github.com/Pocket4D/Polkadot-Dart)\n     - Dart Substrate API.\n*   [PolkaWallet SDK](https://github.com/polkawallet-io/sdk)\n     - Flutter SDK for Substrate-based App.\n*   [React-Native-Substrate-Sign](https://github.com/paritytech/react-native-substrate-sign)\n     - Rust library for React Native.\n\nTools\n-----\n\n[](#tools)\n\n*   [`offline-election`](https://github.com/paritytech/substrate-debug-kit/tree/master/offline-election)\n     - Tool to predict nominated proof-of-stake elections.\n*   [`offchain::ipfs`](https://rs-ipfs.github.io/offchain-ipfs-manual/)\n     - Substrate infused with [IPFS](https://ipfs.io/)\n    .\n*   [`polkadot-js-bundle`](https://github.com/shawntabrizi/polkadot-js-bundle)\n     - A standalone JS bundle that contains Polkadot{JS} libraries.\n*   [`polkadot-launch`](https://github.com/shawntabrizi/polkadot-launch)\n     - Simple CLI tool to launch a local Polkadot test network.\n*   [`polkadot-runtime-prom-exporter`](https://github.com/paritytech/polkadot-runtime-prom-exporter/)\n     - A [Prometheus](https://prometheus.io/)\n     exporter for Polkadot runtime metrics (modifiable for Substrate use).\n*   [`polkadot-scripts`](https://github.com/paritytech/polkadot-scripts)\n     - A collection of scripts Parity uses to diagnose Polkadot/Kusama.\n*   [`polkadot-starship`](https://github.com/koute/polkadot-starship)\n     - Another tool to launch a local Polkadot test network, with emphasis on the ability to run big testnets.\n*   [`srtool-actions`](https://github.com/chevdor/srtool-actions)\n     - GitHub actions to easily use the `srtool` Docker image to build your own runtime.\n*   [`srtool-cli`](https://github.com/chevdor/srtool-cli)\n     - CLI frontend for the `srtool` Docker image.\n*   [`srtool`](https://github.com/paritytech/srtool)\n     - Docker image to deterministically build a runtime.\n*   [`subsee`](https://github.com/ascjones/subsee)\n     - CLI to inspect metadata of a Substrate node as JSON.\n*   [`subalfred`](https://github.com/hack-ink/subalfred)\n     - An all-in-one Substrate development toolbox.\n*   [`substrate-balance-calculator`](https://github.com/shawntabrizi/substrate-balance-calculator)\n     - Breakdown the balances of your Substrate account.\n*   [`substrate-balance-graph`](https://github.com/shawntabrizi/substrate-balance-graph)\n     - Create a graph of the token balance over time of a Substrate address.\n*   [`substrate-graph-benchmarks`](https://github.com/shawntabrizi/substrate-graph-benchmarks)\n     - Graph the benchmark output of FRAME pallets.\n*   [`substrate-js-utils`](https://github.com/shawntabrizi/substrate-js-utilities)\n     - A set of useful JavaScript utilities for Substrate that uses the Polkadot{JS} API; Also [deployed as a website](https://www.shawntabrizi.com/substrate-js-utilities/)\n    .\n*   [`substrate-society`](https://github.com/shawntabrizi/substrate-society)\n     - A basic front-end for the FRAME Society pallet.\n*   [`substrate-toml-lint`](https://github.com/shawntabrizi/substrate-toml-lint)\n     - A toml parser and checker to avoid common errors in Substrate projects.\n*   [`subwasm`](https://github.com/chevdor/subwasm)\n     - CLI to inspect a runtime WASM blob offline. It shows information, metadata and can compare runtimes. It can also help you fetch a runtime directly from a node.\n*   [`sup`](https://github.com/clearloop/sup)\n     - Command line tool for generating or upgrading a Substrate node.\n*   [`scale-value`](https://github.com/paritytech/scale-value)\n     - Analogous to `serde_json` but for SCALE; Library to decode arbitrary SCALE encoded bytes into a dynamic `Value` given type info from `scale-info`.\n*   [`scale-decode`](https://github.com/paritytech/scale-decode)\n     - Decode SCALE bytes into arbitrary custom types by implementing a visitor trait.\n*   [Aleph.im](https://aleph.im)\n     - Scalable, decentralized database, file storage, and computation services for Substrate chains and more.\n*   [Archive](https://github.com/paritytech/substrate-archive)\n     - Indexing engine for Substrate chains.\n*   [Dev Hub Utils](https://github.com/danforbes/substrate-devhub-utils)\n     - _Unofficial_ utilities for working with official Substrate Developer Hub resources.\n*   [Europa](https://github.com/patractlabs/europa)\n     - A sandbox for the Substrate runtime execution environment.\n*   [Fork Off Substrate](https://github.com/maxsam4/fork-off-substrate)\n     - Script to help bootstrap a new chain with the state of a running chain.\n*   [fudge](https://github.com/centrifuge/fudge)\n     - Core lib for accessing and (arbitrarily) manipulating substrate databases, including the building and importing of local blocks.\n*   [Gantree Library](https://github.com/gantree-io/gantree-lib-nodejs)\n     - A suite of technologies for managing Substrate-powered parachain networks via rapid spin-up & tear-down.\n*   [Halva](https://github.com/halva-suite/halva)\n     - A toolchain for improving the experience of developing on Substrate.\n*   [Hydra](https://github.com/Joystream/hydra)\n     - A GraphQL framework for Substrate nodes.\n*   [Jupiter](https://github.com/patractlabs/jupiter)\n     - Testnet for smart contracts written for the FRAME Contracts pallet and ink!.\n*   [Megaclite](https://github.com/patractlabs/megaclite)\n     - Zero-knowledge tools for the Polkadot ecosystem.\n*   [Metadata Portal](https://nova-wallet.github.io/metadata-portal/)\n     - A self-hosted webpage that shows the latest metadata and chain specs for any given network.\n*   [Minimark](https://github.com/kodadot/packages)\n     - Implementation of RMRK NFT v1/v2 protocol maintained by KodaDot.\n*   [Nova Polkadot Utils](https://github.com/nova-wallet/nova-utils)\n     - Contains static info & metadata to support client apps in Polkadot ecosystem to map it to various netowrks.\n*   [Polkadot Vault](https://signer.parity.io/)\n     (formerly Parity Signer) - Upcycle an unused mobile phone into an air-gapped hardware wallet.\n*   [Polkadot PANIC](https://github.com/SimplyVC/panic_polkadot)\n     - Monitoring and alerting solution for Polkadot nodes by Simply VC, compatible with many Substrate chains.\n*   [Polkadot Tool Index](https://wiki.polkadot.network/docs/build-tools-index)\n     - List of tools available for your development with Polkadot and any Substrate chain including Block Explorers, Wallets, Network Monitoring & Reporting, Clients, Benchmarking, Fuzzing, Forking, SCALE Codec, CLI Tools and much more.\n*   [Polkadot-JS Apps UI](https://polkadot.js.org/apps/)\n     - Semi-official block explorer & front-end for Substrate-based chains.\n*   [Polkadot-JS Extension](https://github.com/polkadot-js/extension)\n     - Browser extension for interacting with Substrate-based chains.\n*   [Polkascan](https://polkascan.io/)\n     - Multi-chain block explorer maintained by Polkascan Foundation.\n*   [Proxy Hot Wallet Demo](https://github.com/emostov/proxy-hot-wallet)\n     - A demonstration of a secure, convenient, and flexible hot wallet architecture built on Substrate primitives.\n*   [Redspot](https://github.com/patractlabs/redspot)\n     - A [Truffle](https://www.trufflesuite.com/truffle)\n    \\-like toolkit for smart contracts for the FRAME Contracts pallet and ink!.\n*   [Sidecar](https://github.com/paritytech/substrate-api-sidecar)\n     - REST service that runs alongside Substrate nodes.\n*   [SS58 Transform](https://polkadot.subscan.io/tools/ss58_transform)\n     - Display key's addressees with all SS58 prefixes.\n*   [Staking Rewards Collector](https://github.com/w3f/staking-rewards-collector)\n     - A script to parse and output staking rewards for a given Kusama or Polkadot address and cross-reference them with daily price data.\n*   [Subkey](https://docs.substrate.io/reference/command-line-tools/subkey/)\n     - Command line utility for working with cryptographic keys.\n*   [SubQuery](https://subquery.network)\n     - A GraphQL indexer and query service that allows users to easily create indexed data sources and host them online for free.\n    *   [Nova SubQuery API](https://github.com/nova-wallet/subquery-nova)\n         - A SubQuery API implementation for operation history and staking analytics.\n*   [Subscan](https://www.subscan.io/)\n     - Multi-network explorer for Substrate-based chains.\n*   [Subsquid](https://subsquid.io)\n     - An indexing framework (SDK + infrastructure) to quickly and easily turn Substrate and EVM on-chain data into APIs and host them.\n*   [Substate](https://github.com/arrudagates/substate)\n     - 100% no-std/wasm compatible Substrate storage key generator library for Rust.\n*   [Substrate debug-kit](https://github.com/paritytech/substrate-debug-kit)\n     - A collection of tools and libraries for debugging Substrate-based chains.\n*   [Substrate Docker Builders](https://github.com/ETeissonniere/substrate-nodeops)\n     - A set of Dockerfiles and GitHub Actions to auto-build and push a Docker image for Substrate-based chains.\n*   [Substrate Faucet Bot](https://github.com/starkleytech/substrate-faucet)\n     - Python-based faucet for development purposes.\n*   [Substrate Graph](https://github.com/playzero/substrate-graph)\n     - GraphQL indexer for Substrate-based chains.\n*   [Typechain-Polkadot](https://github.com/Supercolony-net/typechain-polkadot)\n     - Hepls users to generate typescript types from contract ABIs (ink!) and generate runtime code to interact with contracts and deploy them.\n*   [TxWrapper](https://github.com/paritytech/txwrapper)\n     - Helpful library for offline transaction creation.\n*   [VSCode Substrate](https://marketplace.visualstudio.com/items?itemName=paritytech.vscode-substrate)\n     - Plugin for Visual Studio Code.\n*   [Polkaholic.io](https://polkaholic.io)\n     - Multi-chain block explorer with API and DeFi support across 40+ parachains.\n*   [SubID](https://github.com/dappforce/subid)\n     - An advanced cross-chain portfolio management tool for the Polkadot ecosystem, allowing any user to see their balances across chains; view their crowdloan history; view their NFTs across Polkadot ecosystem chains; claim their vested tokens and perform cross-chain transfers.\n*   [Subsocial SDK Playground](https://play.subsocial.network)\n     - Subsocial JS SDK Playground allows you to fetch spaces, send transactions on blockchain and test the SDK code snippets on the go without the need to download or setup anything locally.\n*   [Uptest Runtime upgrade tool](https://github.com/uptest-sc/uptest)\n     - Uptest command line client and libuptest Rust library are two tools used for debugging storage changes and runtime upgrades.\n\nProducts and Services\n---------------------\n\n[](#products-and-services)\n\n*   [OnFinality](https://onfinality.io)\n     - Free and paid services to shared Substrate based nodes.\n*   [PrivHost](https://privhost.laissez-faire.trade/)\n     - Public Tor .onion supported nodes for Polkadot, Kusama and Edgeware.\n*   [Substrate Devops Guide](https://paritytech.github.io/devops-guide/)\n     - Parity devops team's configuration and guidance on deploying, monitoring, and maintaining node infrastructure.\n\nAlternative Implementations\n---------------------------\n\n[](#alternative-implementations)\n\n*   [Gossamer](https://github.com/ChainSafe/gossamer)\n     - A Polkadot client implemented in Go; from [ChainSafe](https://chainsafe.io/)\n    .\n*   [Kagome](https://kagome.readthedocs.io/en/latest/)\n     - A C++17 implementation of the Polkadot client; from [Soramitsu](http://www.soramitsu.co.jp/)\n    .\n*   [LimeChain AssemblyScript Runtime](https://github.com/LimeChain/as-substrate-runtime)\n     - An account-based Substrate proof-of-concept runtime written in AssemblyScript; from [LimeChain](https://limechain.tech/)\n    .\n\nSCALE Codec\n-----------\n\n[](#scale-codec)\n\n*   [AssemblyScript](https://github.com/LimeChain/as-scale-codec)\n     - Maintained by LimeChain.\n*   [C](https://github.com/MatthewDarnell/cScale)\n     - Maintained by Matthew Darnell.\n*   [C++](https://github.com/soramitsu/scale-codec-cpp)\n     - Maintained by Soramitsu.\n*   [Codec Definition](https://docs.substrate.io/v3/advanced/scale-codec/)\n     - Official codec documentation.\n*   [Go](https://github.com/itering/scale.go)\n     - Maintained by [Itering](https://www.itering.com/)\n    .\n*   [Haskell](https://github.com/airalab/hs-web3/tree/master/src/Codec)\n     - Maintained by [Robonomics Network](https://robonomics.network/)\n    .\n*   [Java](https://github.com/emeraldpay/polkaj/tree/master/polkaj-scale)\n     - Maintained by [Emerald](https://emerald.cash/)\n    .\n*   [Parity SCALE Codec](https://github.com/paritytech/parity-scale-codec)\n     - Reference implementation written in Rust.\n*   [Python](https://github.com/polkascan/py-scale-codec)\n     - Maintained by Polkascan Foundation.\n*   [Ruby](https://github.com/itering/scale.rb)\n     - Maintained by Itering.\n*   [Scales](https://github.com/virto-network/scales)\n     - Serializing SCALE using type information from a type registry.\n*   JavaScript / TypeScript implementations:\n    *   [polkadot-js/api](https://github.com/polkadot-js/api/tree/master/packages/types)\n         - Maintained by Polkadot-JS.\n    *   [scale-ts](https://github.com/unstoppablejs/unstoppablejs/tree/main/packages/scale-ts#scale-ts)\n         - Maintained by Josep M Sobrepere.\n    *   [soramitsu/scale-codec-js-library](https://github.com/soramitsu/scale-codec-js-library)\n         - Maintained by Soramitsu.\n\nFooter\n------\n\n[](https://github.com \"GitHub\")\n\u00a9 2024 GitHub,\u00a0Inc.\n\n### Footer navigation\n\n*   [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)\n    \n*   [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)\n    \n*   [Security](https://github.com/security)\n    \n*   [Status](https://www.githubstatus.com/)\n    \n*   [Docs](https://docs.github.com/)\n    \n*   [Contact](https://support.github.com?tags=dotcom-footer)\n    \n*   Manage cookies\n*   Do not share my personal information\n\nYou can\u2019t perform that action at this time."}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/community/template-how-to-guide/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    *   [Content style guide](/community/content-style-guide/)\n        \n    *   [Contributor guidelines](/community/contributor-guidelines/)\n        \n    *   [Template - How-to guide](/community/template-how-to-guide/)\n        \n\n[Home](/)\n[Community](/community/)\nTemplate how to guide\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/community/template-how-to-guide.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTemplate - How-to guide\n=======================\n\nWe recommend you use the following template to structure articles that you want to submit as to \u201chow-to\u201d topics. You can download a copy of the Markdown how-to-template directly from [here](/assets/contribute-templates/how-to-template.md/)\n. After downloading the template, rename the file and replace the description of each section with the relevant content.\n\n[](/community/template-how-to-guide/#front-matter)\nFront matter\n---------------------------------------------------------------\n\nYour _How-to_ guide should start with a front matter section delineated by typing three dashes on the first line. The front matter consists of the following fields:\n\n`---`\n\ntitle: Keep titles short\n\ndescription: Write a descriptive sentence to summarize the content of the article.\n\nkeywords:\n\n`---`\n\nOnly the title field is required and you can specify additional metadata fields. You close the front matter section by typing three dashes on the line following the last front matter entry.\n\n### [](/community/template-how-to-guide/#guide-title)\n\\[Guide title\\]\n\nThe guide title should summarize the goal of the article. For \u201chow-to\u201d guides, the title should complete the \u201cHow do I \u2026?\u201d sentence. For example, if the goal of the guide is to illustrate \"How do I mint a token supply?,\" you can set the title in the front matter like this:\n\n`title: Mint a token supply`\n\nIn general, you should keep titles short so they are easy to scan for keywords.\n\n### [](/community/template-how-to-guide/#guide-description)\n\\[Guide description\\]\n\nThe guide description is optional, but if you include it, use a single sentence to convey any additional information about the content that the title doesn't convey. For example:\n\n`description: Illustrates how you can mint a token supply owned by a single account.`\n\n### [](/community/template-how-to-guide/#guide-keywords)\n\\[Guide keywords\\]\n\nKeyword are optional, but if you include them, indent two spaces, then use a dash and a single keyword per line. For an example, see the [how-to template](/assets/contribute-templates/how-to-template.md/)\n.\n\n[](/community/template-how-to-guide/#introductory-paragraph)\nIntroductory paragraph\n-----------------------------------------------------------------------------------\n\nThe first paragraph of the article should provide a brief overview of what the article is about and why this information is useful to its audience. The overview section does not require an **Overview** heading and it might be more than one paragraph.\n\nThe opening section of each article sets the stage for what follows and should answer the obvious questions so readers can decide whether the content is relevant to them. Readers should know\u2014just from reading this section\u2014whether they should continue or the content doesn\u2019t apply to them and they should move on to something else.\n\nFor your overview, try to answer the following questions:\n\n*   What is this article about?\n*   What is the purpose or goal to be accomplished by following the procedure or technique?\n*   Why would someone want to use this procedure or technique? For example, are there specific use case scenarios that are applicable?\n*   When would someone use this procedure? For example, is this an activity that is done once or repeated? Is it a pattern or a unique case?\n*   Where is the procedure or technique applicable?\n*   Who would use this procedure or technique? For example, are special skills required? Do specific permissions or restrictions apply?\n\nThe overview section is also a good place to link to other resources, including other guides. As the content creator, you want readers to have confidence that the guide will be useful for them.\n\n### [](/community/template-how-to-guide/#use-cases)\nUse cases\n\nThis section is optional because the guide title might be sufficient if your article is tightly focused on a single use case.\n\nIf your article has more than one practical application, use this section to briefly describe each of them.\n\nIf the only use case is a repetition of the article title or sufficiently covered in the overview section, skip this section.\n\nIf your article only has one use case but it requires more explanation than the title provides, add this section and one or more sentences to provide the additional explanation. For example:\n\n*   This guide illustrates implementing a second currency for paying fees. If you want to support multiple currencies in your runtime, this guide provides practical advice and detailed steps that you can apply for the additional currencies you want to support.\n*   This guide shows you how to perform a runtime migration from a `Vec<u32>` to SomeStruct\n\nIf your article has more than one use case, use a bulleted list.\n\n[](/community/template-how-to-guide/#before-you-begin)\nBefore you begin\n-----------------------------------------------------------------------\n\nThis section is optional but **recommended**. Use the Before you begin heading and use the section body to describe any prerequisites that apply to your article.\n\nThis section should answer the following questions:\n\n*   What should someone **have** before reading this article?\n*   What should someone **know** before reading this article?\n*   What should someone **do** before reading this article?\n\n[](/community/template-how-to-guide/#procedural-steps)\nProcedural steps\n-----------------------------------------------------------------------\n\nUse **Steps** as a heading only if the article has one set of steps that achieve a single goal. For example, use Steps if an article is tightly focused on a single use case and a more descriptive heading would simply repeat the article title.\n\nFor more complex procedures and techniques, use clear, concise headings to describe each part of the procedure or technique.\n\nEach step should be action driven. In most cases, each step starts with a verb and ends with a period. The paragraph following a step should describe the result or outcome the reader should expect. If you feel a step needs any additional information, link to that information rather than embedding too much extraneous detail within the step.\n\nCode snippets can help illustrate the steps but should not overwhelm the focus on \"how do I do this\" (not on \"what do I do\").\n\nKeep in mind that most steps have results and readers like confirmation that they have taken the correct action as they progress through a procedure.\n\n[](/community/template-how-to-guide/#examples)\nExamples\n-------------------------------------------------------\n\nThis section is optional but **recommended**. You can use this section to provide links to one or more code-based examples that make practical use of your article. This section should include at least one reference to a repository that exposes what this guide covers in the form of a working example. You can use reference an existing codebase within Substrate or new code in any publicly-available repository. For example, if you have a repository where you have tested the procedure you are writing about, include a link to it in this section.\n\n[](/community/template-how-to-guide/#related-resources)\nRelated resources\n-------------------------------------------------------------------------\n\nThis section is optional. If you include it, add a bulleted list of links to similar guides, other Developer Hub resources, or related material. For example, you might add links to other how-to guides, tutorials, or Rust docs.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/community/contributor-guidelines/)\n\nON THIS PAGE\n\n[Front matter](#front-matter)\n[Introductory paragraph](#introductory-paragraph)\n[Before you begin](#before-you-begin)\n[Procedural steps](#procedural-steps)\n[Examples](#examples)\n[Related resources](#related-resources)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/deploy/deploy-on-a-test-network/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Deploy](/deploy/)\nDeploy on a test network\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/deploy/deploy-on-a-test-network.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDeploy on a test network\n========================\n\nIdentify or build your own test network?\n\nHow much testing is enough?\n\n**Last edit:** August 18, 2022\n\n[Next \u2192](/quick-start/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/deploy/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nDeploy\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/deploy/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDeploy\n======\n\nMoving a project from a test network into production requires a clear view of your infrastructure and network operations. The topics in this section are intended to provide some guidance on how to deploy a parachain and how to prepare for network maintenance after you deploy. Before diving into specific deployments options and operations, however, there are a few important considerations that should act as the foundation for your deployment process. At a high level, you should apply the following general principles throughout all phases of your network deployment:\n\n*   Infrastructure operations should be code-driven and kept under version control.\n*   Security should be a central concern in all of your infrastructure decisions.\n*   Securing on-chain operations is critical to a successful deployment.\n\n[](/deploy/#build-a-code-driven-infrastructure)\nBuild a code-driven infrastructure\n----------------------------------------------------------------------------------\n\nAs a general rule, you should take an infrastructure-as-code approach to your deployment planning and preparation. All of the infrastructure components used to deploy the network should be written in code and managed through a version control system.\n\nFollowing an infrastructure-as-code process helps to ensure that:\n\n*   Your infrastructure components are always in a known state.\n*   You can track changes, enforce reviews, and audit activity through version control.\n*   You can easily roll back to a known state, if needed.\n*   You can automate operations and won't need to perform manual tasks to redeploy.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='580' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Infrastructure as code](https://docs.substrate.io/static/a931d28390a2b466c8991c9c2814fd89/c6414/deploy-infra.png)\n\n[](/deploy/#build-security-into-the-infrastructure)\nBuild security into the infrastructure\n------------------------------------------------------------------------------------------\n\nSecurity is one of the most important properties of a blockchain, so making your infrastructure **secure by default** should be a top priority when you plan to deploy a new network.\n\nHaving strict access control rules and blocking any non-required communication is a good starting point, but you should also consider how you can enhance security through the following:\n\n*   Log monitoring\n*   Bastion hosts for access\n*   Two-factor authentication for secure shell (ssh) access\n\n[](/deploy/#build-security-into-chain-operations)\nBuild security into chain operations\n--------------------------------------------------------------------------------------\n\nIn addition to the infrastructure that your network relies on, it's important to keep on-chain operations as secure as possible. For example, by setting up your chain to use cold, warm, and hot keys, you can limit the damage that the compromise of a session key could do. The following diagram illustrates using keys for different operations to help prevent funds from being stolen.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='337.7049180327869' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Keeping session keys separate from account keys](https://docs.substrate.io/static/b3011ae9567fbe77a9b81916360a84f6/056bd/deploy-cold-warm-hot-keys.png)\n\nYou can also use multi-signature accounts on offline devices to improve security and to provide an on-chain audit trail of all actions. The record of on-chain activity could then be used to send alert notification for specific on-chain actions.\n\nProxy accounts also let you limit the permission that an account or multi-signature account has on a particular target account. For example, you might use a proxy account to specify that a multi-signature staking controller account can only execute staking transactions and the transaction can only be executed if three of the five people that make up the multi-signature account approve.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/test/check-runtime/)\n[Next \u2192](/deploy/prepare-to-deploy/)\n\nON THIS PAGE\n\n[Build a code-driven infrastructure](#build-a-code-driven-infrastructure)\n[Build security into the infrastructure](#build-security-into-the-infrastructure)\n[Build security into chain operations](#build-security-into-chain-operations)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/deploy/deployment-options/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Deploy](/deploy/)\nDeployment options\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/deploy/deployment-options.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDeployment options and tools\n============================\n\nAs you saw in [Common deployment targets](/deploy/prepare-to-deploy/#common-deployment-targets)\n, there are several common deployment scenarios. How you go about managing the nodes for the services you provide depends a great deal on whether you are deploying on physical hardware, using a cloud provider, or configuring a Kubernetes cluster. This section describes some of the most common options and tools for deploying and managing nodes in different environments.\n\n[](/deploy/deployment-options/#linux-servers)\nLinux servers\n-----------------------------------------------------------\n\nIf you are deploying on physical or virtual machines that use a distribution of the Linux operating system, you typically use `systemd` to manage most services. You can use `systemd` to ensure processes are enabled and running, set policies for restarting services, specify the user account for hosts to run under, and configure system parameters to limit memory usage and other properties.\n\nThe following example illustrates configuring the `systemd` file for a node running a local development chain using the account associated with Alice and the local user name `polkadot`:\n\n    [Unit]\n    Description=Polkadot Validator\n    \n    [Service]\n    User=polkadot\n    ExecStart=/home/polkadot/polkadot  --dev --alice\n    Restart=always\n    RestartSec=90\n    \n    [Install]\n    WantedBy=multi-user.target\n\nFor demonstration purposes, this file is named `polkadot.service` and placed in the `/etc/systemd/system` directory. You can then enable the service by running the following command:\n\n    systemctl enable polkadot\n\nTo start the service after it's enabled, you can run the following command:\n\n    systemctl start polkadot\n\n### [](/deploy/deployment-options/#using-environment-variables)\nUsing environment variables\n\nIf you want to remove some settings from the `systemd` configuration\u2014for example, the `--dev` and `--alice` command-line options\u2014you can configure those settings in an **environment variable** file. With environment variable files, you can configure the appropriate settings for each server\u2014in its own server-specific file\u2014but still manage the service using `systemd` commands. In this example, you would create a new environment variable file for the local host in `/etc/default/polkadot` that looks like this:\n\n    START_OPTIONS=\"--dev --alice\"\n\nYou would then modify the `systemd` service to look like this:\n\n    [Unit]\n    Description=Polkadot Validator\n    \n    [Service]\n    User=polkadot\n    EnvironmentFile=/etc/default/polkadot\n    ExecStart=/home/polkadot/polkadot  $START_OPTIONS\n    Restart=always\n    RestartSec=90\n    \n    [Install]\n    WantedBy=multi-user.target\n\nYou can use this technique with multiple variables to abstract the configuration details away from the `systemd` file that runs on your node hosts.\n\n### [](/deploy/deployment-options/#local-logging)\nLocal logging\n\nBy default, the `systemd` service writes output to the local `syslog` file, typically `/var/log/syslog` or `/var/log/messages`. You can also view this output using the `journalctl` command. For example, to see the most recent output of the `polkadot` process, you can run the following command:\n\n    journalctl -u polkadot -f\n\nTo remove logs older than two days ago, you can run a command similar to the following:\n\n    journalctl -u polkadot --vacuum-time=2d\n\nTo retain only the past 1G of data, run:\n\n    journalctl --vacuum-size=1G\n\n### [](/deploy/deployment-options/#remote-logging)\nRemote logging\n\nIf your deployment includes many hosts, you can use Loki or Elasticsearch to aggregate the data from multiple sources.\n\n#### Loki\n\nTo log to a remote `loki` instance:\n\n1.  Install the `promtail` server package on each server.\n2.  Create the configuration file that specifies the server and client information to enable each server to send logs to a remote host.\n    \n    For example:\n    \n        # promtail server config\n        server:\n         http_listen_port: 9080\n         grpc_listen_port: 0\n         log_level: info\n        positions:\n         filename: /var/lib/promtail/positions.yaml\n        \n        # loki servers\n        clients:\n         - url: http://myloki.mycompany.com/loki/api/v1/push\n           backoff_config:\n             min_period: 1m\n             max_period: 1h\n             max_retries: 10000\n        scrape_configs:\n         - job_name: journald\n           journal:\n             max_age: 1m\n             path: /var/log/journal\n             labels:\n               job: journald\n           pipeline_stages:\n             - match:\n               selector: '{job=\"journald\"}'\n               stages:\n                 - multiline:\n                     firstline: '^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3}'\n                     max_lines: 2500\n                 - regex:\n                     expression: '(?P<date>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s+(?P<level>(TRACE|DEBUG|INFO|WARN|ERROR))\\s+(?P<worker>([^\\s]+))\\s+(?P<target>[\\w-]+):?:?(?P<subtarget>[\\w-]+)?:[\\s]?(?P<chaintype>\\[[\\w-]+\\]+)?[\\s]?(?P<message>.+)'\n                 - labels:\n                     level:\n                     target:\n                     subtarget:\n    \n\n#### Elasticsearch\n\nTo log to a remote Elasticsearch cluster:\n\n1.  Install the `logstash` package.\n2.  Create the configuration file that specifies the server and client information to enable each server to send logs to a remote host. An example configuration would look like this:\n    \n        nput {\n         journald {\n           path      => \"/var/log/journal\"\n           seekto => \"tail\"\n           thisboot => true\n           filter    => {\n               \"_SYSTEMD_UNIT\" => \"polkadot.service\"\n           }\n           type => \"systemd\"\n         }\n        }\n        \n        filter {\n         date {\n           match => [\"timestamp\", \"YYYY-mm-dd HH:MM:ss.SSS\"]\n           target => \"@timestamp\"\n         }\n         mutate {\n           rename => [ \"MESSAGE\", \"message\" ]\n           remove_field => [ \"cursor\", \"PRIORITY\", \"SYSLOG_FACILITY\", \"SYSLOG_IDENTIFIER\", \"_BOOT_ID\", \"_CAP_EFFECTIVE\", \"_CMDLINE\", \"_COMM\", \"_EXE\", \"_GID\", \"_HOSTNAME\", \"_MACHINE_ID\", \"_PID\", \"_SELINUX_CONTEXT\", \"_STREAM_ID\", \"_SYSTEMD_CGROUP\", \"_SYSTEMD_INVOCATION_ID\", \"_SYSTEMD_SLICE\", \"_SYSTEMD_UNIT\", \"_TRANSPORT\", \"_UID\" ]\n         }\n         if ([message] =~ \".*TRACE .*\") { drop{ } }\n         grok {\n            match => { \"message\" => \"%{NOTSPACE:thread} %{LOGLEVEL:log-level} %{NOTSPACE:namespace} %{GREEDYDATA:message}\" }\n         }\n        }\n        \n        output {\n          elasticsearch {\n            hosts => [\"https://myelasticsearch.mycompany.com:9243\"]\n            user => \"username\"\n            password => \"password\"\n            index => \"logstash-polkadot-%{+YYYY.MM.dd}\"\n          }\n        }\n    \n\n### [](/deploy/deployment-options/#logging-command-line-options)\nLogging command-line options\n\nWhen you start a node, you can use command-line options to specify the log level and target components you want to log activity for. All target components are set to the `info` logging level by default. You can adjust log levels for individual components using the `--log` or `-l` command-line option. For example, to change the logging level for the afg and sync components:\n\n    --log afg=trace,sync=debug\n\nTo change the logging level to `debug` for all components:\n\n    -ldebug.\n\nThe valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`.\n\nThe valid targets for logging are:\n\n    afg\n    aura\n    babe\n    beefy\n    db\n    gossip\n    header\n    peerset\n    pow\n    rpc\n    runtime\n    runtime::contracts\n    sc_offchain\n    slots\n    state-db\n    state_tracing\n    sub-libp2p\n    sync\n    telemetry\n    tracing\n    trie\n    txpool\n\n[](/deploy/deployment-options/#cloud-provisioning)\nCloud provisioning\n---------------------------------------------------------------------\n\nThere are multiple options for provisioning nodes on cloud providers. Some of the tools for deploying using cloud resources are provider-specific and some tools are provider-agnostic.\n\nThe following provider-specific tools are the most commonly-used for deploying on AWS, Microsoft Azure, or Google Cloud:\n\n*   [Amazon Cloud Formation](https://aws.amazon.com/cloudformation/)\n    \n*   [Azure Resource Manager](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/overview)\n    \n*   [Google Cloud Deployment Manager](https://cloud.google.com/deployment-manager/docs)\n    \n\nThese provider-specific deployment tools are easy to use and provide important resources, including sample code, documentation, and support. However, if you use more than one multiple provider\u2014each with its own scripting format and configuration requirements\u2014making even basic changes to your infrastructure can require changes to multiple sections of code for each provider to do the same thing.\n\nAs an alternative to provider-specific tooling, [Terraform](https://www.terraform.io/)\n offers a more general solution to infrastructure provisioning. With Terraform, you can specify a change once and apply the change across multiple providers.\n\n### [](/deploy/deployment-options/#terraform)\nTerraform\n\nTerraform uses the [HashiCorp Configuration Language (HCL)](https://developer.hashicorp.com/terraform/language)\n to support more than 2000 different cloud resource [providers](https://registry.terraform.io/browse/providers)\n, including the main three providers AWS, Azure, and GCP.\n\nThe configuration language enables you to abstract configuration details and use the same code for development, test, and production environments regardless of the provider you use and manage all changes to your infrastructure through source code version control. Terraform also enables you to incorporate independent resources into your infrastructure using a common language. For example, you can deploy RPC nodes along with a frontend load balancer using a single configuration file.\n\nAfter you prepare a host for deployment, you can use Terraform to preconfigure the host with required software from an image or run a script that preconfigures the base image.\n\nYou can find examples of using Terraform with multiple providers in [polkadot-validator-setup](https://github.com/w3f/polkadot-validator-setup)\n.\n\n### [](/deploy/deployment-options/#ansible)\nAnsible\n\nAfter base hosts are deployed, they must be configured with the required software components, configuration files, and system settings. In addition to Terraform or cloud provider tooling, Ansible provides another flexible way you can automate infrastructure deployment.\n\nAnsible uses **playbooks** to orchestrate, configure, administer, and deploy system components. Using a combination of playbooks and **roles**, you can implement a specific configuration or behavior for a group of nodes.\n\nWhen deploying blockchain nodes, Ansible enables you to define an **inventory** that describes the hosts and how to group the hosts according to their role\u2014for example, in groups that identify hosts as validator, collator, or rpc nodes. You can then call a playbook to link the hosts and groups in the inventory with roles to execute on each host.\n\nYou can find examples of using ansible in [ansible-galaxy](https://github.com/paritytech/ansible-galaxy)\n and the [node role](https://github.com/paritytech/ansible-galaxy/tree/main/roles/node)\n.\n\n[](/deploy/deployment-options/#kubernetes)\nKubernetes\n-----------------------------------------------------\n\nYou should only deploy on a Kubernetes cluster if you have previous experience managing Kubernetes configurations. The main tools for managing Substrate-based nodes in Kubernetes are **helm charts** that you can use to deploy nodes and the **Testnet Manager** that you can use to deploy and maintain test networks in a Kubernetes cluster. Note that you must have access to a Kubernetes cluster, a local copy of `kubectl`, and Helm installed before you can use these tools.\n\n### [](/deploy/deployment-options/#helm-charts)\nHelm charts\n\n[Parity Helm Charts](https://github.com/paritytech/helm-charts)\n is a collection of helm charts that define, install, manage, and upgrade Substrate and Polkadot components. Within the collection, the [node](https://github.com/paritytech/helm-charts/tree/main/charts/node)\n chart is used to deploy substrate or polkadot node binary. All of the parameters for the chart are documented in the [node chart README.md](https://github.com/paritytech/helm-charts/tree/main/charts/node)\n.\n\nThe most important parameters to be aware of are:\n\n| Option | Description |\n| --- | --- |\n| node.chain | Network to connect to. |\n| node.command | Binary to use. |\n| node.flags | Command-line options to use with the binary in the container. |\n| node.customChainspecUrl | Custom chain specification URL. |\n\nThere\u2019s also an example `values.yml` configuration file that you can start working from.\n\nThe following example illustrates how to deploy a `rococo-local` test network chain in Kubernetes with two validators and two full nodes.\n\nTo deploy the `rococo-local` chain using the helm chart:\n\n1.  Verify you have access to a Kubernetes cluster and the Helm client installed.\n2.  Add the Parity chart repository to Helm by running the following command:\n    \n        helm repo add parity https://paritytech.github.io/helm-charts/\n    \n3.  Install the node chart by running the following command:\n    \n        helm install polkadot-node parity/node\n    \n4.  Deploy the validator node using the Alice account and a custom node key by running the following command:\n    \n        helm install rococo-alice parity/node --set node.role=\"validator\" \\\n          --set node.customNodeKey=\"91cb59d86820419075b08e3043cd802ba3506388d8b161d2d4acd203af5194c1\" \\\n          --set node.chain=rococo-local \\\n          --set node.perNodeServices.relayP2pService.enabled=true \\\n          --set node.perNodeServices.relayP2pService.port=30333 \\\n          --set node.flags=\"--alice --rpc-external --ws-external --rpc-cors all --rpc-methods=unsafe\"\n    \n    This command deploys the node `alice` as a stateful service with an example custom node key and with a service to be used as a boot node for all other hosts.\n    \n5.  Deploy the validator node using the Bob account and `alice` as a boot node by running the following command:\n    \n        helm install rococo-bob parity/node --set node.role=\"validator\" \\\n          --set node.chain=rococo-local \\\n          --set node.flags=\"--bob --bootnodes '/dns4/rococo-alice-node-0-relay-chain-p2p/tcp/30333/p2p/12D3KooWMeR4iQLRBNq87ViDf9W7f6cc9ydAPJgmq48rAH116WoC'\"\n    \n    After both validators are running, the chain should start producing blocks.\n    \n6.  Deploy two full nodes by running the following command:\n    \n        helm install rococo-pool parity/node --set node.chain=rococo-local \\\n          --set node.replicas=2 \\\n          --set node.flags=\"--bootnodes '/dns4/rococo-alice-node-0-relay-chain-p2p/tcp/30333/p2p/12D3KooWMeR4iQLRBNq87ViDf9W7f6cc9ydAPJgmq48rAH116WoC'\"\n    \n    After completing these steps, you have a working `rococo-local` test chain with two validators and two full nodes.\n    \n\nThe following tools\u2014listed from simplest to most advanced are useful for managing helm releases.\n\n*   [Helmfile](https://github.com/roboll/helmfile)\n    \n*   [Terraform Helm provider](https://registry.terraform.io/providers/hashicorp/helm/latest/docs)\n    \n*   [Flux CD](https://fluxcd.io/)\n    \n*   [ArgoCD](https://argo-cd.readthedocs.io/en/stable/)\n    \n\n[](/deploy/deployment-options/#docker)\nDocker\n---------------------------------------------\n\nIf you are deploying nodes as virtual machines in a network, you can use Docker images to prepare the node configuration for different types of nodes. For example, you can prepare Docker images for validator nodes and RPC provider nodes then deploy multiple nodes of each type without configuring a separate virtual machine for each node. External node operators can then use the Docker images you provide to deploy new nodes whenever and wherever they are needed.\n\n### [](/deploy/deployment-options/#sample-dockerfile)\nSample Dockerfile\n\nThe following sample Dockerfile illustrates the best practices for building the Docker image in a secure way that minimizes the attack surface. This example is similar version to the Dockerfile used to create the official Polkadot images. You can also consult Docker documentation for additional information about [Best practices for writing Dockerfiles](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n.\n\n    # This is an example build stage for the node template. Here we create the binary in a temporary image.\n    \n    # This is a base image to build substrate nodes\n    FROM docker.io/paritytech/ci-linux:production as builder\n    \n    WORKDIR /node-template\n    COPY . .\n    RUN cargo build --locked --release\n    \n    # This is the 2nd stage: a very small image where we copy the binary.\"\n    FROM docker.io/library/ubuntu:20.04\n    LABEL description=\"Multistage Docker image for Substrate Node Template\" \\\n      image.type=\"builder\" \\\n      image.authors=\"you@email.com\" \\\n      image.vendor=\"Substrate Developer Hub\" \\\n      image.description=\"Multistage Docker image for Substrate Node Template\" \\\n      image.source=\"https://github.com/substrate-developer-hub/substrate-node-template\" \\\n      image.documentation=\"https://github.com/substrate-developer-hub/substrate-node-template\"\n    \n    # Copy the node binary.\n    COPY --from=builder /node-template/target/release/node-template /usr/local/bin\n    \n    RUN useradd -m -u 1000 -U -s /bin/sh -d /node-dev node-dev && \\\n      mkdir -p /chain-data /node-dev/.local/share && \\\n      chown -R node-dev:node-dev /chain-data && \\\n      ln -s /chain-data /node-dev/.local/share/node-template && \\\n      # unclutter and minimize the attack surface\n      rm -rf /usr/bin /usr/sbin && \\\n      # check if executable works in this container\n      /usr/local/bin/node-template --version\n    \n    USER node-dev\n    \n    EXPOSE 30333 9933 9944 9615\n    VOLUME [\"/chain-data\"]\n    \n    ENTRYPOINT [\"/usr/local/bin/node-template\"]\n\n### [](/deploy/deployment-options/#automated-build-pipeline)\nAutomated build pipeline\n\nThe following sample [GitHub action](https://github.com/substrate-developer-hub/substrate-node-template/blob/main/.github/workflows/release.yml)\n builds and publishes a Docker image to DockerHub. In most cases, you trigger this action using a manual workflow or when a new release is published.\n\nNote that you must add secrets to your GitHub repository or organization as described in [Encrypted secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)\n to publish images securely. You'll also need to save the credentials for your DockerHub account in your GitHub secrets. If you instead want to use another image repository\u2014for example, the GitHub image registry\u2014you can amend the _Build and push Docker images_ step.\n\n    # You need to add the following secrets to your GitHub Repository or Organization to make this work\n    # - DOCKER_USERNAME: The username of the DockerHub account. E.g. parity\n    # - DOCKER_TOKEN: Access token for DockerHub, see https://docs.docker.com/docker-hub/access-tokens/. E.g. VVVVVVVV-WWWW-XXXXXX-YYYY-ZZZZZZZZZ\n    # The following are setup as an environment variable below\n    # - DOCKER_REPO: The unique name of the DockerHub repository. E.g. parity/polkadot\n    \n    name: Build & Publish Docker Image\n    \n    # Controls when the action will run.\n    on:\n      # Triggers the workflow on push events but only for the main branch\n      # push:\n      # branches: [ main ]\n    \n      # Allows you to run this workflow manually from the Actions tab\n      workflow_dispatch:\n    \n    # Set an environment variable (that can be overriden) for the Docker Repo\n    env:\n      DOCKER_REPO: parity/polkadot\n    \n    # A workflow run is made up of one or more jobs that can run sequentially or in parallel\n    jobs:\n      build:\n        # The type of runner that the job will run on\n        runs-on: ubuntu-22.04\n    \n        # Steps represent a sequence of tasks that will be executed as part of the job\n        steps:\n          # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n          - name: Check out the repo\n            uses: actions/checkout@v2.5.0\n    \n          # Login to Docker hub using the credentials stored in the repository secrets\n          - name: Log in to Docker Hub\n            uses: docker/login-action@v2.1.0\n            with:\n              username: ${{ secrets.DOCKER_USERNAME }}\n              password: ${{ secrets.DOCKER_TOKEN }}\n    \n          # Get the commit short hash, to use as the rev\n          - name: Calculate rev hash\n            id: rev\n            run: echo \"value=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n    \n          # Build and push 2 images, One with the version tag and the other with latest tag\n          - name: Build and push Docker images\n            uses: docker/build-push-action@v3.2.0\n            with:\n              context: .\n              push: true\n              tags: ${{ env.DOCKER_REPO }}:v${{ steps.rev.outputs.value }}, ${{ secrets.DOCKER_REPO }}:latest\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/deploy/prepare-to-deploy/)\n[Next \u2192](/deploy/keys-and-network-operations/)\n\nON THIS PAGE\n\n[Linux servers](#linux-servers)\n[Cloud provisioning](#cloud-provisioning)\n[Kubernetes](#kubernetes)\n[Docker](#docker)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/deploy/prepare-to-deploy/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Deploy](/deploy/)\nPrepare to deploy\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/deploy/prepare-to-deploy.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nPrepare to deploy\n=================\n\nTo prepare for deployment, you'll want to look more carefully at your network architecture, including how and where to deploy different nodes, the type of infrastructure you are deploying on, and the command-line options you'll use to manage node operations. The topics in this section highlight some of these key considerations for moving from a local development and test environment into production.\n\n[](/deploy/prepare-to-deploy/#node-roles-and-responsibilities)\nNode roles and responsibilities\n----------------------------------------------------------------------------------------------\n\nAs discussed in [Networks and nodes](/learn/node-and-network-types/)\n, you can use Substrate to build blockchains that can be deployed as solo chains or parachains, as private networks, or as custom relay chains. You also learned that nodes can take on different roles depending on your chain and project requirements.\n\nAs you prepare for deployment, it's important to keep in mind how different types of nodes are used to ensure they are configured with appropriate hardware and software required to perform their duties. The following table summarizes the most common node types and responsibilities:\n\n| Node type | What it does |\n| --- | --- |\n| Validator node | Secures the relay chain by staking DOT, processes the validating proofs from parachain collator node, and votes on consensus along with other validators. |\n| Collator node | Maintains a parachain by collecting parachain transactions and producing state transition proofs for the validators. |\n| Boot node | Provides a static address and peer-to-peer (`libp2p`) public key that is used to bootstrap a node onto the network\u2019s distributed hash table and to find peer nodes. |\n| RPC node | Exposes an RPC interface over HTTP or WebSocket ports for the relay chain or the parachain so that users can read the blockchain state and submit transactions. There are often multiple RPC nodes behind a load balancer. |\n| Archive node | Maintains all blocks starting from the genesis block with complete state available for every block. |\n| Full node | Synchronizes with the relay chain or parachain to store the most recent block state and block headers for older blocks. |\n\n### [](/deploy/prepare-to-deploy/#role-specific-command-line-options)\nRole-specific command-line options\n\nThe command-line settings you use to start a node typically reflect the type of node you are starting. For example, if you are starting a validator node, you should always specify at least the `--validator` command-line option to enable block validation. You should also ensure that the node keys are injected using the command line or by calling the `author_rotateKeys` RPC method.\n\nFor collator nodes, you should always specify at least the `--collator` command-line option to enable parachain collation.\n\nBootnodes use a static key file to ensure the public address for peer-to-peer networking is always the same. You should store the private node key in a file and use the `--node-key-file` command-line option to specify the path to the file.\n\nFor RPC nodes, you should specify the following command-line options to allow up to 5000 public RPC or WebSocket connections:\n\n`--unsafe-ws-external` `--rpc-methods Safe` `--rpc-cors \u2018*\u2019` `--ws-max-connections 5000`\n\nIf you want a node to be an archive node, you must specify the`-\u2013pruning=archive` command-line option to prevent the node from discarding any block state.\n\n[](/deploy/prepare-to-deploy/#parachain-specific-syntax)\nParachain-specific syntax\n----------------------------------------------------------------------------------\n\nFor parachain nodes, you must specify two sets of command-line options. The first set of command-line options apply to the parachain. The second set of command-line options apply to the relay chain that runs locally in parallel with the parachain. For example:\n\n    ./statemine $PARACHAIN_OPTIONS -- $RELAYCHAIN_OPTIONS\n\nFor example, the following command illustrates starting a Statemine collator node:\n\n    ./statemine  --chain statemine --in-peers 25 --out-peers 25 --db-cache 512 --pruning=1000 --unsafe-pruning -- --chain kusama -db-cache 512 --pruning=1000 --wasm-execution Compiled\n\n[](/deploy/prepare-to-deploy/#common-deployment-targets)\nCommon deployment targets\n----------------------------------------------------------------------------------\n\nThere are many different ways you could deploy the nodes that define your network topology, and different deployment scenarios have different hardware and software requirements. The following table provides a non-exhaustive list of the common deployment targets:\n\n| Type | Description |\n| --- | --- |\n| Physical server | Physical hardware is typically deployed as a rack-mounted server located in a data center. |\n| Virtual machine | Virtual hardware is typically deployed as a virtual image hosted on a cloud provider platforms or self-hosted onsite. |\n| Kubernetes cluster | Kubernetes is a container orchestration engine that can be used to host your blockchain instances. This option is only recommended if you already have prior experience with Kubernetes, especially in production environments. |\n| Local container | Local container engines\u2014such as `containerd`, Docker, and Pod Manager\u2014provide simpler containerization services than Kubernetes and can be used to create and deploy node images. |\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/deploy/)\n[Next \u2192](/deploy/deployment-options/)\n\nON THIS PAGE\n\n[Node roles and responsibilities](#node-roles-and-responsibilities)\n[Parachain-specific syntax](#parachain-specific-syntax)\n[Common deployment targets](#common-deployment-targets)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/deploy/keys-and-network-operations/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    *   [Prepare to deploy](/deploy/prepare-to-deploy/)\n        \n    *   [Deployment options](/deploy/deployment-options/)\n        \n    *   [Keys and network operations](/deploy/keys-and-network-operations/)\n        \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Deploy](/deploy/)\nKeys and network operations\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/deploy/keys-and-network-operations.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nKey signatures and network operations\n=====================================\n\nIn [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n, the discussion of public and private keys focused on identifying accounts and addresses associated with users interacting with different networks. However, keys and different key signatures are also fundamental to deploying Substrate nodes and performing specific node operations. This section recaps the encryption schemes and where they are used by different node components.\n\n[](/deploy/keys-and-network-operations/#digital-signature-schemes)\nDigital signature schemes\n--------------------------------------------------------------------------------------------\n\nMost digital signature schemes provide the following features:\n\n*   **Key generation**. The signature scheme must provide a method for generating a random private key from the set of all possible private keys and a corresponding public key that can be used to verify the authenticity of the private key.\n*   **Message signing**. The signature scheme must provide a method that produces a signature for a given message and private key.\n*   **Signature verification**. The signature scheme must provide a method to accept or reject the authenticity of a message based on the message, public key, and signature being evaluated.\n\nDifferent signature schemes use different algorithms to perform these operations. Regardless of the mathematics used, all signature schemes are designed to achieve two main outcomes:\n\n*   Authenticity of the signature generated for a given message and private key is verified by using the corresponding public key.\n*   Integrity of the message can be reasonably assumed because generating a valid signature without the private key isn't computationally feasible.\n\nThe following signature schemes are supported in Substrate-based chains:\n\n| Scheme | Description |\n| --- | --- |\n| ed25519 | The Ed25519 signature scheme is based on the Edwards-curve Digital Signature Algorithm (EdDSA) signature scheme\u2014a variant of Schnorr signatures\u2014that uses SHA-512 and Curve25519. This signature scheme produces more secure signatures and is significantly faster at signing messages than the ECDSA signature scheme. |\n| sr25519 | The Sr25519 signature scheme is the default signature scheme for Substrate. This signature scheme is based on the Schnorrkel variant that uses Schnorr signatures with Ristretto point compression. The Sr25519 signature scheme supports additional features\u2014such as hierarchical deterministic key derivation, multi-signature signing, and a verifiable random function\u2014that are particularly useful in a blockchain environment. |\n| ecdsa | The Elliptic Curve Digital Signature Algorithm (ECDSA) is a variant of the Digital Signature Algorithm (DSA) that uses the Secp256k1 elliptic curve cryptography. This signature scheme was used initially in Bitcoin and Ethereum because of the patent protecting Schnorr signatures. Using the ECDSA signature scheme complicates some advanced cryptographic techniques, such as threshold signatures. |\n\n[](/deploy/keys-and-network-operations/#session-keys-and-types)\nSession keys and types\n--------------------------------------------------------------------------------------\n\nSession keys are private online keys that are used by validators to sign consensus-related messages. Session keys must be available online to enable the validator to perform certain network operations.\n\nThese keys aren't used to control funds and they should only be used for their intended purpose. They can be changed regularly. To create session keys, a validator node operator must use a controller account too generate a certificate signed with the session's public key. The certificate attests that the key acts on behalf of the validator's staking account and nominators. After creating the session key, the validator node operator informs the chain that this key represents the controller key by publishing the session certificate in a transaction on the chain. In most cases, node operators use the [Session](https://paritytech.github.io/substrate/master/pallet_session/index.html)\n pallet to manage their session keys.\n\nThe [`SessionKeys`](https://paritytech.github.io/substrate/master/sp_session/index.html)\n trait is a generic, indexable type and you can declare any number of session keys in the runtime. The default Substrate node template uses four session keys. Other chains can have more or fewer depending on what operations the chain expects its validators to perform.\n\nIn practice, validators combine all of the session public keys into a single object, sign the set of public keys with a controller account, and submit a transaction to register the keys on chain. This on-chain registration links a validator _node_ with an _account_ that holds funds. As such, the account associated with the session keys object can be credited with rewards or slashed based on the node's behavior.\n\nThe runtime declares what session keys implemented with the help of the `impl_opaque_keys!` macro:\n\n    impl_opaque_keys! {\n        pub struct SessionKeys {\n            pub grandpa: Grandpa,\n            pub babe: Babe,\n            pub im_online: ImOnline,\n            pub authority_discovery: AuthorityDiscovery,\n        }\n    }\n\nPolkadot uses the following session keys:\n\n| Name | Type |\n| --- | --- |\n| Authority discovery | sr25519 |\n| GRANDPA | ed25519 |\n| BABE | sr25519 |\n| I'm online | sr25519 |\n| Parachain assignment | sr25519 |\n| Parachain validator | ed25519 |\n\nBABE requires keys suitable for use in a Verifiable Random Function as well as for digital signatures. Sr25519 keys have both capabilities and so are used for BABE.\n\n[](/deploy/keys-and-network-operations/#commands-line-interface)\nCommands-line interface\n----------------------------------------------------------------------------------------\n\nYou can use `polkadot keys` or the `subkey` command to generate and inspect keys.\n\nTwo important subcommands are:\n\n*   `generate` to create a new random account and print the private key to standard output or save the key to a file.\n*   `inspect` to view the account and address information for an account by passing a secret phrase or seed.\n\nSome important options are:\n\n*   `--network` to specify the network the keys will be used on (default is `substrate`).\n*   `--scheme` to specify the signature scheme for the keys (default is `sr25519`).\n\nFor example, you can **generate** a Polkadot random key by running the following command:\n\n    polkadot key generate -n polkadot\n\nThe command displays output similar to the following:\n\n    Secret phrase:       settle whisper usual blast device source region pumpkin ugly beyond promote cluster\n      Network ID:        polkadot\n      Secret seed:       0x2e6371e04b45f16cd5c2d66fc47c8ad7f2881215287c374abfa0e07fd003cb01\n      Public key (hex):  0x9e65e97bd8ba80095440a68d1be71adff107c73627c8b85d29669721e02e2b24\n      Account ID:        0x9e65e97bd8ba80095440a68d1be71adff107c73627c8b85d29669721e02e2b24\n      Public key (SS58): 14agqii5GAiM5z4yzGhJdyWQ3a6HeY2oXvLdCrdhFXRnQ77D\n      SS58 Address:      14agqii5GAiM5z4yzGhJdyWQ3a6HeY2oXvLdCrdhFXRnQ77D\n\nYou can **inspect** account and address information for a key by running a command similar to the following with a secret phrase:\n\n    ./polkadot key inspect -n polkadot \"settle whisper usual blast device source region pumpkin ugly beyond promote cluster\"\n\nThe command displays output similar to the following:\n\n    Secret phrase:       settle whisper usual blast device source region pumpkin ugly beyond promote cluster\n      Network ID:        polkadot\n      Secret seed:       0x2e6371e04b45f16cd5c2d66fc47c8ad7f2881215287c374abfa0e07fd003cb01\n      Public key (hex):  0x9e65e97bd8ba80095440a68d1be71adff107c73627c8b85d29669721e02e2b24\n      Account ID:        0x9e65e97bd8ba80095440a68d1be71adff107c73627c8b85d29669721e02e2b24\n      Public key (SS58): 14agqii5GAiM5z4yzGhJdyWQ3a6HeY2oXvLdCrdhFXRnQ77D\n      SS58 Address:      14agqii5GAiM5z4yzGhJdyWQ3a6HeY2oXvLdCrdhFXRnQ77D\n\nTo inspect a key created with the hard derivation `//Stash//0`, you would run a command similar to the following:\n\n    polkadot key inspect -n polkadot \"settle whisper usual blast device source region pumpkin ugly beyond promote cluster//Stash//0\"\n\nThe command displays output similar to the following:\n\n    Secret Key URI `settle whisper usual blast device source region pumpkin ugly beyond promote cluster//Stash//0` is account:\n      Network ID:        polkadot\n     Secret seed:       0xe9437b365161e8228e8abd53d64e6b31058dcddcd0b96f895045ecc41579ee3e\n      Public key (hex):  0xd8ed7b942f6e590b06e99951ac10e3312f65f01df5b3f250b70374fc2da1046d\n      Account ID:        0xd8ed7b942f6e590b06e99951ac10e3312f65f01df5b3f250b70374fc2da1046d\n      Public key (SS58): 15uRtdeE4MyMHV9LP1UHKqTx4f8Qa8uVZUpxWWw8VKSroucK\n      SS58 Address:      15uRtdeE4MyMHV9LP1UHKqTx4f8Qa8uVZUpxWWw8VKSroucK\n\nFor more information about using subkey comands and command-line options, see [subkey](/reference/command-line-tools/subkey/)\n.\n\n**Last edit:** February 16, 2024\n\n[\u2190 Previous](/deploy/deployment-options/)\n[Next \u2192](/maintain/)\n\nON THIS PAGE\n\n[Digital signature schemes](#digital-signature-schemes)\n[Session keys and types](#session-keys-and-types)\n[Commands-line interface](#commands-line-interface)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/design/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nDesign\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/design/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDesign\n======\n\nIn [Runtime development](/learn/runtime-development/)\n, you learned that Substrate provides a modular and flexible approach to blockchain development that enables you to focus on defining the **application** or **business logic** you want to implement. With Substrate, you can reuse common components and compose an upgradeable runtime with prebuilt or customized modules. So, with all of this flexibility, one of the most daunting questions might be what to buiild.\n\n[](/design/#what-you-can-build-with-these-tools)\nWhat you can build with these tools?\n-------------------------------------------------------------------------------------\n\nVirtually anything is possible, but it\u2019s important to keep in mind that a blockchain is a resource-constrained environment. Depending on your project, there might be many design decisions you have to make along the way. If you\u2019re starting small, your first decision might be whether to design a **smart contract** or a **pallet**. If you have a grander vision, you might need to consider whether what you want to you build is best delivered as an independent **solo chain** or would benefit from the shared security and liveness guarantees of a **parachain**.\n\n[](/design/#what-are-your-goals)\nWhat are your goals?\n-----------------------------------------------------\n\nBefore diving into whether you should build a smart contract, an application-specific pallet, a fully customized runtime, or a custom node infrastructure, you should consider the goals of your project and how it benefits users as a blockchain project.\n\n*   Is your primary concern decentralization of a product or service?\n*   Is provable data integrity central to your project?\n*   Is the immutability of records of primary importance?\n*   Is community participation crucial to the success of your project?\n\n[](/design/#what-issues-do-you-need-to-consider)\nWhat issues do you need to consider?\n-------------------------------------------------------------------------------------\n\nAs part of the design process, there are important issues and trade-offs to consider. For example:\n\n*   Processing transactions requires resources\u2014computing power, memory, storage, network bandwidth\u2014so you should consider how to ensure your project is economically viable.\n*   Protecting a network from accidental or intentional disruptions can be challenging, so you should consider what incentives and safeguards you'll need.\n*   Storing, reading, and writing to storage is expensive, so you should give careful consideration to what data needs to be stored onchain and persisted or if there are ways to structure your application to use temporary or offchain storage to perform some operations and minimizing your storage requirements.\n\nThe topics in this section are intended to highlight and help you navigate design decisions and architectural options you should consider as part of the planning process.\n\n**Last edit:** May 7, 2023\n\n[Next \u2192](/quick-start/)\n\nON THIS PAGE\n\n[What you can build with these tools?](#what-you-can-build-with-these-tools)\n[What are your goals?](#what-are-your-goals)\n[What issues do you need to consider?](#what-issues-do-you-need-to-consider)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/design/substrate-empowers-builders/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Design](/design/)\nSubstrate empowers builders\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/design/substrate-empowers-builders.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nSubstrate empowers builders\n===========================\n\nThe Substrate framework empowers you to make many types of design decisions for your project. Substrate doesn't enforce any assumptions about the consensus model you want to use, the form of governance you might implement, or whether you'll charge transaction fees. With every design decision, you are free to choose between the complexity of technical innovation and the ease of development using predefined modules and feature-specific logic.\n\nThe following diagram illustrates how different approaches to building your project affect development time and complexity.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='876.9433465085639' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Balancing technical freedom and development ease](https://docs.substrate.io/static/c9882d38950de8f51743890233f18ef6/3c520/development-complexity.png)\n\nAs this diagram suggests, Substrate provides predefined templates and tools to reduce complexity and development time. However, Substrate also exposes the low-level primitives that build the core features of the blockchain, so you have complete technical freedom to innovate at any point in the\u00a0development stack.\n\nIf you want to minimize development time and complexity, you can deploy predefined Substrate nodes with minimal configuration and launch a blockchain with virtually no development effort. If you want to modify lower-level components or operations\u2014such as, consensus, networking, or storage\u2014you can design and implement a Substrate-based blockchain from core primitives or build your own components from scratch.\n\n[](/design/substrate-empowers-builders/#using-frame)\nUsing FRAME\n----------------------------------------------------------------\n\nNaturally, the most common scenario falls between these two extremes and involves the use of predefined modules and libraries to simplify development. Collectively, the predefined modules and libraries form the [FRAME](/reference/glossary/#frame)\n development environment. FRAME is an acronym for Framework for Runtime Aggregation of Modularized Entities, and the main purpose of FRAME is to enable you to create a customized Substrate **runtime**.\n\nBy using FRAME, you can select and configure the specific modules\u2014called **pallets**\u2014that you want to use. For example, if you know your application needs to manage account balances, you can simply include the Balances pallet in the configuration of your runtime logic. You can then modify different aspects of the pallet in the context of your runtime to suit your application. If a pallet doesn't currently exist for the functionality you need, you can use FRAME to create your own custom pallet, then add that custom pallet to your customized runtime.\n\n[](/design/substrate-empowers-builders/#basic-runtime-design-decisions)\nBasic runtime design decisions\n------------------------------------------------------------------------------------------------------\n\nBecause building a blockchain from scratch is a complex business that requires a lot of specialized skills and knowledge, most builders start with a core set of the outer node components and focus their energy on building customized runtime logic. However, even if you aren't building lower-level blockchain components, building a custom runtime will require you to make some important design decisions. For example, you can build a Substrate runtime:\n\n*   Without any predefined FRAME pallets.\n*   Only using predefined FRAME pallets.\n*   Using a combination of predefined and custom pallets.\n*   Using smart contracts and predefined FRAME pallets.\n*   With a combination of predefined and custom pallets and smart contracts.\n\nAs part of your design process, you can explore the predefined [FRAME pallets](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame)\n to see if they provide features that you want to use or customize and identify any custom pallets you might need.\n\n[](/design/substrate-empowers-builders/#where-to-go-next)\nWhere to go next\n--------------------------------------------------------------------------\n\nExplore the following resources to learn more.\n\n#### Tell me more\n\n*   [Blockchain basics](/main-docs/learn/blockchain-basics/)\n    \n*   [Why substrate?](/main-docs/learn/why-substrate/)\n    \n*   [Architecture](/main-docs/learn/architecture/)\n    \n*   [Runtime development](/main-docs/learn/runtime-development/)\n    \n\n#### Guide me\n\n*   [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n    \n*   [Simulate a network](/tutorials/build-a-blockchain/simulate-network/)\n    \n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n\n**Last edit:** September 4, 2023\n\n[Next \u2192](/quick-start/)\n\nON THIS PAGE\n\n[Using FRAME](#using-frame)\n[Basic runtime design decisions](#basic-runtime-design-decisions)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/design/decide-what-to-build/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Design](/design/)\nDecide what to build\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/design/decide-what-to-build.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDecide what to build\n====================\n\nOne of the first decisions you need to make in designing your application is the approach you want to use. For example, you need to decide whether your project is best suited to be delivered in the form of a smart contract, an individual pallet, a custom runtime, or a parachain. The decision about what to build will affect almost all of other decisions you'll need to make. To help you make that initial determination about what to build, this section highlights the options available, the differences between them, and the reasons you might select one approach over another.\n\n[](/design/decide-what-to-build/#smart-contracts)\nSmart contracts\n-----------------------------------------------------------------\n\nMany developers are familiar with smart contracts and are naturally inclined to think that their project is well-suited to the smart contract model. However, there are both benefits and drawbacks to consider in determining whether the smart contract approach is right for your project.\n\n### [](/design/decide-what-to-build/#smart-contracts-must-adhere-to-blockchain-rules)\nSmart contracts must adhere to blockchain rules\n\nSmart contracts are instructions that are deployed on a specific chain and run on a specific chain address. Because smart contracts run on an underlying blockchain that they don't control, they must comply with any rules or limitations that the underlying chain imposes. For example, the underlying blockchain might restrict access to storage or prevent certain types of transactions.\n\nIn addition, blockchains that accept smart contracts typically treat the code as coming from an untrusted source\u2014potentially a malicious actor or inexperienced developer. To prevent untrusted code from disrupting blockchain operations, the underlying blockchain implements native safeguards to limit what a malicious or faulty smart contract can do. For example, the underlying chain might charge fees or enforce metering to ensure that contract developers or users are charged for the computation and storage the contract consumes. The fees and rules for contract execution are at the discretion of the underlying chain.\n\n### [](/design/decide-what-to-build/#smart-contracts-and-state)\nSmart contracts and state\n\nYou can think of smart contracts as executing in a sandboxed environment. They don't modify the underlying blockchain storage or the storage of other contracts directly. In general, smart contracts only modify their own state and don't make calls to other contracts or to runtime functions. There's typically some additional overhead for running smart contracts to ensure that the underlying blockchain can revert transactions to prevent state from being updated if errors in a contract cause execution to fail.\n\n### [](/design/decide-what-to-build/#scenarios-for-using-smart-contracts)\nScenarios for using smart contracts\n\nAlthough there are limitations to smart contracts, there are scenarios where your project might benefit from using smart contracts. For example, smart contracts have lower barrier to entry and can often be built and deployed in a short period of time. The reduced development time might give you an advantage in determining product-to-market fit and iterating quickly.\n\nSimilarly, if you're familiar with building smart contracts using a language like Solidity, you can reduce the learning curve and time-to-market for your project. Because smart contracts adhere to the functionality of the chain where they are deployed, you can focus more narrowly on implementing the application logic of the contract without worrying about blockchain infrastructure or economics.\n\nIf you are planning to build a parachain, you can also use smart contracts to prototype features or functionality in an isolated way that doesn't affect the underlying network before investing in a more full-scale solution. If you are a runtime developer, you can incorporate contracts to allow your community to extend and develop features for your runtime without granting them access to the underlying runtime logic. You can also use smart contracts to test future runtime changes.\n\nIn general, you should consider the following characteristics when deciding whether to build your project using smart contracts:\n\n*   They are inherently safer for the network because safeguards are built into the underlying chain, but you have no control over any restrictions, limitations, or computational overhead imposed by those safeguards.\n*   The underlying chains provides the built-in economic incentives against abuse, but the fee and metering system is defined by the underlying chain.\n*   They have a lower barrier to entry in terms of code complexity and time to deployment.\n*   They can provide an isolated environment for prototyping, testing, and community engagement.\n*   They have lower deployment and maintenance overhead because you take advantage of an existing network.\n\nThe following examples illustrate use cases for smart contracts:\n\n*   Add a derivative to an existing decentralized exchange (DEX).\n*   Implement a custom trading algorithm.\n*   Define logic for a contract between specific parties.\n*   Prototype and test an application before converting it to parachain.\n*   Introduce layer-2 tokens and custom assets on an existing chain.\n\n### [](/design/decide-what-to-build/#support-for-smart-contracts)\nSupport for smart contracts\n\nThe Polkadot relay chain doesn't support smart contracts. However, the parachains that connect to Polkadot can support arbitrary state transitions, so any parachain can be a potential platform for smart contract deployment. For example, there are several parachains in the current Polkadot ecosystem that support different types of smart contract deployment. If you plan to develop a smart contract for the Polkadot ecosystem, you must first decide on the type of smart contract you want to build and identify a parachain that supports that type of smart contract. Substrate provides tools to support two types of smart contracts:\n\n*   The `contracts` pallet in the FRAME library enables a Substrate-based chain to execute smart contracts compiled to WebAssembly regardless of the language used to write the smart contract.\n*   The `evm` pallet in the Frontier project enables a Substrate-based chain to run Ethereum virtual machine (EVM) contracts written in Solidity.\n\n### [](/design/decide-what-to-build/#explore-smart-contracts)\nExplore smart contracts\n\nIf your project seems well-suited to be a smart contracts, you can see some simple examples to get you started in the following tutorials:\n\n*   [Develop smart contracts](/tutorials/smart-contracts/)\n    \n*   [Access EVM accounts](/tutorials/integrate-with-tools/access-evm-accounts/)\n    \n\n[](/design/decide-what-to-build/#individual-pallets)\nIndividual pallets\n-----------------------------------------------------------------------\n\nIn some cases, you might want to implement application logic as a standalone pallet and make the functionality available to the community as a library rather than building your own custom runtime. For example, if you don\u2019t want to deploy and manage an application-specific blockchain, you might build one or more individual pallets to provide features that are broadly useful across all Substrate-based chains, that improve existing functionality, or that define a standard for the Polkadot ecosystem. Individual pallets are typically easy to develop by using FRAME and easy for Substrate chains to integrate.\n\n### [](/design/decide-what-to-build/#writing-correct-code)\nWriting correct code\n\nIt's worth noting that pallets don't inherently provide any of type of protection or safeguards that smart contracts provide. With pallets, you control the logic available for runtime developers to implement. You provide the methods, storage items, events, and errors that your module requires. Pallets don't inherently introduce a fee or metering system. It is up to you to ensure that your pallet logic doesn't allow bad behavior or leave the network where your pallet is used vulnerable to attacks. This lack of built-in safeguards implies that you have a great deal of responsibility to write code that avoids mistakes.\n\n### [](/design/decide-what-to-build/#pallets-outside-of-runtime-development)\nPallets outside of runtime development\n\nOften, writing a pallet is the gateway to runtime development, giving you the opportunity to experiment with existing pallets and coding patterns without building a compete blockchain application. Individual pallets also provide an alternative way you can contribute to a project without writing your own application.\n\nAlthough writing and testing pallets is typically a stepping stone to building larger scale application, there are many examples of the value individual pallets can have to the ecosystem as a whole.\n\nEven if you are building a single pallet, you'll need to test it in the context of a runtime. The main disadvantage of developing individual pallets is that you don't have control over any other part of the runtime where they are used. If you treat your pallet as isolated code, you might miss opportunities to enhance or improve it. In addition, changes to FRAME or Substrate can create maintenance issues for your individual pallets if you don't update your code to stay synchronized with those changes.\n\n### [](/design/decide-what-to-build/#explore-building-pallets)\nExplore building pallets\n\nIf your project seems well-suited to be an individual pallet, you can see some simple examples to get you started in the following sections:\n\n*   [Custom pallets](/build/custom-pallets/)\n    \n*   [Work with pallets](/tutorials/build-application-logic/)\n    \n*   [Collectibles workshop](/tutorials/collectibles-workshop/)\n    \n\n[](/design/decide-what-to-build/#custom-runtime)\nCustom runtime\n---------------------------------------------------------------\n\nIn most cases, deciding to build a custom runtime is the critical step toward building and deploying an application-specific parallel blockchain\u2014a parachain\u2014as part of the Polkadot ecosystem. By building with Substrate and FRAME, you can develop a fully-customized runtime. With a custom runtime, you have complete control over all aspects of your application, including economic incentives, governance, consensus, and resource management.\n\nThere are pallets that provide pluggable modules for many of these features. However, it is up to you to decide which modules to use, how to modify them for your needs, and where custom modules are required. Because you control all of the underlying logic that each node in your network runs, there's a higher barrier to entry in terms of coding skill and experience than there is for writing a smart contract or an individual pallet.\n\nAs with individual pallets, a custom runtime doesn't provide any built-in safeguards to prevent bad actors or incorrect code from causing harm. It is up to you to correctly assess the resource consumption and how to apply transaction fees in the runtime logic to adequately protect the network and your user community.\n\nUnlike a smart contract or an individual pallet, a custom runtime is a fully-functioning blockchain. Making the custom runtime accessible and secure for others to use involves acquiring physical or cloud computing resources, building a community that finds value in your service, and managing a network infrastructure.\n\nWith smart contracts, your application runs on top of an existing execution model, limiting what your application can do. With a custom runtime, you control that underlying execution model and can choose to extend it to support smart contract execution for other developers. With a custom runtime, you can also deliver more complex functionality and user interactions than smart contracts or individual pallets can provide.\n\n### [](/design/decide-what-to-build/#explore-building-a-custom-runtime)\nExplore building a custom runtime\n\nIf you want to build a more complete custom runtime rather than an individual pallet, you can start with some simple examples like the tutorials in [Work with pallets](/tutorials/build-application-logic/)\n and the [Collectibles workshop](/tutorials/collectibles-workshop/)\n. However, if you want to build a custom runtime as a proof-of-concept for a solo chain or a parachain, you'll want a broader and deeper understanding of runtime components and FRAME pallets. The most relevant topics are under [Build](/build/)\n and [Test](/test/)\n and in the following sections:\n\n*   [Runtime storage structures](/build/runtime-storage/)\n    \n*   [Transactions, weights, and fees](/build/tx-weights-fees/)\n    \n*   [Application development](/build/application-development/)\n    \n*   [FRAME pallets](/reference/frame-pallets/)\n    \n*   [FRAME macros](/reference/frame-macros/)\n    \n\n[](/design/decide-what-to-build/#parachain)\nParachain\n-----------------------------------------------------\n\nA custom runtime can exist on its own as the business logic for a private network or a solo chain, but if you want your project to be a viable production chain, there are several advantages to deploying the business logic and state transition function for your application as a parachain or parathread.\n\nParachains and parathreads act as independent Layer-1 blockchains. Each parachain has its own logic and runs in parallel with other chains in their ecosystem. All of the chains in the ecosystem benefit from the shared security, governance, scalability, and interoperability of the network.\n\n### [](/design/decide-what-to-build/#parachains-provide-maximum-flexibility)\nParachains provide maximum flexibility\n\nBy developing your project as a parachain, you have a great deal of freedom and flexibility in the design and functionality of the chain. What you decide to build is entirely up to you. For example, you can define what data to store on-chain or off. You can define your own economic primitives, transaction requirements, fee policies, governance model, treasury accounts, and access control rules. Your parachain can have as little\u2014or as much\u2014overhead per transaction as you decide, and your parachain can evolve with upgrades and optimization over time. The only requirement is that your parachain or parathread must be compatible with the Polkadot API.\n\n### [](/design/decide-what-to-build/#planning-parachain-resource-requirements)\nPlanning parachain resource requirements\n\nAs a parachain, your project can offer functionality to a broader community in a more secure way that a private chain or a solo chain. However, if you want to build a production-ready parachain, you should keep the following additional requirements in mind:\n\n*   You'll need a development team with sufficient skills and experience, whether that means programming in Rust or a background in UX design.\n    \n    Parachain development might require more resources than other options.\n    \n*   You'll need to build your community through marketing, outreach, or ecosystem development programs.\n*   You'll need resources for your infrastructure and network maintenance.\n    \n    A parachain is a whole blockchain. Although the relay chain provides security and consensus for your project, you must maintain your chain and network infrastructure. In addition to developer operations (DevOps), you need to secure a parachain slot, design a crowdloan or auction strategy, and accumulate enough resources to extend the slot.\n    \n*   You'll need sufficient time for testing and validating your chain operations, in a sandbox or simulated network and on a fully-functioning test network.\n\n### [](/design/decide-what-to-build/#parachain-use-cases)\nParachain use cases\n\nIn general rule, you should build your project as a parachain if it requires complex operations because parachains provide faster and more efficient execution of transactions. For example, building a parachain might be the best option for the following use cases:\n\n*   Decentralized finance (DeFi) applications\n*   Digital wallets\n*   Internet of things (IOT) applications\n*   Gaming applications\n*   Web 3.0 infrastructureM\n\n### [](/design/decide-what-to-build/#explore-building-a-parachain)\nExplore building a parachain\n\nIf you have a custom runtime that you want to deploy as a parachain to take advantage of the security, governance, and interoperability of the relay chain and the Polkadot or Kusama ecosystem, you can start by building locally and setting up your own test network for initial testing.\n\nFor some examples to get you started, see the following sections:\n\n*   [Connect parachains to a network](/tutorials/build-a-parachain/)\n    \n*   [Simulate parachains in a test network](/test/simulate-parachains/)\n    \n*   [Parachains](/reference/how-to-guides/parachains/)\n    \n\nTo learn more about what you can build, explore the following resources:\n\n*   [Build with Polkadot](https://wiki.polkadot.network/docs/build-build-with-polkadot)\n    \n*   [Parachain development](https://wiki.polkadot.network/docs/build-pdk)\n    \n*   [Smart contracts](https://wiki.polkadot.network/docs/build-smart-contracts)\n    \n\n**Last edit:** May 7, 2023\n\n[Next \u2192](/quick-start/)\n\nON THIS PAGE\n\n[Smart contracts](#smart-contracts)\n[Individual pallets](#individual-pallets)\n[Custom runtime](#custom-runtime)\n[Parachain](#parachain)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/install/developer-tools/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Install](/install/)\nDeveloper tools\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/install/developer-tools.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDeveloper tools\n===============\n\nBecause you are going to be writing code in Rust, be sure your development environment has the appropriate extensions and plug-ins for working with Rust. As you begin working with the Substrate node template, you'll see that it includes a core set of features and tools specifically designed for runtime development. However, there are also many other specialized tools available that you can install to complement and extend your development environment or to handle specific tasks.\n\nA few of the tools you might find useful as you start developing a Substrate-based blockchain include the following:\n\n*   [Polkadot-JS API](https://polkadot.js.org/docs/api)\n    \n    The Polkadot-JS API provides a library of methods that enable you to query and interact with any Substrate-based chain using JavaScript. You can add the `@polkadot/api`package to any JavaScript or TypeScript working environment.\n    \n    Most of the interfaces exposed by the API are generated dynamically by connecting to a running node. Because the configuration of the node determines which interfaces are exposed, you can use the API to work with customized chains that implement different features. To work with the API, you must identify the URL for the chain to connect to. After connecting to a node for the chain, the API collects information about the chain state and its features, then populates the API with methods based on the information collected about that specific chain.\n    \n*   [Front-end template](https://github.com/substrate-developer-hub/substrate-front-end-template)\n     The Substrate front-end template provides a predefined front-end application that you can use to connect to a Substrate node back-end with minimal configuration. The template enables you to start experimenting with the basic features of a Substrate node without building your own custom user interface. The template is built using the Create React App starter project and the Polkadot-JS API.\n*   [Submit transactions command-line interface](https://github.com/paritytech/subxt)\n    \n    The `subxt-cli` is a command-line program you can use to download complete configuration information\u2014the [metadata](/reference/glossary/#metadata)\n    \u2014for a Substrate-based chain by connecting to a running node. Similar to the Polkadot-JS API, the metadata you can download with the `subxt-cli` program exposes information about a Substrate chain that enables you to interact with that chain. You can also use the `subxt-cli` program to expose information about the chain in a human-readable format.\n    \n*   [sidecar](https://github.com/paritytech/substrate-api-sidecar)\n    \n    The @substrate/api-sidecar package is a RESTful service that you can use to connect to and interact with Substrate nodes that are built using the [FRAME](/reference/glossary/#frame)\n     developer framework. For information about the endpoints that the service supports, see [Substrate API Sidecar](https://paritytech.github.io/substrate-api-sidecar/dist/)\n    .\n    \n\nYou might also want to explore resources and community projects listed in [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate)\n.\n\nFor an overview of some of the most commonly-used tools, see [command-line tools](/reference/command-line-tools/)\n.\n\n[](/install/developer-tools/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------\n\n*   [Command-line tools](/reference/command-line-tools/)\n    \n*   [node-template](/reference/command-line-tools/node-template/)\n    \n*   [subkey](/reference/command-line-tools/subkey/)\n    \n*   [try-runtime](/reference/command-line-tools/try-runtime/)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/install/windows/)\n[Next \u2192](/install/troubleshoot-rust-issues/)\n\nON THIS PAGE\n\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/install/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nInstall\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/install/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nInstall\n=======\n\nBefore you can start developing a Substrate-based blockchain, you need to prepare your development environment with the required compiler and tools. Because Substrate\u2014and most of the developer tools for working with Substrate\u2014are written in the [Rust](https://www.rust-lang.org/)\n programming language, the first step in preparing your computer is to install Rust. The steps for installing Rust depend on the operating system of the computer you are using for Substrate development. For installation instructions, see the appropriate topic for your operating system.\n\n*   [Linux](/install/linux/)\n    \n*   [macOS](/install/macos/)\n    \n*   [Windows](/install/windows/)\n    \n\nIf you already have Rust installed, you can skip the installation instructions. For additional information about installing and upgrading the Rust compiler and toolchain or troubleshooting installation issues, see the following topics:\n\n*   [Rust toolchain](/install/rust-toolchain/)\n    \n*   [Developer tools](/install/developer-tools/)\n    \n*   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n    \n\n**Last edit:** August 17, 2022\n\n[\u2190 Previous](/learn/xcm-communication/)\n[Next \u2192](/install/rust-toolchain/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/install/linux/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Install](/install/)\nLinux\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/install/linux.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nLinux development environment\n=============================\n\nRust supports most Linux distributions. Depending on the specific distribution and version of the operating system you use, you might need to add some software dependencies to your environment. In general, your development environment should include a linker or C-compatible compiler such as `clang` and an appropriate integrated development environment (IDE).\n\n[](/install/linux/#before-you-begin)\nBefore you begin\n-----------------------------------------------------\n\nCheck the documentation for your operating system for information about the packages that are installed and how to download and install any additional packages you might need. For example, if you use Ubuntu, you can use the Ubuntu Advanced Packaging Tool (`apt`) to install the `build-essential` package:\n\n    sudo apt install build-essential\n\nAt a minimum, you need the following packages before you install Rust:\n\n    clang curl git make\n\nBecause the blockchain requires standard cryptography to support the generation of public/private key pairs and the validation of transaction signatures, you must also have a package that provides cryptography, such as `libssl-dev` or `openssl-devel`.\n\n[](/install/linux/#install-required-packages-and-rust)\nInstall required packages and Rust\n-----------------------------------------------------------------------------------------\n\nTo install the Rust toolchain on Linux:\n\n1.  Log on to your computer and open a terminal shell.\n2.  Check the packages you have installed on the local computer by running an appropriate package management command for your Linux distribution.\n3.  Add any package dependencies you are missing to your local development environment by running an appropriate package management command for your Linux distribution.\n    \n    For example, on Ubuntu Desktop or Ubuntu Server, you might run a command similar to the following:\n    \n        sudo apt install --assume-yes git clang curl libssl-dev protobuf-compiler\n    \n    Click the tab titles to see examples for other Linux operating systems:\n    \n    DebianArchFedoraOpensuse\n    \n    Remember that different distributions might use different package managers and bundle packages in different ways. For example, depending on your installation selections, Ubuntu Desktop and Ubuntu Server might have different packages and different requirements. However, the packages listed in the command-line examples are applicable for many common Linux distributions, including Debian, Linux Mint, MX Linux, and Elementary OS.\n    \n4.  Download the `rustup` installation program and use it to install Rust by running the following command:\n    \n        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    \n5.  Follow the prompts displayed to proceed with a default installation.\n6.  Update your current shell to include Cargo by running the following command:\n    \n        source $HOME/.cargo/env\n    \n7.  Verify your installation by running the following command:\n    \n        rustc --version\n    \n8.  Configure the Rust toolchain to default to the latest stable version by running the following commands:\n    \n        rustup default stable\n        rustup update\n    \n9.  Add the `nightly` release and the `nightly` WebAssembly (wasm) targets to your development environment by running the following commands:\n    \n        rustup update nightly\n        rustup target add wasm32-unknown-unknown --toolchain nightly\n    \n10.  Verify the configuration of your development environment by running the following command:\n    \n        rustup show\n        rustup +nightly show\n    \n    The command displays output similar to the following:\n    \n        # rustup show\n        \n        active toolchain\n        ----------------\n        \n        stable-x86_64-unknown-linux-gnu (default)\n        rustc 1.62.1 (e092d0b6b 2022-07-16)\n        \n        # rustup +nightly show\n        \n        active toolchain\n        ----------------\n        \n        nightly-x86_64-unknown-linux-gnu (overridden by +toolchain on the command line)\n        rustc 1.65.0-nightly (34a6cae28 2022-08-09)\n    \n\n[](/install/linux/#compile-a-substrate-node)\nCompile a Substrate node\n---------------------------------------------------------------------\n\nNow that you have Rust installed and the Rust toolchains configured for Substrate development, you are ready to finish setting up your development environment by cloning the Substrate **node template** files and compiling a Substrate node.\n\nThe node template provides a working environment that includes all of the most common features you need to build a blockchain without any extraneous modules or tools. To ensure that the node template offers a relatively stable working environment for you to experiment with, the recommended best practice is to clone Substrate node template from the Substrate Developer Hub repository, rather than from the core Substrate repository.\n\nTo compile the Substrate node template:\n\n1.  Clone the node template repository by running the following command:\n    \n        git clone https://github.com/substrate-developer-hub/substrate-node-template\n    \n    In most cases, you can clone the `main` branch to get the latest code. However, you can use the `--branch` command-line option if you want to work with a Substrate branch that is compatible with a specific Polkadot version. Click [Tags](https://github.com/substrate-developer-hub/substrate-node-template/tags)\n     to see the list of branches that are compatible with specific Polkadot versions.\n    \n2.  Change to the root of the node template directory by running the following command:\n    \n        cd substrate-node-template\n    \n    If you want to save your changes and make this branch easy to identify, you can create a new branch by running a command similar to the following:\n    \n        git switch -c my-wip-branch\n    \n3.  Compile the node template by running the following command:\n    \n        cargo build --release\n    \n    Because of the number of packages required, compiling the node can take several minutes.\n    \n\nAfter the build completes successfully, your local computer is ready for Substrate development activity.\n\n[](/install/linux/#where-to-go-next)\nWhere to go next\n-----------------------------------------------------\n\nThe Substrate Developer Hub acts as a central portal for access to the many resources available to the community. Depending on your interests and learning style, you might prefer one avenue over another. For example, if you prefer to read source code and are familiar with Rust, you might want to start by digging into the [Rust API](https://paritytech.github.io/substrate/master)\n.\n\n#### Tell me\n\n*   [Architecture](/learn/architecture/)\n    \n*   [Networks and blockchains](/learn/networks-and-nodes/)\n    \n*   [Build process](/build/build-process/)\n    \n\n#### Guide me\n\n*   [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n    \n*   [Simulate a network](/tutorials/build-a-blockchain/simulate-network/)\n    \n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n\n**Last edit:** June 22, 2023\n\n[\u2190 Previous](/install/rust-toolchain/)\n[Next \u2192](/install/macos/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Install required packages and Rust](#install-required-packages-and-rust)\n[Compile a Substrate node](#compile-a-substrate-node)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/install/macos/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Install](/install/)\nMacos\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/install/macos.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nmacOS development environment\n=============================\n\nYou can install Rust and set up a Substrate development environment on Apple macOS computers with either Intel or an Apple M1 processors.\n\n[](/install/macos/#before-you-begin)\nBefore you begin\n-----------------------------------------------------\n\nBefore you install Rust and set up your development environment on macOS, verify that your computer meets the following basic requirements:\n\n*   Operating system version is 10.7 Lion, or later.\n*   Processor speed of at least 2Ghz, 3Ghz recommended.\n*   Memory of at least 8 GB RAM, 16 GB recommended.\n*   Storage of at 10 GB available space.\n*   Broadband Internet connection.\n\n### [](/install/macos/#support-for-apple-silicon)\nSupport for Apple Silicon\n\nProtobuf must be installed before the build process can begin. To install it, run the following command:\n\n`brew install protobuf`\n\n### [](/install/macos/#install-homebrew)\nInstall Homebrew\n\nIn most cases, you should use Homebrew to install and manage packages on macOS computers. If you don't already have Homebrew installed on your local computer, you should download and install it before continuing.\n\nTo install Homebrew:\n\n1.  Open the Terminal application.\n2.  Download and install Homebrew by running the following command:\n    \n        /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n    \n3.  Verify Homebrew has been successfully installed by running the following command:\n    \n        brew --version\n    \n    The command displays output similar to the following:\n    \n        Homebrew 3.3.1\n        Homebrew/homebrew-core (git revision c6c488fbc0f; last commit 2021-10-30)\n        Homebrew/homebrew-cask (git revision 66bab33b26; last commit 2021-10-30)\n    \n\n[](/install/macos/#installation)\nInstallation\n---------------------------------------------\n\nBecause the blockchain requires standard cryptography to support the generation of public/private key pairs and the validation of transaction signatures, you must also have a package that provides cryptography, such as `openssl`.\n\nTo install `openssl` and the Rust toolchain on macOS:\n\n1.  Open the Terminal application.\n2.  Ensure you have an updated version of Homebrew by running the following command:\n    \n        brew update\n    \n3.  Install the `openssl` package by running the following command:\n    \n        brew install openssl\n    \n4.  Download the `rustup` installation program and use it to install Rust by running the following command:\n    \n        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    \n5.  Follow the prompts displayed to proceed with a default installation.\n6.  Update your current shell to include Cargo by running the following command:\n    \n        source ~/.cargo/env\n    \n7.  Verify your installation by running the following command:\n    \n        rustc --version\n    \n8.  Configure the Rust toolchain to default to the latest stable version by running the following commands:\n    \n        rustup default stable\n        rustup update\n        rustup target add wasm32-unknown-unknown\n    \n9.  Add the `nightly` release and the `nightly` WebAssembly (wasm) targets to your development environment by running the following commands:\n    \n        rustup update nightly\n        rustup target add wasm32-unknown-unknown --toolchain nightly\n    \n10.  Verify the configuration of your development environment by running the following command:\n    \n        rustup show\n        rustup +nightly show\n    \n    The command displays output similar to the following:\n    \n        # rustup show\n        \n        active toolchain\n        ----------------\n        \n        stable-x86_64-apple-darwin (default)\n        rustc 1.61.0 (fe5b13d68 2022-05-18)\n        \n        # rustup +nightly show\n        \n        active toolchain\n        ----------------\n        \n        nightly-x86_64-apple-darwin (overridden by +toolchain on the command line)\n        rustc 1.63.0-nightly (e71440575 2022-06-02)\n    \n    1.  Install `cmake` using the following command:\n    \n        brew install cmake\n    \n\n[](/install/macos/#compile-a-substrate-node)\nCompile a Substrate node\n---------------------------------------------------------------------\n\nNow that you have Rust installed and the Rust toolchains configured for Substrate development, you are ready to finish setting up your development environment by cloning the Substrate **node template** files and compiling a Substrate node.\n\nThe node template provides a working environment that includes all of the most common features you need to build a blockchain without any extraneous modules or tools. To ensure that the node template offers a relatively stable working environment for you to experiment with, the recommended best practice is to clone Substrate node template from the Substrate Developer Hub repository, rather than from the core Substrate repository.\n\nTo compile the Substrate node template:\n\n1.  Clone the node template repository by running the following command:\n    \n        git clone https://github.com/substrate-developer-hub/substrate-node-template\n    \n    In most cases, you can clone the `main` branch to get the latest code. However, you can use the `--branch` command-line option if you want to work with a Substrate branch that is compatible with a specific Polkadot version. Click [Tags](https://github.com/substrate-developer-hub/substrate-node-template/tags)\n     to see the list of branches that are compatible with specific Polkadot versions.\n    \n2.  Change to the root of the node template directory by running the following command:\n    \n        cd substrate-node-template\n    \n    If you want to save your changes and make this branch easy to identify, you can create a new branch by running a command similar to the following:\n    \n        git switch -c my-wip-branch\n    \n3.  Compile the node template by running the following command:\n    \n        cargo build --release\n    \n    Because of the number of packages required, compiling the node can take several minutes.\n    \n\nAfter the build completes successfully, your local computer is ready for Substrate development activity.\n\n[](/install/macos/#where-to-go-next)\nWhere to go next\n-----------------------------------------------------\n\nThe Substrate Developer Hub acts as a central portal for access to the many resources available to the community. Depending on your interests and learning style, you might prefer one avenue over another. For example, if you prefer to read source code and are familiar with Rust, you might want to start by digging into the [Rust API](https://paritytech.github.io/substrate/master)\n.\n\nHere are a few additional suggestions for where you can learn more.\n\n#### Tell me\n\n*   [Architecture](/learn/architecture/)\n    \n*   [Networks and blockchains](/learn/node-and-network-types/)\n    \n*   [Build process](/build/build-process/)\n    \n\n#### Guide me\n\n*   [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n    \n*   [Simulate a network](/tutorials/build-a-blockchain/simulate-network/)\n    \n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n\n**Last edit:** May 29, 2023\n\n[\u2190 Previous](/install/linux/)\n[Next \u2192](/install/windows/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Installation](#installation)\n[Compile a Substrate node](#compile-a-substrate-node)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/install/troubleshoot-rust-issues/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Install](/install/)\nTroubleshoot Rust issues\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/install/troubleshoot-rust-issues.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTroubleshoot Rust issues\n========================\n\nIf compiling the [Substrate node template](https://github.com/substrate-developer-hub/substrate-node-template)\n fails, the problem is most likely to be caused by how Rust is configured in your development environment. This section suggests how you can diagnose and fix configuration issues.\n\n[](/install/troubleshoot-rust-issues/#check-your-current-configuration)\nCheck your current configuration\n--------------------------------------------------------------------------------------------------------\n\nTo see information about the Rust toolchain that you are currently using, run the following command:\n\n    rustup show\n\nThis command displays output similar to the following Ubuntu example:\n\n    Default host: x86_64-unknown-linux-gnu\n    rustup home:  /home/user/.rustup\n    \n    installed toolchains\n    --------------------\n    \n    stable-x86_64-unknown-linux-gnu (default)\n    nightly-2020-10-06-x86_64-unknown-linux-gnu\n    nightly-x86_64-unknown-linux-gnu\n    \n    installed targets for active toolchain\n    --------------------------------------\n    \n    wasm32-unknown-unknown\n    x86_64-unknown-linux-gnu\n    \n    active toolchain\n    ----------------\n    \n    stable-x86_64-unknown-linux-gnu (default)\n    rustc 1.50.0 (cb75ad5db 2021-02-10)\n\nIn this example, the default toolchain is from the `stable` release channel for Linux running on x86_64 architecture. The sample output also indicates that the \\`nightly-x86_64-unknown-linux-gnu\\` toolchain is installed and there are two targets installed:\n\n*   `x86_64-unknown-linux-gnu` the native Rust target for Linux.\n*   `wasm32-unknown-unknown` the WebAssembly target.\n\nThis environment also has the `nightly-2020-10-06-x86_64-unknown-linux-gnu` toolchain installed, but this toolchain is only used if explicitly specified as a command-line option. For an example of specifying a specific toolchain as a command line option, see [Specify a nightly version](/install/troubleshoot-rust-issues/#specifying-nightly-version)\n.\n\n[](/install/troubleshoot-rust-issues/#use-the-nightly-release-channel-for-webassembly)\nUse the nightly release channel for WebAssembly\n--------------------------------------------------------------------------------------------------------------------------------------\n\nSubstrate uses [WebAssembly](https://webassembly.org)\n (Wasm) to produce a portable blockchain runtime. You must configure the Rust compiler to use [`nightly` builds](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html)\n to allow you to compile Substrate runtime code to the Wasm target.\n\n[](/install/troubleshoot-rust-issues/#update-the-toolchain)\nUpdate the toolchain\n--------------------------------------------------------------------------------\n\nIn general, you should always use the latest versions of Rust `stable` and `nightly` builds because changes in Substrate often depend on upstream changes in the Rust `nightly` compiler build. To ensure your Rust compiler is always up to date, you should run the following commands:\n\n    rustup update\n    rustup update nightly\n    rustup target add wasm32-unknown-unknown --toolchain nightly\n\nRunning `rustup update` updates both the `nightly` and `stable` toolchains to use the most recent release. If you are unable to compile the WebAssembly target after updating the `nightly` toolchain, you can roll back to an earlier version of the toolchain and specify that version as a command-line option. For more information about getting an earlier version of the `nightly` toolchain and specifying the version to use as a command-line option,[downgrade the toolchain](/install/troubleshoot-rust-issues/#downgrading-rust-nightly)\n.\n\n[](/install/troubleshoot-rust-issues/#use-a-specific-nightly-toolchain)\nUse a specific nightly toolchain\n--------------------------------------------------------------------------------------------------------\n\nIf you want to guarantee that your build works on your computer as you update Rust and other dependencies, you should use a specific Rust `nightly` toolchain that you know to be compatible with the version of Substrate you are using. How you identify and communicate the specific `nightly` toolchain version to use for a project can vary. For example, Polkadot publishes this information in its [release notes](https://github.com/paritytech/polkadot/releases)\n.\n\nAfter you identify the specific `nightly` toolchain version to use, you can install it in your development environment by running a command similar to the following:\n\n    rustup install nightly-<yyyy-MM-dd>\n\nFor example:\n\n    rustup install nightly-2022-02-16\n\nAfter you install a specific version of the nightly toolchain, configure the WebAssembly target to use it by running a command similar to the following:\n\n    rustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>\n\nFor example:\n\n    rustup target add wasm32-unknown-unknown --toolchain nightly-2022-02-16\n\n### [](/install/troubleshoot-rust-issues/#specify-the-toolchain-in-an-environment-variable)\nSpecify the toolchain in an environment variable\n\nYou can set the `WASM_BUILD_TOOLCHAIN` environment variable to specify the version of the `nightly` toolchain to use for compiling WebAssembly.For example:\n\n    WASM_BUILD_TOOLCHAIN=nightly-<yyyy-MM-dd> cargo build --release\n\nThis command builds the _runtime_ using the specified nightly toolchain. The rest of project is compiled using the _default_ toolchain, that is, the latest version of the `stable` toolchain that you have installed.\n\n### [](/install/troubleshoot-rust-issues/#downgrade-the-nightly-toolchain)\nDowngrade the nightly toolchain\n\nIf your computer is configured to use the latest Rust `nightly` toolchain and you want to downgrade to a specific nightly version,you must first uninstall the latest `nightly` toolchain. For example, you can remove the latest `nightly` toolchain, then use a specific version of the `nightly` toolchain by running commands similar to the following:\n\n    rustup uninstall nightly\n    rustup install nightly-<yyyy-MM-dd>\n    rustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>\n\n[](/install/troubleshoot-rust-issues/#ensure-path-is-set-correctly)\nEnsure PATH is set correctly\n------------------------------------------------------------------------------------------------\n\nIf after installing Rust the commands don't seem to work, showing errors such as `command not found: rustup`, make sure it your PATH is configured correctly.\n\nCurrently, the `rustup` installer installs by default to the bash profile (on mac). If you are using another shell, make sure to add this line to your profile (e.g. `.zshrc`):\n\n    source \"$HOME/.cargo/env\"\n\n[](/install/troubleshoot-rust-issues/#installing-cmake-or-protobuf-for-m1-macos-users)\nInstalling cmake or protobuf for M1 macOS users\n--------------------------------------------------------------------------------------------------------------------------------------\n\nCurrently, there are issues compiling the Substrate node when using the packages that are pre-installed on macOS computers with the M1 chip.\n\n    error: failed to run custom build command for prost-build v0.10.4\n\nIf you see this error, there are two solutions.\n\n*   Install `cmake` by running the following command:\n\n    brew install cmake\n\n*   Install the correct pre-compiled `protoc` by running the following set of commands:\n\n    git clone https://github.com/protocolbuffers/protobuf.git\n    cd protobuf\n    \n    brew install autoconf\n    brew install automake\n    brew install Libtool\n    \n    autoreconf -i\n    ./autogen.sh\n    ./configure\n    make\n    make check\n    sudo make install\n    \n    export PATH=/opt/usr/local/bin:$PATH\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/install/developer-tools/)\n[Next \u2192](/build/)\n\nON THIS PAGE\n\n[Check your current configuration](#check-your-current-configuration)\n[Use the nightly release channel for WebAssembly](#use-the-nightly-release-channel-for-webassembly)\n[Update the toolchain](#update-the-toolchain)\n[Use a specific nightly toolchain](#use-a-specific-nightly-toolchain)\n[Ensure PATH is set correctly](#ensure-path-is-set-correctly)\n[Installing cmake or protobuf for M1 macOS users](#installing-cmake-or-protobuf-for-m1-macos-users)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/accounts-addresses-keys/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nAccounts addresses keys\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/accounts-addresses-keys.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nAccounts, addresses, and keys\n=============================\n\nAn account represents an identity\u2014usually of a person or an organization\u2014that is capable of making transactions or holding funds. Although accounts are most often used to represent a person, that doesn't have to be the case. An account can be used to perform operations on behalf of a user or another entity, or to perform operations autonomously. In addition, any single person or entity could have multiple accounts for different purposes. For example, Polkadot is a Substrate-based blockchain that has specialized accounts for holding funds that are separate from accounts used for making transactions. How you implement and use accounts is entirely up to you as a blockchain or parachain developer.\n\n[](/learn/accounts-addresses-keys/#public-and-private-keys)\nPublic and private keys\n-----------------------------------------------------------------------------------\n\nIn general, every account has an owner who possesses a public and private key pair. The **private key** is a cryptographically-secure sequence of randomly-generated numbers. For human readability, the private key generates a random sequence of words called a **secret seed phrase** or **mnemonic**. The secret seed phrase is important because it can be used to recover access to an account if the private key is lost.\n\nFor most networks, the **public key** associated with an account is how that account is identified on the network and some form of it is used as the destination address for transactions. However, Substrate-based chains use the underlying public key to derive one or more **public addresses**. Instead of using the public key directly, Substrate allows you to generate multiple addresses and address formats for an account.\n\n[](/learn/accounts-addresses-keys/#address-encoding-and-chain-specific-addresses)\nAddress encoding and chain-specific addresses\n-------------------------------------------------------------------------------------------------------------------------------\n\nBy deriving multiple addresses from a single public key, you can interact with multiple chains without creating separate public and private key pairs for each network. By default, the addresses associated with the public key for an account use the Substrate [**SS58 address format**](/reference/glossary/#ss58-address-format)\n. The SS58 address format is an enhanced version of [base-58 encoding](https://datatracker.ietf.org/doc/html/draft-msporny-base58-01)\n. The important characteristics of the SS58 address format include:\n\n*   Encoded addresses consist of 58 alphanumeric characters, resulting in a shorter and more identifiable address than a hex-encoded address.\n*   Addresses don't use characters that can be difficult to distinguish from each other in a string. For example, the characters `0`, `O`, `I`, and `l` aren't used in SS58 addresses.\n*   Addresses can include a network-specific prefixes so you can use the same public key to derive addresses for different chains.\n*   Addresses can use derivation paths to create multiple addresses from the same public key so you can use different addresses for different purposes. For example, you can create sub-accounts for separating funds or executing specific types of transactions.\n*   Addresses can be verified using a checksum to prevent input errors.\n\n### [](/learn/accounts-addresses-keys/#inspecting-network-specific-addresses)\nInspecting network-specific addresses\n\nBecause a single public key can be used to derive addresses for different Substrate chains, a single account can have multiple chain-specific addresses. For example, if you inspect the addresses for the `alice` account public key `0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d` depends on the chain-specific address type.\n\n| Chain address type | Address |\n| --- | --- |\n| Polkadot (SS58) | 15oF4uVJwmo4TdGW7VfQxNLavjCXviqxT9S1MgbjMNHr6Sp5 |\n| Kusama (SS58) | HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F |\n| Generic Substrate chain (SS58) | 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY |\n\n### [](/learn/accounts-addresses-keys/#registering-for-a-network-specific-address)\nRegistering for a network-specific address\n\nEach Substrate-based blockchain can register a custom prefix to create a network-specific address type. For example, all Polkadot addresses start with `1`. All Kusama addresses start with a capital letter. All unregistered Substrate chains start with `5`.\n\nYou can look up the network-specific address for a public key using the `subkey inspect` command and `--network` command-line option or by using [Subscan](https://polkadot.subscan.io/tools/format_transform)\n.\n\nFor information about generating public and private key pairs and inspecting addresses, see [subkey](/reference/command-line-tools/subkey/)\n. For information about registering for a chain-specific address, see the instructions in the [SS58 repository](https://github.com/paritytech/ss58-registry)\n.\n\n[](/learn/accounts-addresses-keys/#account-information-in-frame)\nAccount information in FRAME\n---------------------------------------------------------------------------------------------\n\nConceptually, accounts represent identities that have a public/private key pair with one or more public addresses. However, in a runtime built with FRAME, an account is defined as a storage map with a 32-byte address identifier and corresponding account information, such as the number of transactions the account has made, the number of modules that depend on the account, and the account balance.\n\nThe account properties\u2014such as the `AccountId`\u2014can be defined generically in the `frame_system` module. The generic type is then resolved as a specific type in the runtime implementation, and eventually assigned a specific value. For example, the `Account` type in FRAME relies on an associated `AccountId` type. The `AccountId` type remains a generic type until it is assigned a type in the runtime implementation for a pallet that needs this information.\n\nFor more information about how accounts are defined in the `frame_system` pallet and the account properties in the `Account` storage map, see [Account data structures](/reference/account-data-structures/)\n. For more information about working with generic types, see [Rust for Substrate](/learn/rust-basics/#generic-types)\n.\n\n[](/learn/accounts-addresses-keys/#specialized-accounts)\nSpecialized accounts\n-----------------------------------------------------------------------------\n\nAs a flexible and module framework for blockchain development, Substrate itself doesn't require you to define or use any specific type of accounts. However, different chains can implement different rules for how accounts and the keys that control them are used. For example, you might implement specialized accounts if your application requires:\n\n*   custom cryptographic schemes\n*   complex or multi-user signing rules\n*   restricted access to specific functions\n*   restricted access to specific pallets\n\nIn most cases, specialized accounts are implemented in the context of a specific FRAME pallet, either in a prebuilt pallet like [Staking](https://paritytech.github.io/substrate/master/pallet_staking/index.html)\n or [Multisig](https://paritytech.github.io/substrate/master/pallet_multisig/index.html)\n or in custom pallets that you design.\n\nFor example, the Staking pallet takes an originating FRAME system account that wants to put up a bond and generates the **stash** and **controller** account abstractions to identify the account required to perform specific operations. You can see the implementation of these account abstractions in the Polkadot ecosystem. However, you can use the same framework to implement different account rules or account types or as inspiration for a custom pallet with its own account abstractions.\n\n### [](/learn/accounts-addresses-keys/#multi-signature-accounts)\nMulti-signature accounts\n\nTypically, an account has one and only one owner and that owner holds the private key for signing transactions. The Multisig pallet enables you to configure a specialized account for executing transactions that multiple account owners must approve. The multisig account is an address that has a public key, but no private key. The public address for the multisig account is derived from a deterministic list of the authorized account signatories and an associated transaction request block height and extrinsic index identifier.\n\nThe Multisig pallet enables multiple parties to share responsibility for executing certain transactions. Any account holder can specify the accounts that are allowed to approve a multi-signature transaction and the minimum number of approvals required for a call to be dispatched to the runtime.\n\n### [](/learn/accounts-addresses-keys/#proxy-and-keyless-accounts)\nProxy and keyless accounts\n\nThe Proxy pallet provides another way you can configure specialized accounts for a Substrate-based chain using FRAME. With proxy accounts, primary account owners can designate one or more other accounts to act on their behalf. Proxy accounts can be used to add a layer of security by isolating primary account funds from accounts assigned to specific roles that can complete tasks on behalf of the primary account.\n\nBy configuring one or more proxy account, an account owner can do the following:\n\n*   Specify up to a maximum number of proxy accounts that are allowed to submit transactions on behalf of a primary account owner.\n*   Configure time delays for transactions to be executed by each proxy.\n*   Set restrictions on the types of transactions that each proxy can issue.\n*   Announce transactions that are to be executed by a proxy before the transactions are executed.\n*   Cancel or reject announced transactions that are to be executed by a proxy.\n*   Create anonymous\u2014pure proxy\u2014accounts that have no private key and can act without account ownership through their own configured proxies.\n\n#### Runtime implementation\n\nAlthough the Proxy pallet provides this framework for configuring proxy accounts, the implementation details are up to you as a runtime developer. For example, the default Proxy pallet filters the calls a proxy account can dispatch based on the proxy type. However, the runtime implementation defines the proxy types and the transactions that each proxy type is allowed to execute. Polkadot enables you to restrict transactions for a proxy account using the following proxy types:\n\n*   Any\n*   NonTransfer\n*   Governance\n*   Staking\n*   IdentityJudgement\n*   CancelProxy\n*   Auction\n\nThe enumerated list of proxy types and the logic for matching proxy types to transaction is defined in the [Polkadot runtime](https://github.com/polkadot-fellows/runtimes/blob/main/relay/polkadot/src/lib.rs)\n.\n\n#### Anonymous proxy account\n\nThe anonymous or pure proxy account is a special type of proxy account with a randomly-generated address and no corresponding private key. Typically, you create this type of proxy account if you want to delegate permissions to an account that can dispatch function calls without your intervention and without access to your keys. After the new account with the delegated permissions is created, the account can be used as a recipient to burn funds or to hold tokens awaiting the execution of a transfer.\n\n[](/learn/accounts-addresses-keys/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------------\n\nIn Substrate, accounts require a public key and a private key to receive funds, sign transactions, and execute transactions. At a high level, there are three types of accounts:\n\n*   User accounts that enable end users to interact with the blockchain.\n*   Network accounts that provide additional security for validators and nominators by restricting some operations for staking and governance.\n*   Pallet accounts that are executed by valid **origins** to perform pallet-specific operations.\n\nFor more information about working with accounts, addresses, and keys, see the following resources:\n\n*   [SS58 trait implementation](https://paritytech.github.io/substrate/master/sp_core/crypto/trait.Ss58Codec.html)\n    \n*   [SS58 registry](https://github.com/paritytech/ss58-registry/)\n    \n*   [Command reference: subkey](/reference/command-line-tools/subkey/)\n    \n*   [Account data structures](/reference/account-data-structures/)\n    \n*   [Cryptography](/learn/cryptography/)\n    \n\n**Last edit:** February 16, 2024\n\n[\u2190 Previous](/learn/state-transitions-and-storage/)\n[Next \u2192](/learn/rust-basics/)\n\nON THIS PAGE\n\n[Public and private keys](#public-and-private-keys)\n[Address encoding and chain-specific addresses](#address-encoding-and-chain-specific-addresses)\n[Account information in FRAME](#account-information-in-frame)\n[Specialized accounts](#specialized-accounts)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/install/windows/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    *   [Rust toolchain](/install/rust-toolchain/)\n        \n    *   [Linux](/install/linux/)\n        \n    *   [macOS](/install/macos/)\n        \n    *   [Windows](/install/windows/)\n        \n    *   [Developer tools](/install/developer-tools/)\n        \n    *   [Troubleshoot Rust issues](/install/troubleshoot-rust-issues/)\n        \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Install](/install/)\nWindows\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/install/windows.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nWindows development environment\n===============================\n\nIn general, UNIX-based operating systems\u2014like macOS or Linux\u2014provide a better development environment for building Substrate-based blockchains. All of the code examples and command-line instructions in Substrate [Tutorials](/tutorials/)\n and [How-to guides](/reference/how-to-guides/)\n illustrate how to interact with Substrate using UNIX-compatible commands in a terminal.\n\nHowever, if your local computer uses Microsoft Windows instead of a UNIX-based operating system, you can configure it with additional software to make it a suitable development environment for building Substrate-based blockchains. To prepare a development environment on a computer running Microsoft Windows, you can use Windows Subsystem for Linux (WSL) to emulate a UNIX operating environment.\n\n[](/install/windows/#before-you-begin)\nBefore you begin\n-------------------------------------------------------\n\nBefore installing on Microsoft Windows, verify the following basic requirements:\n\n*   You have a computer running a supported version of the Microsoft Windows operating system.\n*   You must be running Microsoft Windows 10, version 2004 or later, or Microsoft Windows 11 to install Windows Subsystem for Linux on a computer with the Windows desktop operating system.\n*   You must be running Microsoft Windows Server 2019, or later, to install Windows Subsystem for Linux on a computer with the Windows server operating system.\n*   You have good internet connection and access to a shell terminal on your local computer.\n\n[](/install/windows/#set-up-windows-subsystem-for-linux)\nSet up Windows Subsystem for Linux\n-------------------------------------------------------------------------------------------\n\nWindows Subsystem for Linux (WSL) enables you to emulate a Linux environment on a computer that uses the Windows operating system. The primary advantage of this approach for Substrate development is that you can use all of the code and command-line examples as described in the Substrate documentation. For example, you can run common commands\u2014such as `ls` and `ps`\u2014unmodified. By using Windows Subsystem for Linux, you can avoid configuring a virtual machine image or a dual-boot operating system.\n\nTo prepare a development environment using Windows Subsystem for Linux:\n\n1.  Check your Windows version and build number to see if Windows Subsystem for Linux is enabled by default.\n    \n    If you have Microsoft Windows 10, version 2004 (Build 19041 and higher), or Microsoft Windows 11, Windows Subsystem for Linux is available by default and you can continue to the next step.\n    \n    If you have an older version of Microsoft Windows installed, see [WSL manual installation steps for older versions](https://docs.microsoft.com/en-us/windows/wsl/install-manual)\n    . If you are installing on an older version of Microsoft Windows, you can download and install WLS 2 if your computer has Windows 10, version 1903 or higher.\n    \n2.  Select Windows PowerShell or Command Prompt from the Start menu, right-click, then **Run as administrator**.\n3.  In the PowerShell or Command Prompt terminal, run the following command:\n    \n        wsl --install\n    \n    This command enables the required WSL 2 components that are part of the Windows operating system, downloads the latest Linux kernel, and installs the Ubuntu Linux distribution by default.\n    \n    If you want to review the other Linux distributions available, run the following command:\n    \n        wsl --list --online\n    \n4.  After the distribution is downloaded, close the terminal.\n5.  Click the Start menu, select **Shut down or sign out**, then click **Restart** to restart the computer.\n    \n    Restarting the computer is required to start the installation of the Linux distribution. It can take a few minutes for the installation to complete after you restart.\n    \n    For more information about setting up WSL as a development environment, see [Set up a WSL development environment](https://docs.microsoft.com/en-us/windows/wsl/setup/environment)\n    .\n    \n\n[](/install/windows/#install-required-packages-and-rust)\nInstall required packages and Rust\n-------------------------------------------------------------------------------------------\n\nTo install the Rust toolchain on WSL:\n\n1.  Click the Start menu, then select **Ubuntu**.\n2.  Type a UNIX user name to create user account.\n3.  Type a password for your UNIX user, then retype the password to confirm it.\n4.  Download the latest updates for the Ubuntu distribution using the Ubuntu Advanced Packaging Tool (`apt`) by running the following command:\n    \n        sudo apt update\n    \n5.  Add the required packages for the Ubuntu distribution by running the following command:\n    \n        sudo apt install --assume-yes git clang curl libssl-dev llvm libudev-dev make protobuf-compiler\n    \n6.  Download the `rustup` installation program and use it to install Rust for the Ubuntu distribution by running the following command:\n    \n        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    \n7.  Follow the prompts displayed to proceed with a default installation.\n8.  Update your current shell to include Cargo by running the following command:\n    \n        source ~/.cargo/env\n    \n9.  Verify your installation by running the following command:\n    \n        rustc --version\n    \n10.  Configure the Rust toolchain to use the latest stable version as the default toolchain by running the following commands:\n    \n        rustup default stable\n        rustup update\n    \n11.  Add the `nightly` version of the toolchain and the `nightly` WebAssembly (`wasm`) target to your development environment by running the following commands:\n    \n        rustup update nightly\n        rustup target add wasm32-unknown-unknown --toolchain nightly\n    \n12.  Verify the configuration of your development environment by running the following command:\n    \n        rustup show\n        rustup +nightly show\n    \n    The command displays output similar to the following:\n    \n        # rustup show\n        \n        active toolchain\n        ----------------\n        \n        stable-x86_64-unknown-linux-gnu (default)\n        rustc 1.61.0 (fe5b13d68 2022-05-18)\n        \n        # rustup +nightly show\n        \n        active toolchain\n        ----------------\n        \n        nightly-x86_64-unknown-linux-gnu (overridden by +toolchain on the command line)\n        rustc 1.63.0-nightly (e71440575 2022-06-02)\n    \n\n[](/install/windows/#compile-a-substrate-node)\nCompile a Substrate node\n-----------------------------------------------------------------------\n\nNow that you have Rust installed and the Rust toolchains configured for Substrate development, you are ready to finish setting up your development environment by cloning the Substrate **node template** files and compiling a Substrate node.\n\nThe node template provides a working environment that includes all of the most common features you need to build a blockchain without any extraneous modules or tools. To ensure that the node template offers a relatively stable working environment for you to experiment with, the recommended best practice is to clone Substrate node template from the Substrate Developer Hub repository, rather than from the core Substrate repository.\n\nTo compile the Substrate node template:\n\n1.  Clone the node template repository by running the following command:\n    \n        git clone https://github.com/substrate-developer-hub/substrate-node-template\n    \n    In most cases, you can clone the `main` branch to get the latest code. However, you can use the `--branch` command-line option if you want to work with a Substrate branch that is compatible with a specific Polkadot version. Click [Tags](https://github.com/substrate-developer-hub/substrate-node-template/tags)\n     to see the list of branches that are compatible with specific Polkadot versions.\n    \n2.  Change to the root of the node template directory by running the following command:\n    \n        cd substrate-node-template\n    \n    If you want to save your changes and make this branch easy to identify, you can create a new branch by running a command similar to the following:\n    \n        git switch -c my-wip-branch\n    \n3.  Compile the node template by running the following command:\n    \n        cargo build --release\n    \n    Because of the number of packages required, compiling the node can take several minutes.\n    \n\nAfter the build completes successfully, your local computer is ready for Substrate development activity.\n\n[](/install/windows/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------\n\nThe Substrate Developer Hub acts as a central portal for access to the many resources available to the community. Depending on your interests and learning style, you might prefer one avenue over another. For example, if you prefer to read source code and are familiar with Rust, you might want to start by digging into the [Rust API](https://paritytech.github.io/substrate/master)\n.\n\nHere are a few additional suggestions for where you can learn more.\n\n#### Tell me\n\n*   [Architecture](/learn/architecture/)\n    \n*   [Networks and blockchains](/learn/node-and-network-types/)\n    \n*   [Build process](/build/build-process/)\n    \n\n#### Guide me\n\n*   [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n    \n*   [Simulate a network](/tutorials/build-a-blockchain/simulate-network/)\n    \n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/install/macos/)\n[Next \u2192](/install/developer-tools/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Set up Windows Subsystem for Linux](#set-up-windows-subsystem-for-linux)\n[Install required packages and Rust](#install-required-packages-and-rust)\n[Compile a Substrate node](#compile-a-substrate-node)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/architecture/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nArchitecture\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/architecture.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nArchitecture and Rust libraries\n===============================\n\nAs noted in [Blockchain basics](/learn/blockchain-basics/)\n, a blockchain relies on a decentralized network of computers\u2014called nodes\u2014that communicate with each other.\n\nBecause the node is a core component of any blockchain, it\u2019s important to understand what makes a Substrate node unique, including the core services and libraries that are provided by default and how the node can be customized and extended to suit different project goals.\n\n[](/learn/architecture/#client-and-runtime)\nClient and runtime\n--------------------------------------------------------------\n\nAt a high level, a Substrate node consists of two main parts:\n\n*   A **core client** with **outer node services** that handles network activity such as peer discovery, managing transaction requests, reaching consensus with peers, and responding to RPC calls.\n*   A **runtime** that contains all of the business logic for executing the state transition function of the blockchain.\n\nThe following diagram illustrates this separation of responsibilities in simplified form to help you visualize the architecture and how Substrate provides a modular framework for building blockchains.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='897.4753018660813' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Substrate architecture](https://docs.substrate.io/static/ba5a48a1993a5eddabf1e91c3eb9974f/aec80/simplified-architecture.png)\n\n[](/learn/architecture/#client-outer-node-services)\nClient outer node services\n------------------------------------------------------------------------------\n\nThe core client includes several outer node services that are responsible for activity that takes place outside of the runtime. For example, the outer node service in the core client handle peer discovery, manage the transaction pool, communicate with other nodes to reach consensus, and respond to RPC requests from the outside world.\n\nSome of the most important activities that are handled by core client services involve the following components:\n\n*   [Storage](/learn/state-transitions-and-storage/)\n    : The outer node persists the evolving state of a Substrate blockchain using a simple and highly efficient key-value storage layer.\n*   [Peer-to-peer networking](/learn/networks-and-nodes/)\n    : The outer node uses the Rust implementation of the [`libp2p` network stack](https://libp2p.io/)\n     to communicate with other network participants.\n*   [Consensus](/learn/consensus/)\n    : The outer node communicates with other network participants to ensure they agree on the state of the blockchain.\n*   [Remote procedure call (RPC) API](/build/remote-procedure-calls/)\n    : The outer node accepts inbound HTTP and WebSocket requests to allow blockchain users to interact with the network.\n*   [Telemetry](/maintain/monitor/)\n    : The outer node collects and provides access to node metrics through an embedded [Prometheus](https://prometheus.io/)\n     server.\n*   [Execution environment](/build/build-process/)\n    : The outer node is responsible for selecting the execution environment\u2014WebAssembly or native Rust\u2014for the runtime to use then dispatching calls to the runtime selected.\n\nSubstrate provides default implementations for handling these activities through its core blockchain components. In principle, you can modify or replace the default implementation of any component with your own code. In practice, it's rare for an application to require changes to any of the underlying blockchain features, but Substrate allows you to make changes so you are free to innovate where you see fit.\n\nPerforming these tasks often requires the client node services to communicate with the runtime. This communication is handled by calling specialized [runtime APIs](/reference/runtime-apis/)\n.\n\n[](/learn/architecture/#runtime)\nRuntime\n----------------------------------------\n\nThe runtime determines whether transactions are valid or invalid and is responsible for handling changes to the blockchain state. Requests coming from the outside come through the client into the runtime, and the runtime is responsible for the state transition functions and storing the resulting state.\n\nBecause the runtime executes the functions it receives, it controls how transactions are included in blocks and how blocks are returned to the outer node for gossiping or importing to other nodes. In essence, the runtime is responsible for handling everything that happens on-chain. It is also the core component of the node for building Substrate blockchains.\n\nThe Substrate runtime is designed to compile to [WebAssembly (Wasm)](/reference/glossary/#webassembly-wasm)\n byte code. This design decision enables:\n\n*   Support for forkless upgrades.\n*   Multi-platform compatibility.\n*   Runtime validity checking.\n*   Validation proofs for relay chain consensus mechanisms.\n\nSimilar to how the outer node has a way to provide information to the runtime, the runtime uses specialized [host functions](https://paritytech.github.io/substrate/master/sp_io/index.html)\n to communicate with the outer node or the outside world.\n\n[](/learn/architecture/#core-libraries)\nCore libraries\n------------------------------------------------------\n\nTo keep things simple in the node template, many aspects of the blockchain are configured with a default implementation. For example, there are default implementations of the networking layer, database, and consensus mechanism that you can use as-is to get your blockchain running without a lot of customization. However, the libraries underlying the basic architecture provide a great deal of flexibility for defining your own blockchain components.\n\nMuch like the node consists of two main parts\u2014the core client and the runtime\u2014that provide different services, the Substrate libraries are divided into three main areas of responsibility:\n\n*   Core client libraries for outer node services.\n*   FRAME libraries for the runtime.\n*   Primitive libraries for underlying functions and interfaces for communication between the libraries.\n\nThe following diagram illustrates how the libraries mirror the core client outer node and runtime responsibilities and how the library of **primitives** provides the communication layer between the two.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1145' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Core node libraries for the outer node and runtime](https://docs.substrate.io/static/dae77f7ece855ad265b5c93651f4881b/c337e/libraries.png)\n\n### [](/learn/architecture/#core-client-libraries)\nCore client libraries\n\nThe libraries that enable a Substrate node to handle its network responsibilities, including consensus and block execution are Rust crates that use the `sc_` prefix in the crate name. For example, the [`sc_service`](https://paritytech.github.io/substrate/master/sc_service/index.html)\n library is responsible for building the networking layer for Substrate blockchains, managing the communication between the network participants and the transaction pool.\n\n### [](/learn/architecture/#frame-libraries-for-the-runtime)\nFRAME libraries for the runtime\n\nThe libraries that enable you to build the runtime logic and to encode and decode the information passed into and out of the runtime are Rust crates that use the `frame_` prefix in the crate name.\n\nThe `frame_*` libraries provide the infrastructure for the runtime. For example, the [`frame_system`](https://paritytech.github.io/substrate/master/frame_system/index.html)\n library provides a basic set of functions for interacting with other Substrate components and[`frame_support`](https://paritytech.github.io/substrate/master/frame_support/index.html)\n enables you to declare runtime storage items, errors, and events.\n\nIn addition to the infrastructure provided by the `frame_*` libraries, the runtime can include one or more `pallet_*` libraries. Each Rust crate that uses the `pallet_` prefix represents a single FRAME module. In most cases, you use the `pallet_*` libraries to assemble the functionality you want to incorporate in the blockchain to suit your project.\n\nYou can build a Substrate runtime without using the `frame_*` or `pallet_*` libraries using the **primitives** libraries. However, the `frame_*` or `pallet_*` libraries provide the most efficient path to composing a Substrate runtime.\n\n### [](/learn/architecture/#primitive-libraries)\nPrimitive libraries\n\nAt the lowest level of the Substrate architecture, there are primitive libraries that give you control over underlying operations and enable communication between the core client services and the runtime. The primitive libraries are Rust crates that use the `sp_` prefix in the crate name.\n\nThe primitive libraries provide the lowest level of abstraction to expose interfaces that the core client or the runtime can use to perform operations or interact with each other.\n\nFor example:\n\n*   The [`sp_arithmetic`](https://paritytech.github.io/substrate/master/sp_arithmetic/index.html)\n     library defines fixed point arithmetic primitives and types for the runtime to use.\n*   The [`sp_core`](https://paritytech.github.io/substrate/master/sp_core/index.html)\n     library provides a set of shareable Substrate types.\n*   The [`sp_std`](https://paritytech.github.io/substrate/master/sp_std/index.html)\n     library exports primitives from the Rust standard library to make them usable with any code that depends on the runtime.\n\n[](/learn/architecture/#modular-architecture)\nModular architecture\n------------------------------------------------------------------\n\nThe separation of the core Substrate libraries provides a flexible and modular architecture for writing the blockchain logic. The primitives library provides a foundation that both the core client and the runtime can build on without communicating directly with each other. Primitive types and traits are exposed in their own separate crates, so they are available to the outer node services and runtime components without introducing cyclic dependency issues.\n\n[](/learn/architecture/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------\n\nNow that you are familiar with the architecture and libraries used to build and interact with Substrate nodes, you might want to explore the libraries in more depth. To learn more about the technical details for any library, you should review the [Rust API](https://paritytech.github.io/substrate/master/)\n documentation for that library.\n\n**Last edit:** August 9, 2023\n\n[\u2190 Previous](/learn/blockchain-basics/)\n[Next \u2192](/learn/networks-and-nodes/)\n\nON THIS PAGE\n\n[Client and runtime](#client-and-runtime)\n[Client outer node services](#client-outer-node-services)\n[Runtime](#runtime)\n[Core libraries](#core-libraries)\n[Modular architecture](#modular-architecture)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/blockchain-basics/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nBlockchain basics\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/blockchain-basics.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nBlockchain basics\n=================\n\nA blockchain is a decentralized ledger that records information in a sequence of blocks. The information contained in a block is an ordered set of instructions that might result in a change in state.\n\nIn a blockchain network, individual computers\u2014called nodes\u2014communicate with each other to form a decentralized peer-to-peer (P2P) network. There is no central authority that controls the network and, typically, each node that participates in block production stores a copy of the blocks that make up the canonical chain.\n\nIn most cases, users interact with a blockchain by submitting a request that might result in a change in state, for example, a request to change the owner of a file or to transfer funds from one account to another. These transactions requests are gossiped to other nodes on the network and assembled into a block by a block author. To ensure the security of the data on the chain and the ongoing progress of the chain, the nodes use some form of consensus to agree on the state of the data in each block and on the order of transactions executed.\n\n[](/learn/blockchain-basics/#what-is-a-blockchain-node)\nWhat is a blockchain node?\n----------------------------------------------------------------------------------\n\nAt a high level, all blockchain nodes require the following core components:\n\n*   Data storage for the state changes recorded as a result of transactions.\n*   Peer-to-peer networking for decentralized communication between nodes.\n*   Consensus methodology to protect against malicious activity and ensure the ongoing progress of the chain.\n*   Logic for ordering and processing incoming transactions.\n*   Cryptography for generating hash digests for blocks and for signing and verifying the signatures associated with transactions.\n\nBecause of the complexity involved in building the core components a blockchain requires, most blockchain projects start with a complete copy of an existing blockchain code base so that developers can modify existing code to add new features instead of writing everything from scratch. For example, the Bitcoin repository was forked to create Litecoin, ZCash, Namecoin and Bitcoin Cash. Similarly, the Ethereum repository was forked to create Quorum, POA Network, KodakCoin, and Musicoin.\n\nHowever, most blockchain platforms are not designed to allow for modification or customization. As a result, building a new blockchain by forking has serious limitations, including limitations such as scalability that are inherent in the originating blockchain code. Before you explore how Substrate alleviates many of the limitations associated with other blockchain projects, it's important to understand some of the common properties that most blockchains share. By learning about how most blockchains operate, you'll be better prepared to see how Substrate provides alternatives and capabilities for building a blockchain best suited to your needs.\n\n[](/learn/blockchain-basics/#state-transitions-and-conflicts)\nState transitions and conflicts\n---------------------------------------------------------------------------------------------\n\nA blockchain is essentially a [state machine](https://en.wikipedia.org/wiki/Finite-state_machine)\n. At any point in time, the blockchain has a current internal state. As inbound transactions are executed, they result in changes to state so the blockchain must transition from its current state to a new state. However, there can be multiple valid transitions that would result in different future states, and the blockchain must select a single state transition that can be agreed upon. To agree on the state after a transition, all operations within a blockchain must be deterministic. For the chain to progress successfully, a majority of the nodes must agree on all of the state transitions, including:\n\n*   The initial state of the chain, called the genesis state or genesis block.\n*   The series of state transitions that result from executed transactions that are recorded in each block.\n*   A final state for the block to be included in the chain.\n\nIn centralized networks, a central authority can choose between mutually exclusive state transitions. For example, a server configured as the primary authority might record changes to state transition in the order it sees them or use a weighting process to choose between competing alternatives when a conflict arises. In a decentralized network, the nodes see transactions in different orders, so they must use a more elaborate method to select transactions and choose between conflicting state transition.\n\nThe method that a blockchain uses to batch transactions into blocks and to select which node can submit a block to the chain is called the blockchain's consensus model or consensus algorithm. The most commonly-used consensus model is called the proof-of-work consensus model. With the proof-of-work consensus model, the node that completes a computational problem first has the right to submit a block to the chain.\n\nFor a blockchain to be fault tolerant and provide a consistent view of state even if some nodes are compromised by malicious actors or network outages, some consensus models require at least two-thirds of the nodes to agree on state at all time. This two-thirds majority ensures that the network is fault tolerant and can withstand some network participants behaving badly, regardless of whether the behavior is intentional or accidental.\n\n[](/learn/blockchain-basics/#blockchain-economics)\nBlockchain economics\n-----------------------------------------------------------------------\n\nAll blockchains require resources\u2014processors, memory, storage, and network bandwidth\u2014to perform operations. The computers that participate in the network\u2014the nodes that produce blocks\u2014provide these resources to blockchain users. The nodes create a distributed, decentralized network that serves the needs of a community of participants.\n\nTo support a community and make a blockchain sustainable, most blockchains require users to pay for the network resources they use in the form of transaction fees. The payment of transaction fees requires user identities to be associated with accounts that hold assets of some type. Blockchains typically use tokens to represent the value of assets in an account and network participants purchase tokens outside of the chain through an exchange. Network participants can then deposit the tokens to enable them to pay for transactions.\n\n[](/learn/blockchain-basics/#blockchain-governance)\nBlockchain governance\n-------------------------------------------------------------------------\n\nSome blockchains allow network participants to submit and vote on proposals that affect network operations or the blockchain community. By submitting and voting on proposals\u2014referenda\u2014the blockchain community can determine how the blockchain evolves in an essentially democratic process. On-chain governance is relatively rare, however, and to participate, a blockchain might require users to maintain a significant stake of tokens in an account or to be selected as a representative for other users.\n\n[](/learn/blockchain-basics/#applications-running-on-a-blockchain)\nApplications running on a blockchain\n-------------------------------------------------------------------------------------------------------\n\nApplications that run on a blockchain\u2014often referred to as decentralized applications or dApps\u2014are typically web applications that are written using front-end frameworks but with backend **smart contracts** for changing the blockchain state.\n\nA smart contract is a program that runs on a blockchain and executes transactions on behalf of users under specific conditions. Developers can write smart contracts to ensure that the outcome of programmatically-executed transactions is recorded and can't be tampered with. Yet, with smart contracts alone, developers don't have access to some underlying blockchain functionality\u2014such as the consensus, storage, or transaction layers\u2014and instead, abide by a chain's fixed rules and restrictions. Smart contract developers often accept these limitations as a tradeoff that enables faster development time with fewer core design decisions to make.\n\n[](/learn/blockchain-basics/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------\n\nAll blockchains share some common characteristics. Substrate\u2014while not a blockchain itself\u2014is a blockchain builders' toolkit with a modular framework of components to create a custom blockchain. With Substrate, you can take the common blockchain components\u2014like storage and consensus and cryptography\u2014and combine them to use the functions they provide as-is or modify them to suit the purpose of your project.\n\nYou can explore the following resources to learn more.\n\n#### Tell me\n\n*   [Learn](/learn/)\n    \n*   [Welcome to Substrate](/learn/welcome-to-substrate/)\n    \n*   [Architecture and Rust libraries](/learn/architecture/)\n    \n*   [Networks and blockchains](/learn/node-and-network-types/)\n    \n\n#### Guide me\n\n*   [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n    \n*   [Simulate a network](/tutorials/build-a-blockchain/simulate-network/)\n    \n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n\n**Last edit:** October 10, 2023\n\n[\u2190 Previous](/learn/welcome-to-substrate/)\n[Next \u2192](/learn/architecture/)\n\nON THIS PAGE\n\n[What is a blockchain node?](#what-is-a-blockchain-node)\n[State transitions and conflicts](#state-transitions-and-conflicts)\n[Blockchain economics](#blockchain-economics)\n[Blockchain governance](#blockchain-governance)\n[Applications running on a blockchain](#applications-running-on-a-blockchain)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/cryptography/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nCryptography\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/cryptography.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nCryptography\n============\n\nCryptography is what provides the mathematical verifiableness behind consensus systems, data integrity, and user security. While understanding the fundamental overarching applications of cryptography as they relate to blockchain is essential for the average developer, the underlying mathematical processes themselves are not necessarily relevant. This page provides the base context for the various implementations of cryptography across Parity and the ecosystem more broadly.\n\n[](/learn/cryptography/#hash-functions)\nHash functions\n------------------------------------------------------\n\n**Hashing** is a mathematical process that creates a one-to-one mapping between any piece of data and a 32 byte reference, using 2 random and unique numerical inputs between zero and the 255 power. Using hash functions, any data, including simple text, images, or any other form of file is given a distinct and entirely unique identifier. Hashing is used for verifying data integrity, creating digital signatures, and providing a secure way to store passwords. This form of mapping is known as the 'pigeonhole principle', and it is primarily implemented to efficiently and verifiably identify data from large sets.\n\nThese functions are **deterministic**, meaning that the same input will always produce the same output. This is important for ensuring that two different computers can agree on the same data. They can be designed to be fast or slow, depending on the purpose. Fast hash functions are used when speed is important, while slow hash functions are used when security is the priority. Slow hash functions are also used to mitigate the success of brute force attacks by increasing the amount of work required to find the data.\n\n### [](/learn/cryptography/#collision-resistance)\nCollision resistance\n\nIn blockchain, hash functions are also used to provide **collision resistance**. These are performed by an attacker that calculates or controls both numerical inputs, attempting to find two identical values in order to gain access to an encrypted object. With partial collisions, a similar method is applied, but is only attempting to find two values that share the first few bits instead of the entirety.\n\nWhile only implementing partial collision resistance is computationally lighter weight and provides fairly strong protections against the possibility of collisions, it is a less-secure option when facing well resourced adversaries such as nation-states, as it is significantly easier to brute-force past the first few digits with a significant amount of computational power. That said, it is acceptable with an average attack vector (i.e, rogue actors).\n\n### [](/learn/cryptography/#blake2)\nBlake2\n\nWhen engineering a new blockchain protocol or ecosystem, it is important to consider the computational costs of the cryptography method being used. Prioritising efficiency and processor loads, Substrate utilises Blake2.\n\nBlake2 is a relatively recent hashing method that provides equal or greater security than SHA2, while also being significantly faster than other comparable algorithms. While determining the exact benchmark of it's speed improvements over other hashing methods is highly dependent on hardware specifications, the biggest positive implication for Substrate is how it heavily reduces the amount of time and resources a new node will need in order to sync with the chain, and to a lesser extent, lower required time for validating.\n\nFor a comprehensive view of Blake2, see their [official document](https://www.blake2.net/blake2.pdf)\n.\n\n[](/learn/cryptography/#types-of-cryptography)\nTypes of cryptography\n--------------------------------------------------------------------\n\nThere are two different ways that cryptographic algorithms are implemented: **symmetric cryptography**, and **asymmetric cryptography**.\n\n### [](/learn/cryptography/#symmetric-cryptography)\nSymmetric cryptography\n\n**Symmetric encryption** is a branch of cryptography that is not based on one-way functions, unlike asymmetric cryptography. It uses the same cryptographic key for both the encryption of plain text and the decryption of the resulting ciphertext.\n\nSymmetric cryptography is the type of encryption that has been used throughout history, such as the Enigma Cipher and the Caesar Cipher. It is still widely used today, and can be found in web2 and web3 applications alike. There is only one single key, and requires a recipient to also have access to it in order to access the contained information.\n\n### [](/learn/cryptography/#asymmetric-cryptography)\nAsymmetric cryptography\n\n**Asymmetric encryption** is a type of cryptography which uses two different keys, known as a keypair: a public key, used to encrypt plain text, and a private counterpart, used to decrypt the cipher text.\n\nThe public key is used to encrypt a fixed length message that can only be decrypted with the recipient's private key and, at times, a set password. The public key can be used to cryptographically verify that the corresponding private key was used to create a piece of data without compromising the private key itself, such as with **digital signatures**. This has obvious implications for identity, ownership and properties, and is used in many different protocols across both web2 and web3.\n\n### [](/learn/cryptography/#trade-offs-and-compromises)\nTrade-offs and compromises\n\nSymmetric cryptography is faster and requires fewer bits in the key to achieve the same level of security that asymmetric cryptography provides. However, it requires a shared secret before communication can take place, which poses issues to it's integrity and a potential compromise point. Asymmetric cryptography, on the other hand, does not require the secret to be shared ahead of time, allowing for far better end-user security.\n\nHybrid symmetric and asymmetric cryptography is often used to overcome the engineering issues of asymmetric cryptography, as it is slower and requires more bits in the key to achieve the same level of security. It is used to encrypt a key, and then use the comparatively lightweight symmetric cipher to do the 'heavy lifting' with the message.\n\n[](/learn/cryptography/#digital-signatures)\nDigital signatures\n--------------------------------------------------------------\n\nDigital signatures are a way of verifying the authenticity of a document or message using asymmetric keypairs. They are used to ensure that a sender or signer's document or message has not been tampered with in transit, and for recipients to verify said data is accurate and from the expected sender.\n\nSigning digital signatures only requires a low level understanding of mathematics and cryptography. For a conceptual example -- when signing a check, it is expected that the check cannot be cashed multiple times. This is not a feature of the signature system, but rather the check serialization system. The bank will check that the serial number on the check has not already been used. Digital signatures essentially combines these two concepts, allowing the _signature itself_ to provide the serialization via a unique cryptographic fingerprint that cannot be reproduced.\n\nUnlike with a pen and paper signatures, knowledge of the digital signature cannot be used to create other signatures. Digital signatures are often used in bureaucratic processes, as they are more secure than simply scanning in a signature and pasting it onto a document.\n\nSubstrate provides multiple different cryptographic schemes and is generic such that it can support anything which implements the [`Pair` trait](https://paritytech.github.io/substrate/master/sp_core/crypto/trait.Pair.html)\n.\n\n[](/learn/cryptography/#elliptic-curve)\nElliptic Curve\n------------------------------------------------------\n\nBlockchain technology requires the ability to have multiple keys creating a signature for block proposal and validation. To this end, Elliptic Curve Digital Signature Algorithm (ECDSA) and Schnorr signatures are two of the most commonly used methods. While ECDSA are a far simpler implementation, Schnorr signatures are more efficient when it comes to multi-signatures.\n\nSchnorr signatures bring some noticeable features over the [ECDSA](/learn/cryptography/#ecdsa)\n/EdDSA schemes:\n\n*   It is better for hierarchical deterministic key derivations.\n*   It allows for native multi-signature through [signature aggregation](https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/)\n    .\n*   It is generally more resistant to misuse.\n\nOne sacrifice that is made when using Schnorr signatures over ECDSA is that both require 64 bytes, but only ECDSA signatures communicate their public key.\n\n### [](/learn/cryptography/#various-implementations)\nVarious implementations\n\n#### ECDSA\n\nSubstrate provides an [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm)\n signature scheme using the [secp256k1](https://en.bitcoin.it/wiki/Secp256k1)\n curve. This is the same cryptographic algorithm used to secure [Bitcoin](https://en.wikipedia.org/wiki/Bitcoin)\n and [Ethereum](https://en.wikipedia.org/wiki/Ethereum)\n.\n\n#### Ed25519\n\n[Ed25519](https://en.wikipedia.org/wiki/EdDSA#Ed25519)\n is an EdDSA signature scheme using [Curve25519](https://en.wikipedia.org/wiki/Curve25519)\n. It is carefully engineered at several levels of design and implementation to achieve very high speeds without compromising security.\n\n#### SR25519\n\n[SR25519](https://research.web3.foundation/Polkadot/security/keys/accounts-more)\n is based on the same underlying curve as [Ed25519](/learn/cryptography/#ed25519)\n. However, it uses Schnorr signatures instead of the EdDSA scheme.\n\n[](/learn/cryptography/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------\n\n*   [Cryptography on Polkadot](https://wiki.polkadot.network/docs/en/learn-cryptography)\n    .\n*   [Research at W3F: Cryptography](https://research.web3.foundation/crypto)\n    .\n*   [`Hash`](https://paritytech.github.io/substrate/master/sp_runtime/traits/trait.Hash.html)\n     trait for implementing new hashing algorithms.\n*   [`Pair`](https://paritytech.github.io/substrate/master/sp_core/crypto/trait.Pair.html)\n     trait for implementing new cryptographic schemes.\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/learn/light-clients-in-substrate-connect/)\n[Next \u2192](/learn/consensus/)\n\nON THIS PAGE\n\n[Hash functions](#hash-functions)\n[Types of cryptography](#types-of-cryptography)\n[Digital signatures](#digital-signatures)\n[Elliptic Curve](#elliptic-curve)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/consensus/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nConsensus\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/consensus.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nConsensus\n=========\n\nAll blockchains require some type of consensus mechanism to agree on the blockchain state. Because Substrate provides a modular framework for building blockchains, it supports a few different models for nodes to reach consensus. In general, different consensus models have different trade-offs, so selecting the type of consensus you want to use for your chain is an important consideration. The consensus models that Substrate supports by default require minimal configuration, but it's also possible to build a custom consensus model, if needed.\n\n[](/learn/consensus/#consensus-in-two-phases)\nConsensus in two phases\n---------------------------------------------------------------------\n\nUnlike some blockchains, Substrate splits the requirement to reach consensus into two separate phases:\n\n*   **Block authoring** is the process nodes use to create new blocks.\n*   **Block finalization** is the process used to handle forks and choose the **canonical** chain.\n\n[](/learn/consensus/#block-authoring)\nBlock authoring\n-----------------------------------------------------\n\nBefore you can reach consensus, some nodes in the blockchain network must be able to produce new blocks. How the blockchain decides the nodes that are authorized to author blocks depends on which consensus model you're using. For example, in a centralized network, a single node might author all the blocks. In a completely decentralized network without any trusted nodes, an algorithm must select the block author at each block height.\n\nFor a Substrate-based blockchain, you can choose one of the following block authoring algorithms or create your own:\n\n*   Authority-based round-robin scheduling ([Aura](/reference/glossary/#authority-round-aura)\n    ).\n*   Blind assignment of blockchain extension ([BABE](/reference/glossary/#blind-assignment-of-blockchain-extension-babe)\n    ) slot-based scheduling.\n*   Proof of work computation-based scheduling.\n\nThe Aura and BABE consensus models require you to have a known set of **validator nodes** that are permitted to produce blocks. In both of these consensus models, time is divided up into discrete slots. During each slot only some of the validators can produce a block. In the Aura consensus model, validators that can author blocks rotate in a round-robin fashion. In the BABE consensus model, validators are selected based on a verifiable random function (VRF) as opposed to the round-robin selection method.\n\nIn proof-of-work consensus models, any node can produce a block at any time if the node has solved a computationally-intensive problem. Solving the problem takes CPU time, and thus nodes can only produce blocks in proportion with their computing resources. Substrate provides a proof-of-work block production engine.\n\n[](/learn/consensus/#finalization-and-forks)\nFinalization and forks\n-------------------------------------------------------------------\n\nAs a primitive, a block contains a header and [transactions](/learn/transaction-types/)\n. Each block header contains a reference to its parent block, so you can trace the chain back to its genesis. Forks occur when two blocks reference the same parent. Block finalization is a mechanism that resolves forks such that only the canonical chain exists.\n\nA fork choice rule is an algorithm that selects the best chain that should be extended. Substrate exposes this fork choice rule through the [`SelectChain`](https://paritytech.github.io/substrate/master/sp_consensus/trait.SelectChain.html)\n trait. You can use the trait to write your custom fork choice rule, or use [GRANDPA](https://github.com/w3f/consensus/blob/master/pdf/grandpa.pdf)\n, the finality mechanism used in Polkadot and similar chains.\n\nIn the GRANDPA protocol, the longest chain rule simply says that the best chain is the longest chain. Substrate provides this chain selection rule with the [`LongestChain`](https://paritytech.github.io/substrate/master/sc_consensus/struct.LongestChain.html)\n struct. GRANDPA uses the longest chain rule in its voting mechanism.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='968.421052631579' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Longest chain rule](https://docs.substrate.io/static/e6863a42bc2c496b4a0eeefd969d93f4/85c34/consensus-longest.png)\n\nOne disadvantage of the longest chain rule is that an attacker could create a chain of blocks that outpaces the network and effectively hijack the main chain. The Greedy Heaviest Observed SubTree (GHOST) rule says that, starting at the genesis block, each fork is resolved by choosing the heaviest branch that has the most blocks built on it.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1030.3886925795055' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![GHOST rule](https://docs.substrate.io/static/3a4345cd135b5201993824e71dc29a7a/c56c8/consensus-ghost.png)\n\nIn this diagram, the heaviest chain is the fork that has accumulated most blocks built on top of it. If you are using the GHOST rule for chain selection, this fork would be selected as the main chain even though it has fewer blocks than the longest chain fork.\n\n[](/learn/consensus/#deterministic-finality)\nDeterministic finality\n-------------------------------------------------------------------\n\nIt's natural for users to want to know when transactions are finalized and signaled by some event such as a receipt delivered or papers signed. However, with the block authoring and fork choice rules described so far, transactions are never entirely finalized. There is always a chance that a longer or heavier chain might revert a transaction. However, the more blocks are built on top of a particular block, the less likely it is to ever be reverted. In this way, block authoring along with a proper fork choice rule provides **probabilistic finality**.\n\nIf your blockchain requires deterministic finality, you can add a finality mechanism to the blockchain logic. For example, you can have members of a fixed authority set cast **finality** votes. When enough votes have been cast for a certain block, the block is deemed final. In most blockchains, this threshold is two-thirds. Blocks that have been finalized cannot be reverted without external coordination such as a hard fork.\n\nIn some consensus models, block production and block finality are combined, and a new block `N+1` cannot be authored until block `N` is finalized. As you've seen, in Substrate, the two processes are isolated from one another. By separating block authoring from block finalization, Substrate enables you to use any block authoring algorithm with probabilistic finality or combine it with a finality mechanism to achieve deterministic finality.\n\nIf your blockchain uses a finality mechanism, you must modify the fork choice rule to consider the results of the finality vote. For example, instead of taking the longest chain period, a node would take the longest chain that contains the most recently finalized block.\n\n[](/learn/consensus/#default-consensus-models)\nDefault consensus models\n-----------------------------------------------------------------------\n\nAlthough you can implement your own consensus mechanism, the [Substrate node template](https://github.com/substrate-developer-hub/substrate-node-template)\n includes Aura for block authoring and GRANDPA finalization by default. Substrate also provides implementations of BABE and proof-of-work consensus models.\n\n### [](/learn/consensus/#aura)\nAura\n\n[Aura](https://paritytech.github.io/substrate/master/sc_consensus_aura/index.html)\n provides a slot-based block authoring mechanism. In Aura a known set of authorities take turns producing blocks.\n\n### [](/learn/consensus/#babe)\nBABE\n\n[BABE](https://paritytech.github.io/substrate/master/sc_consensus_babe/index.html)\n provides slot-based block authoring with a known set of validators and is typically used in proof-of-stake blockchains. Unlike Aura, slot assignment is based on the evaluation of a Verifiable Random Function (VRF). Each validator is assigned a weight for an _epoch._ This epoch is broken up into slots and the validator evaluates its VRF at each slot. For each slot that the validator's VRF output is below its weight, it is allowed to author a block.\n\nBecause multiple validators might be able to produce a block during the same slot, forks are more common in BABE than they are in Aura, even in good network conditions.\n\nSubstrate's implementation of BABE also has a fallback mechanism for when no authorities are chosen in a given slot. These secondary slot assignments allow BABE to achieve a constant block time.\n\n### [](/learn/consensus/#proof-of-work)\nProof of work\n\n[Proof-of-work](https://paritytech.github.io/substrate/master/sc_consensus_pow/index.html)\n block authoring is not slot-based and does not require a known authority set. In proof of work, anyone can produce a block at any time, so long as they can solve a computationally challenging problem (typically a hash preimage search). The difficulty of this problem can be tuned to provide a statistical target block time.\n\n### [](/learn/consensus/#grandpa)\nGRANDPA\n\n[GRANDPA](https://paritytech.github.io/substrate/master/sc_consensus_grandpa/index.html)\n provides block finalization. It has a known weighted authority set like BABE. However, GRANDPA does not author blocks. It just listens to gossip about blocks that have been produced by block authoring nodes. GRANDPA validators vote on _chains,_ not _blocks,_. GRANDPA validators vote on a block that they consider best and their votes are applied transitively to all previous blocks. After two-thirds of the GRANDPA authorities have voted for a particular block, it is considered final.\n\nAll deterministic finality algorithms, including GRANDPA, require at least `2f + 1` non-faulty nodes, where `f` is the number of faulty or malicious nodes. Learn more about where this threshold comes from and why it is ideal in the seminal paper [Reaching Agreement in the Presence of Faults](https://lamport.azurewebsites.net/pubs/reaching.pdf)\n or on [Wikipedia: Byzantine Fault](https://en.wikipedia.org/wiki/Byzantine_fault)\n.\n\nNot all consensus protocols define a single, canonical chain. Some protocols validate [directed acyclic graphs](https://en.wikipedia.org/wiki/Directed_acyclic_graph)\n (DAG) when two blocks with the same parent do not have conflicting state changes. See [AlephBFT](https://github.com/aleph-zero-foundation/aleph-node)\n for such an example.\n\n[](/learn/consensus/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------\n\n*   [BABE research](https://research.web3.foundation/Polkadot/protocols/block-production/Babe)\n    \n*   [GRANDPA research](https://research.web3.foundation/Polkadot/protocols/finality)\n    \n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/learn/cryptography/)\n[Next \u2192](/learn/xcm-communication/)\n\nON THIS PAGE\n\n[Consensus in two phases](#consensus-in-two-phases)\n[Block authoring](#block-authoring)\n[Finalization and forks](#finalization-and-forks)\n[Deterministic finality](#deterministic-finality)\n[Default consensus models](#default-consensus-models)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/offchain-operations/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nOffchain operations\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/offchain-operations.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nOffchain operations\n===================\n\n**\u26a0\ufe0f WARNING:** This page contains potentially outdated information. Reading it might still be useful, yet we suggest taking it with a grain of salt.\n\nPlease refer to the [\\`polkadot-sdk-docs\\` crate](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/reference_docs/frame_offchain_workers/index.html)\n for the most up-to-date documentation on this topic.\n\nThere are many use cases where you might want to query data from an offchain source or process data without using on-chain resources before updating the on-chain state. The conventional way of incorporating offchain data involves connecting to [oracles](/reference/glossary/#oracle)\n to supply the data from some traditional source. Although using oracles is one approach to working with offchain data sources, there are limitations to the security, scalability, and infrastructure efficiency that oracles can provide.\n\nTo make the offchain data integration more secure and efficient, Substrate supports offchain operations through the following features:\n\n*   **Offchain workers** are a subsystem of components that enable the execution of long-running and possibly non-deterministic tasks, such as:\n    \n    *   website service requests\n    *   encryption, decryption, and signing of data\n    *   random number generation\n    *   CPU-intensive computations\n    *   enumeration or aggregation of on-chain data\n    \n    Offchain workers enable you to move tasks that might require more time to execute than allowed out of the block processing pipeline. Any task that might take longer than the maximum block execution time allowed is a reasonable candidate for offchain processing.\n    \n*   **Offchain storage** is storage that is local to a Substrate node and can be accessed by both offchain workers and on-chain logic:\n    \n    *   Offchain workers have both read and write access to offchain storage.\n    *   On-chain logic has write access through offchain indexing but doesn't have read access. The offchain storage allows different worker threads to communicate with each other and to store user-specific or node-specific data that does not require consensus over the whole network.\n*   **Offchain indexing** is an optional service that allows the runtime to write directly to the offchain storage independently from offchain workers. The offchain index provides temporary storage for on-chain logic and complements the on-chain state.\n\n[](/learn/offchain-operations/#off-chain-workers)\nOff-chain workers\n-------------------------------------------------------------------\n\nOffchain workers run in their own Wasm execution environment outside of the Substrate runtime. This separation of concerns makes sure that block production is not impacted by long-running offchain tasks. However, because offchain workers are declared in the same code as the runtime, they can easily access on-chain state for their computations.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='845.5958549222798' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Offchain workers](https://docs.substrate.io/static/505c4ec510929c01c0e608225c5c598a/432c6/off-chain-workers-v2.png)\n\nOffchain workers have access to extended APIs for communicating with the external world:\n\n*   Ability to [submit transactions](https://paritytech.github.io/substrate/master/sp_runtime/offchain/trait.TransactionPool.html)\n    \u2014either signed or unsigned\u2014to the chain to publish computation results.\n*   A fully-featured HTTP client allowing the worker to access and fetch data from external services.\n*   Access to the local keystore to sign and verify statements or transactions.\n*   An additional, local [key-value database](https://paritytech.github.io/substrate/master/sp_runtime/offchain/trait.OffchainStorage.html)\n     shared between all offchain workers.\n*   A secure, local entropy source for random number generation.\n*   Access to the node's precise [local time](https://paritytech.github.io/substrate/master/sp_runtime/offchain/struct.Timestamp.html)\n    .\n*   The ability to sleep and resume work.\n\nNote that the results from offchain workers are not subject to regular transaction verification. Therefore, you should ensure the offchain operation includes a verification method to determine what information gets into the chain. For example, you might verify offchain transactions by implementing a mechanism for voting, averaging, or checking sender signatures.\n\nYou should also note that offchain workers don't have any specific privileges or permissions by default and, therefore, represent a potential attack vector that a malicious user could exploit. In most cases, checking whether a transaction was submitted by an offchain worker before writing to storage isn't sufficient to protect the network. Instead of assuming that the offchain worker can be trusted without safeguards, you should intentionally set restrictive permissions that limit access to the process and what it can do.\n\nOffchain workers are spawned during each block import. However, they aren't executed during initial blockchain synchronization.\n\n[](/learn/offchain-operations/#offchain-storage)\nOffchain storage\n-----------------------------------------------------------------\n\nOffchain storage is always local to a Substrate node and is not shared on-chain with any other blockchain nodes or subject to consensus. You can access the data stored in the offchain storage using offchain worker threads that have read and write access or through the on-chain logic using offchain indexing.\n\nBecause an offchain worker thread is spawned during each block import, there can be multiple offchain worker threads running at any given time. As with any multi-threaded programming environment, there are utilities to [mutex lock](https://en.wikipedia.org/wiki/Lock_(computer_science))\n the offchain storage when offchain worker threads access it to ensure data consistency.\n\nOffchain storage serves as a bridge for offchain worker threads to communicate to each other and for communication between offchain and on-chain logic. It can also be read using remote procedure calls (RPC) so it fits the use case of storing indefinitely growing data without over-consuming the on-chain storage.\n\n[](/learn/offchain-operations/#offchain-indexing)\nOffchain indexing\n-------------------------------------------------------------------\n\nIn the context of a blockchain, storage is most often concerned with the on-chain state. However, on-chain state is expensive because it must be agreed upon and populated to multiple nodes in the network. Therefore, you shouldn't store historical or user-generated data\u2014which grow indefinitely over time\u2014using on-chain storage.\n\nTo address the need to access historical or user-generated data, Substrate provides access to the offchain storage using offchain indexing. Offchain indexing allows the runtime to write directly to the offchain storage without using offchain worker threads. You can enable this functionality to persist data by starting a Substrate node with the `--enable-offchain-indexing` command-line option.\n\nUnlike offchain workers, offchain indexing populates the offchain storage every time a block is processed. By populating the data at every block, offchain indexing ensures that the data is always consistent and is exactly the same for every node running with indexing enabled.\n\n[](/learn/offchain-operations/#where-to-go-next)\nWhere to go next\n-----------------------------------------------------------------\n\nNow that you are familiar with how offchain workers, offchain storage, and offchain indexing enable you to work with data not stored on-chain, you might want to explore the following examples of offchain workers and how to use them in runtime development:\n\n*   [Example: Offchain worker](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/examples/offchain-worker)\n    \n*   [Example: Submit transactions](https://github.com/JoshOrndorff/recipes/blob/master/text/off-chain-workers/transactions.md)\n    \n*   [Example: Use HTTP requests to fetch data](https://github.com/JoshOrndorff/recipes/blob/master/text/off-chain-workers/http-json.md)\n    \n*   [Example: Offchain storage](https://github.com/JoshOrndorff/recipes/blob/master/text/off-chain-workers/storage.md)\n    \n*   [Example: Offchain indexing](https://github.com/JoshOrndorff/recipes/blob/master/text/off-chain-workers/indexing.md)\n    \n\n**Last edit:** February 28, 2024\n\n[\u2190 Previous](/learn/rust-basics/)\n[Next \u2192](/learn/light-clients-in-substrate-connect/)\n\nON THIS PAGE\n\n[Off-chain workers](#off-chain-workers)\n[Offchain storage](#offchain-storage)\n[Offchain indexing](#offchain-indexing)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nLearn\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nLearn\n=====\n\nSubstrate is a Software Development Kit (SDK) that uses Rust-based libraries and tools to enable you to build application-specific blockchains from modular and extensible components. The topics in this section explain many of the core principles and unique features of the Substrate development environment.\n\nThese topics are intended to help you learn what's possible when you build a Substrate-based blockchain and how Substrate can help you build a blockchain that best serves your specific project requirements or business model.\n\n*   [Welcome to Substrate](/learn/welcome-to-substrate/)\n     highlights the key benefits of developing with Substrate that most blockchain and smart contract platforms can't provide.\n*   [Blockchain basics](/learn/blockchain-basics/)\n     provides context about the complexity associated with blockchain development and introduces common blockchain concepts, components, and terminology.\n*   [Architecture and Rust libraries](/learn/architecture/)\n     describes the Substrate architecture and the relationship between the architecture and the core Rust libraries.\n*   [Networks and nodes](/learn/networks-and-nodes/)\n     defines the different types of network topologies that can be built with Substrate and the different roles that nodes can fill.\n*   [What can you build](/learn/what-can-you-build/)\n     introduces the advantages and limitations of different development options and why you might select one approach over another.\n*   [Runtime development](/learn/runtime-development/)\n     highlights the importance of the Substrate runtime and introduces the core application interfaces and primitives required for Substrate runtime development.\n*   [Transactions and block basics](/learn/transaction-types/)\n     introduces transaction types and the components that make up a block.\n*   [Transaction lifecycle](/learn/transaction-lifecycle/)\n     explains how transactions are received, queued, and executed to be included in a block.\n*   [State transitions and storage](/learn/state-transitions-and-storage/)\n     describes how the state changes processed in the runtime are stored and managed using trie data structures and a key-value database.\n*   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n     explains the relationship between accounts, addresses, and keys and how they are used.\n*   [Rust for Substrate](/learn/rust-basics/)\n     highlights the specific Rust features\u2014including traits, generics, associated types, and macros\u2014that you should be most familiar with to build a Substrate-based blockchain.\n*   [Offchain operations](/learn/offchain-operations/)\n     explores reasons for handling some operations offchain and alternatives for performing those offchain operations.\n*   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n     describes how to use Substrate Connect to integrate a light client into your applications and enable interaction with any Substrate-based chain.\n*   [Cryptography](/learn/cryptography/)\n     provides an overview of the hashing algorithms and signature schemes used for cryptography in Substrate.\n*   [Consensus](/learn/consensus/)\n     describes the most common consensus models and the types of consensus you can implement for a Substrate blockchain.\n*   [Cross-consensus messaging](/learn/xcm-communication/)\n     provides an overview of cross-consensus communication and the cross-consensus messaging (XCM) format.\n\nAfter you digest the information in these introductory sections, you'll be ready to start designing, building, and testing your own custom blockchain solution.\n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/quick-start/modify-the-runtime/)\n[Next \u2192](/learn/welcome-to-substrate/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/light-clients-in-substrate-connect/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nLight clients in Substrate connect\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/light-clients-in-substrate-connect.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nLight clients in Substrate Connect\n==================================\n\nTypically, the nodes that provide peer-to-peer networking for a blockchain require significant resources, including powerful high-speed processors and high-capacity storage devices. By contrast, light client nodes can synchronize data from the blockchain while running in resource-constrained environments and embedded in applications.\n\nWith a light client node, you can interact with a blockchain in a secure and decentralized way without investing in the high-powered hardware and network capacity that running a full node would require.\n\n[](/learn/light-clients-in-substrate-connect/#light-clients-in-the-javascript-ecosystem)\nLight clients in the JavaScript ecosystem\n----------------------------------------------------------------------------------------------------------------------------------\n\nFor Substrate-based chains, the light client node is implemented as a WebAssembly client\u2014called `smoldot`\u2014that can run in a browser and interact with the chain using JSON-RPC calls. To make the `smoldot` WebAssembly light client easier to integrate with JavaScript and TypeScript applications, there's a JavaScript package that's built on top of the `smoldot` source called Substrate Connect.\n\nSubstrate Connect is available as a Node.js package that can be installed with the `npm` package manager. The Substrate Connect package enables the light client node to be integrated with applications in the JavaScript ecosystem. After adding Substrate Connect to an application, the application can communicate with the light client\u2014and access blockchain data\u2014through JSON-RPC messages.\n\n[](/learn/light-clients-in-substrate-connect/#connect-to-the-blockchain-directly-from-a-browser)\nConnect to the blockchain directly from a browser\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nWith Substrate Connect, your applications can be configured to run a light client node inside a browser running locally on your computer. From the browser, application users can interact with blockchains directly\u2014without connecting to any third-party nodes or other servers.\n\nBy eliminating the need for intermediary servers, Substrate Connect provides benefits to blockchain builders, application developers, and end users. A few of the key benefits include:\n\n*   improved security\n*   simplified network infrastructure\n*   lowered maintenance costs\n*   easier onboarding for novice blockchain users\n*   faster path to adoption for Web3 applications\n\n[](/learn/light-clients-in-substrate-connect/#blockchain-networks-with-well-known-names)\nBlockchain networks with well-known names\n----------------------------------------------------------------------------------------------------------------------------------\n\nYou can use Substrate Connect to connect to any Substrate-based blockchain. However, you must specify the correct name of the chain that you want to connect to. There are a few well-known chain names that are defined for the [`WellKnownChain`](https://paritytech.github.io/substrate-connect/api/enums/_substrate_connect.WellKnownChain.html)\n enumeration type.\n\nYou can connect to the following public blockchain networks using the name listed:\n\n| To connect to this chain | Use this chain identifier |\n| --- | --- |\n| [Polkadot](https://polkadot.network/) | `polkadot` |\n| [Kusama](https://kusama.network/) | `ksmcc3` |\n| [Westend](https://wiki.polkadot.network/docs/en/maintain-networks#westend-test-network) | `westend2` |\n| [Rococo](https://polkadot.network/rococo-v1-a-holiday-gift-to-the-polkadot-community/) | `rococo_v2_2` |\n\nNote that you must use the chain identifier as it appears in the chain specification for a specific network rather than the more commonly-used network name. For example, you must specify `ksmcc3` as the chain identifier to connect to Kusama. Using the correct name is especially important for chains that have been forked. For example, `rococo_v2` and `rococo_v2_2` are two different chains.\n\n[](/learn/light-clients-in-substrate-connect/#integrate-in-apps-that-use-polkadot-js-api)\nIntegrate in apps that use Polkadot-JS API\n------------------------------------------------------------------------------------------------------------------------------------\n\nIf you have built applications that use the existing Polkadot-JS API, the `@polkadot/rpc-provider` package already contains the `substrate-connect` RPC provider.\n\nTo add `substrate-connect` to your application:\n\n1.  Install the `@polkadot/rpc-provider` package by running the appropriate command for the package manager you use.\n    \n    For example, if you use `yarn`, run the following command:\n    \n        yarn add @polkadot/rpc-provider\n    \n    If you use `npm` as your package manager, run the following command:\n    \n        npm i @polkadot/rpc-provider\n    \n2.  Install the `@polkadot/api` package by running the appropriate command for the package manager you use.\n    \n    For example, if you use `yarn`, run the following command:\n    \n        yarn add @polkadot/api\n    \n    If you use `npm` as your package manager, run the following command:\n    \n        npm i @polkadot/api\n    \n\n### [](/learn/light-clients-in-substrate-connect/#use-the-rpc-provider-to-connect-to-a-well-known-network)\nUse the RPC provider to connect to a well-known network\n\nThe following example illustrates how you can use the `rpc-provider` to connect to a well-known network such as Polkadot, Kusama, Westend, or Rococo.\n\n    import { ScProvider, WellKnownChain } from \"@polkadot/rpc-provider/substrate-connect\";\n    import { ApiPromise } from \"@polkadot/api\";\n    // Create the provider for a known chain\n    const provider = new ScProvider(WellKnownChain.westend2);\n    // Stablish the connection (and catch possible errors)\n    await provider.connect();\n    // Create the PolkadotJS api instance\n    const api = await ApiPromise.create({ provider });\n    await api.rpc.chain.subscribeNewHeads(lastHeader => {\n      console.log(lastHeader.hash);\n    });\n    await api.disconnect();\n\n### [](/learn/light-clients-in-substrate-connect/#use-the-rpc-provider-to-connect-to-a-custom-network)\nUse the RPC provider to connect to a custom network\n\nThe following example illustrates how you can use the `rpc-provider` to connect to a custom network by specifying its chain specification.\n\n    import { ScProvider } from \"@polkadot/rpc-provider/substrate-connect\";\n    import { ApiPromise } from \"@polkadot/api\";\n    import jsonCustomSpec from \"./jsonCustomSpec.json\";\n    // Create the provider for the custom chain\n    const customSpec = JSON.stringify(jsonCustomSpec);\n    const provider = new ScProvider(customSpec);\n    // Stablish the connection (and catch possible errors)\n    await provider.connect();\n    // Create the PolkadotJS api instance\n    const api = await ApiPromise.create({ provider });\n    await api.rpc.chain.subscribeNewHeads(lastHeader => {\n      console.log(lastHeader.hash);\n    });\n    await api.disconnect();\n\n### [](/learn/light-clients-in-substrate-connect/#use-the-rpc-provider-to-connect-to-a-parachain)\nUse the RPC provider to connect to a parachain\n\nThe following example illustrates how you can use the `rpc-provider` to connect to a parachain by specifying its chain specification.\n\n    import { ScProvider, WellKnownChain } from \"@polkadot/rpc-provider/substrate-connect\";\n    import { ApiPromise } from \"@polkadot/api\";\n    import jsonParachainSpec from \"./jsonParachainSpec.json\";\n    // Create the provider for the relay chain\n    const relayProvider = new ScProvider(WellKnownChain.westend2);\n    // Create the provider for the parachain. Notice that\n    // we must pass the provider of the relay chain as the\n    // second argument\n    const parachainSpec = JSON.stringify(jsonParachainSpec);\n    const provider = new ScProvider(parachainSpec, relayProvider);\n    // Stablish the connection (and catch possible errors)\n    await provider.connect();\n    // Create the PolkadotJS api instance\n    const api = await ApiPromise.create({ provider });\n    await api.rpc.chain.subscribeNewHeads(lastHeader => {\n      console.log(lastHeader.hash);\n    });\n    await api.disconnect();\n\n[](/learn/light-clients-in-substrate-connect/#use-substrate-connect-with-other-libraries)\nUse Substrate Connect with other libraries\n------------------------------------------------------------------------------------------------------------------------------------\n\nThe previous section demonstrated how to integrate the Substrate Connect provider into applications that use the Polkadot-JS API. With this provider, you create applications that enable users to interact with the chain through the browser using calls to the Polkadot-JS API methods. However, you can install and use @substrate-connect in applications that don't depend on the Polkadot-JS API. For example, if you are building your own application library or programming interfaces, you can install the Substrate Connect dependencies by running the appropriate command for the package manager you use.\n\nFor example, if you use `yarn`, run the following command:\n\n    yarn add @substrate/connect\n\nIf you use `npm` as your package manager, run the following command:\n\n    npm i @substrate/connect\n\n### [](/learn/light-clients-in-substrate-connect/#connect-to-a-well-known-chain)\nConnect to a well-known chain\n\nThe following example illustrates how you can use Substrate Connect to connect to a well-known network such as Polkadot, Kusama, Westend, or Rococo.\n\n    import { WellKnownChain, createScClient } from \"@substrate/connect\";\n    // Create the client\n    const client = createScClient();\n    // Create the chain connection, while passing the `jsonRpcCallback` function.\n    const chain = await client.addWellKnownChain(WellKnownChain.polkadot, function jsonRpcCallback(response) {\n      console.log(\"response\", response);\n    });\n    // send a RpcRequest\n    chain.sendJsonRpc('{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"system_health\",\"params\":[]}');\n\n### [](/learn/light-clients-in-substrate-connect/#connect-to-a-parachain)\nConnect to a parachain\n\nThe following example illustrates how you can use Substrate Connect to connect to a parachain.\n\n    import { WellKnownChain, createScClient } from \"@substrate/connect\";\n    import jsonParachainSpec from \"./jsonParachainSpec.json\";\n    // Create the client\n    const client = createScClient();\n    // Create the relay chain connection. There is no need to pass a callback\n    // function because we will sending and receiving messages through\n    // the parachain connection.\n    await client.addWellKnownChain(WellKnownChain.westend2);\n    // Create the parachain connection.\n    const parachainSpec = JSON.stringify(jsonParachainSpec);\n    const chain = await client.addChain(parachainSpec, function jsonRpcCallback(response) {\n      console.log(\"response\", response);\n    });\n    // send a request\n    chain.sendJsonRpc('{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"system_health\",\"params\":[]}');\n\n[](/learn/light-clients-in-substrate-connect/#api-documentation)\nAPI Documentation\n----------------------------------------------------------------------------------\n\nFor more information about the substrate-connect API, see [Substrate Connect](https://paritytech.github.io/substrate-connect/api/)\n.\n\n[](/learn/light-clients-in-substrate-connect/#browser-extension)\nBrowser extension\n----------------------------------------------------------------------------------\n\nThe Substrate Connect Browser Extension is using [Substrate Connect](https://github.com/paritytech/substrate-connect)\n and [Smoldot light client](https://github.com/smol-dot/smoldot)\n node modules and upon browser initiation updates and synchronizes in the well known substrate chain specs (**Polkadot, Kusama, Rococo, Westend**), keeping them to the latest state inside the extension, for faster chain sync.\n\nWhen a dApp that integrates [Substrate Connect](https://github.com/paritytech/substrate-connect)\n (e.g. [polkadotJS/apps](https://polkadot.js.org/apps/?rpc=light%3A%2F%2Fsubstrate-connect%2Fpolkadot#/explorer)\n) starts in a browser's tab, then it receives the latest specs from the Extension instead of wrap-synching from the last imported inside the dApp; At the same time, the dApp will appear inside the Extension as \"connected\" - meaning that it is using the Extension's bootnodes and specs;\n\nYou can download the Chrome and Firefox extensions from [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n or find more information on the [Github repo](https://github.com/paritytech/substrate-connect/tree/main/projects/extension)\n.\n\n[](/learn/light-clients-in-substrate-connect/#example-projects)\nExample projects\n--------------------------------------------------------------------------------\n\n*   [Burnr](https://paritytech.github.io/substrate-connect/burnr/)\n    \n    Insecure redeemable wallet: A light-client-based, in-browser wallet for Substrate. It's meant to be quick and easy to use but less secure than other solutions. [Github](https://github.com/paritytech/substrate-connect/tree/main/projects/burnr)\n    \n*   [Multi-demo](https://paritytech.github.io/substrate-connect/demo/)\n    \n    Simple demo that covers multichain and parachain examples. [Github](https://github.com/paritytech/substrate-connect/tree/main/projects/demo)\n    \n\n[](/learn/light-clients-in-substrate-connect/#brave-browser-websocket-issue)\nBrave browser WebSocket issue\n----------------------------------------------------------------------------------------------------------\n\nAs of **Brave v1.36**, extensions and web pages are limited to a maximum of 10 active WebSocket connections to prevent side-channel attacks. You can find more information about this change in [Partition WebSockets Limits to prevent side channels](https://github.com/brave/brave-browser/issues/19990)\n.\n\nIf you're using the Brave browser and are unable to connect because you've opened the maximum number of WebSocket connections allowed, you can disable this restriction.\n\nTo disable the WebSocket limit:\n\n1.  Open a new tab in the Brave browser.\n2.  Copy the URL [brave://flags/#restrict-websockets-pool](/brave://flags/#restrict-websockets-pool)\n    .\n3.  Paste the URL in the Address bar to select the **Restrict WebSockets pool** setting.\n4.  Click the setting list and select **Disabled**.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='510.455764075067' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Disable the Restrict WebSockets pool setting](https://docs.substrate.io/static/556406afa4cfef6f80f58a3f307ed465/5e66e/brave-setting.png)\n    \n5.  Relaunch the browser.\n\n**Last edit:** October 6, 2023\n\n[\u2190 Previous](/learn/offchain-operations/)\n[Next \u2192](/learn/cryptography/)\n\nON THIS PAGE\n\n[Light clients in the JavaScript ecosystem](#light-clients-in-the-javascript-ecosystem)\n[Connect to the blockchain directly from a browser](#connect-to-the-blockchain-directly-from-a-browser)\n[Blockchain networks with well-known names](#blockchain-networks-with-well-known-names)\n[Integrate in apps that use Polkadot-JS API](#integrate-in-apps-that-use-polkadot-js-api)\n[Use Substrate Connect with other libraries](#use-substrate-connect-with-other-libraries)\n[API Documentation](#api-documentation)\n[Browser extension](#browser-extension)\n[Example projects](#example-projects)\n[Brave browser WebSocket issue](#brave-browser-websocket-issue)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/runtime-development/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nRuntime development\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/runtime-development.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRuntime development\n===================\n\nAs discussed in [Architecture](/learn/architecture/)\n, the **runtime** for a Substrate node contains all of the business logic for executing transactions, saving state transitions, and interacting with the outer node. Substrate provides all of the tools required to build common blockchain components so you can focus on developing the runtime logic that defines the blockchain behavior.\n\n[](/learn/runtime-development/#state-transitions-and-the-runtime)\nState transitions and the runtime\n---------------------------------------------------------------------------------------------------\n\nAt the most basic level, every blockchain is essentially a ledger or record of each change that takes place on-chain. In Substrate-based chains, these changes to state are recorded in the runtime. Because the runtime handles this operation, the runtime is sometimes described as providing the [state transition function](/reference/glossary/#state-transition-function-stf)\n.\n\nBecause state transitions occur in the runtime, the runtime is where you define the **storage items** that represent the blockchain [state](/reference/glossary/#state)\n and the [transactions](/learn/transaction-types/)\n that allow blockchain users to make changes to this state.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1292.2266139657443' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![State and functions in the runtime](https://docs.substrate.io/static/6effe44b9d2d6811634d627228b41c48/10f1f/state-transition-function.png)\n\nThe Substrate runtime determines which transactions are valid and invalid and how the chain state is changed in response to transactions.\n\n[](/learn/runtime-development/#runtime-interfaces)\nRuntime interfaces\n---------------------------------------------------------------------\n\nAs you learned in [Architecture](/learn/architecture/)\n, the outer node is responsible for handling peer discovery, transaction pooling, block and transaction gossiping, consensus, and answering RPC calls from the outside world. These tasks frequently require the outer node to query the runtime for information or to provide information to the runtime. The runtime API facilitates this kind of communication between the outer node and the runtime.\n\nIn Substrate, the `sp_api` crate provides an interface to implement a runtime API. It is designed to give you flexibility in defining your own custom interfaces using the [`impl_runtime_apis`](https://paritytech.github.io/substrate/master/sp_api/macro.impl_runtime_apis.html)\n macro. However, every runtime must implement the [`Core`](https://paritytech.github.io/substrate/master/sp_api/trait.Core.html)\n and [`Metadata`](https://paritytech.github.io/substrate/master/sp_api/trait.Metadata.html)\n interfaces. In addition to these required interfaces, most Substrate nodes\u2014like the node template\u2014implement the following runtime interfaces:\n\n*   [`BlockBuilder`](https://paritytech.github.io/substrate/master/sp_block_builder/trait.BlockBuilder.html)\n     for the functionality required to build a block.\n*   [`TaggedTransactionQueue`](https://paritytech.github.io/substrate/master/sp_transaction_pool/runtime_api/trait.TaggedTransactionQueue.html)\n     for validating transactions.\n*   [`OffchainWorkerApi`](https://paritytech.github.io/substrate/master/sp_offchain/trait.OffchainWorkerApi.html)\n     for enabling offchain operations.\n*   [`AuraApi`](https://paritytech.github.io/substrate/master/sp_consensus_aura/trait.AuraApi.html)\n     for block authoring and validation using a round-robin method of consensus.\n*   [`SessionKeys`](https://paritytech.github.io/substrate/master/sp_session/trait.SessionKeys.html)\n     for generating and decoding session keys.\n*   [`GrandpaApi`](https://paritytech.github.io/substrate/master/sp_consensus_grandpa/trait.GrandpaApi.html)\n     for block finalization into the runtime.\n*   [`AccountNonceApi`](https://paritytech.github.io/substrate/master/frame_system_rpc_runtime_api/trait.AccountNonceApi.html)\n     for querying transaction indices.\n*   [`TransactionPaymentApi`](https://paritytech.github.io/substrate/master/pallet_transaction_payment_rpc_runtime_api/trait.TransactionPaymentApi.html)\n     for querying information about transactions.\n*   [`Benchmark`](https://paritytech.github.io/substrate/master/frame_benchmarking/trait.Benchmark.html)\n     for estimating and measuring execution time required to complete transactions.\n\n[](/learn/runtime-development/#core-primitives)\nCore primitives\n---------------------------------------------------------------\n\nSubstrate also defines the core primitives that the runtime must implement. The Substrate framework makes minimal assumptions about what your runtime must provide to the other layers of Substrate. However, there are a few data types that must be defined and must fulfill a particular interface to work within the Substrate framework.\n\nThese core primitives are:\n\n*   `Hash`: A type which encodes a cryptographic digest of some data. Typically just a 256-bit quantity.\n*   `DigestItem`: A type which must be able to encode one of a number of \"hard-wired\" alternatives relevant to consensus and change-tracking as well as any number of \"soft-coded\" variants, relevant to specific modules within the runtime.\n*   `Digest`: A series of DigestItems. This encodes all information that is relevant for a light-client to have on hand within the block.\n*   `Extrinsic`: A type to represent a single piece of data external to the blockchain that is recognized by the blockchain. This typically involves one or more signatures, and some sort of encoded instructions (e.g. for transferring ownership of funds or calling into a smart contract).\n*   `Header`: A type which is representative (cryptographically or otherwise) of all information relevant to a block. It includes the parent hash, the storage root and the extrinsics trie root, the digest and a block number.\n*   `Block`: Essentially just a combination of `Header` and a series of `Extrinsics`, together with a specification of the hashing algorithm to be used.\n*   `BlockNumber`: A type which encodes the total number of ancestors any valid block has. Typically a 32-bit quantity.\n\n[](/learn/runtime-development/#frame)\nFRAME\n-------------------------------------------\n\n[FRAME](/reference/glossary/#frame)\n is one of the most powerful tools available to you as a runtime developer. As mentioned in [Substrate empowers developers](/)\n, FRAME is an acronym for **Framework for Runtime Aggregation of Modularized Entities** and it encompasses a significant number of modules and support libraries that simplify runtime development. In Substrate, these modules\u2014called **pallets**\u2014offer customizable business logic for different use cases and features that you might want to include in your runtime. For example, there are pallets that provide a framework of business logic for staking, consensus, governance, and other common activities.\n\nFor a summary of the pallets available, see [FRAME pallets](/reference/frame-pallets/)\n.\n\nIn addition to pallets, FRAME provides services to interact with the runtime through the following libraries and modules\n\n*   [FRAME system crate `frame_system`](https://paritytech.github.io/substrate/master/frame_system/index.html)\n     provides low-level types, storage, and functions for the runtime.\n*   [FRAME support crate `frame_support`](https://paritytech.github.io/substrate/master/frame_support/index.html)\n     is a collection of Rust macros, types, traits, and modules that simplify the development of Substrate pallets.\n*   [FRAME executive pallet `frame_executive`](https://paritytech.github.io/substrate/master/frame_executive/index.html)\n     orchestrates the execution of incoming function calls to the respective pallets in the runtime.\n\nThe following diagram illustrates how FRAME and its system, support, and executives modules provide services for the runtime environment.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1415.3020134228186' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![FRAME and the runtime architecture](https://docs.substrate.io/static/26bc9a1dad7d0bb2198e86a5ee6dd885/55a7c/runtime-and-frame.png)\n\n### [](/learn/runtime-development/#composing-a-runtime-with-pallets)\nComposing a runtime with pallets\n\nYou can build a Substrate-based blockchain without using FRAME. However, FRAME pallets enable you to compose custom runtime logic using predefined components as a starting point. Each pallet defines specific types, storage items, and functions to implement a specific set of features or functionality for a runtime.\n\nThe following diagram illustrates how you can select and combine FRAME pallets to compose a runtime.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1463' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Compose a runtime with FRAME](https://docs.substrate.io/static/64b2fcb61748ae77f4dd4c9ce63872b1/ee8ba/compose-runtime.png)\n\n### [](/learn/runtime-development/#building-custom-pallets)\nBuilding custom pallets\n\nIn addition to the library of pre-built FRAME pallets, you can use the FRAME libraries and services to build your own custom pallets. With custom pallets, you have the flexibility to define the runtime behavior that best suits your purposes. Because each pallet has its own discrete logic, you can combine pre-built and custom pallets to control the features and functionality your blockchain provides and achieve the results you want.\n\nFor example, you might include the [Balances pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/balances)\n in your runtime to use its cryptocurrency-related storage items and functions for managing tokens, but add custom logic to call a pallet you write when an account balance changes.\n\nMost pallets are composed with some combination of the following sections:\n\n*   Imports and dependencies\n*   Pallet type declaration\n*   Runtime configuration trait\n*   Runtime storage\n*   Runtime events\n*   Hooks for logic that should be executed in a specific context\n*   Function calls that can be used to execute transactions\n\nFor example, if you wanted to define a custom pallet, you might start with a skeleton structure for the pallet similar to the following:\n\n    // Add required imports and dependencies\n    pub use pallet::*;\n    \n    #[frame_support::pallet]\n    pub mod pallet {\n     use frame_support::pallet_prelude::*;\n     use frame_system::pallet_prelude::*;\n    \n     // Declare the pallet type\n     // This is a placeholder to implement traits and methods.\n     #[pallet::pallet]\n     #[pallet::generate_store(pub(super) trait Store)]\n     pub struct Pallet<T>(_);\n    \n     // Add the runtime configuration trait\n     // All types and constants go here.\n     #[pallet::config]\n     pub trait Config: frame_system::Config { ... }\n    \n     // Add runtime storage to declare storage items.\n     #[pallet::storage]\n     #[pallet::getter(fn something)]\n     pub type MyStorage<T: Config> = StorageValue<_, u32>;\n    \n     // Add runtime events\n     #[pallet::event]\n     #[pallet::generate_deposit(pub(super) fn deposit_event)]\n     pub enum Event<T: Config> { ... }\n    \n     // Add hooks to define some logic that should be executed\n     // in a specific context, for example on_initialize.\n     #[pallet::hooks]\n     impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> { ... }\n    \n     // Add functions that are callable from outside the runtime.\n     #[pallet::call]\n     impl<T:Config> Pallet<T> { ... }\n    }\n\nYou can compose pallets with some or all of the sections, as needed. As you start to design and build your custom runtime, you'll learn more about FRAME libraries and the runtime primitives used to define configuration traits, storage items, events, and errors, and how to write the function calls that are dispatched to the runtime for execution.\n\n[](/learn/runtime-development/#where-to-go-next)\nWhere to go next\n-----------------------------------------------------------------\n\nNow that you are familiar with the basics of Substrate runtime development and working with pallets, explore the following topics and tutorials to learn more.\n\n*   [Frame pallets](/reference/frame-pallets/)\n    \n*   [Add a module to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n    \n*   [Rust for Substrate](/learn/rust-basics/)\n    \n*   [Macro reference](/reference/frame-macros/)\n    \n*   [Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n    \n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/learn/what-can-you-build/)\n[Next \u2192](/learn/transaction-types/)\n\nON THIS PAGE\n\n[State transitions and the runtime](#state-transitions-and-the-runtime)\n[Runtime interfaces](#runtime-interfaces)\n[Core primitives](#core-primitives)\n[FRAME](#frame)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/rust-basics/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nRust basics\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/rust-basics.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRust for Substrate\n==================\n\nMuch of what makes Substrate a flexible and extensible framework for creating mission-critical software is owed to [Rust](https://www.rust-lang.org/)\n. Being the language of choice for Substrate, Rust is a highly performant programming language and a first choice for the following reasons:\n\n*   Rust is fast: it's statically typed at compile time, making it possible for the compiler to optimize the code for speed and for developers to optimize for a specific compilation target.\n*   Rust is portable: it's designed to run on embedded devices with support for any type of operating system.\n*   Rust is memory safe: it has no garbage collector and it checks each and every variable you use and every memory address you reference to avoid any memory leaks.\n*   Rust is Wasm first: it has first class support for compiling to WebAssembly.\n\n[](/learn/rust-basics/#rust-in-substrate)\nRust in Substrate\n-----------------------------------------------------------\n\nIn the [Architecture](/learn/architecture/)\n section, you will learn that Substrate is made of two distinct architectural components: the outer node and the runtime. While more complex features in Rust such as multithreading and asynchronous Rust are used in the outer node code, they aren't directly exposed to runtime engineers, making it easier for runtime engineers to focus on the business logic of their node.\n\nGenerally, depending on their focus, developers should expect to know:\n\n*   Basic [Rust idioms](https://rust-unofficial.github.io/patterns/idioms/index.html)\n    , [working with `no_std`](https://docs.rust-embedded.org/book/intro/no-std.html)\n     and what macros are used and why (for runtime engineering).\n*   [Asynchronous Rust](https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html)\n     (for more advanced developers working with outer node (client) code).\n\nAlthough general familiarity with Rust is essential before diving into Substrate\u2014and there are many resources available for learning Rust, including the [Rust Language Programming Book](https://doc.rust-lang.org/book/)\n and [Rust by Example](https://doc.rust-lang.org/rust-by-example/)\n\u2014the remainder of this section highlights ways Substrate uses some of Rust's core features for developers getting started with runtime engineering.\n\n[](/learn/rust-basics/#compilation-target)\nCompilation target\n-------------------------------------------------------------\n\nWhen building a Substrate node, we use the `wasm32-unknown-unknown` compilation target which means that Substrate runtime engineers are constrained to writing runtimes that must compile to Wasm. This implies that you can't rely on some typical standard library types and functions and must only use `no_std` compatible crates for the majority of runtime code. Substrate has a lot of its of own primitive types and associated traits that make it possible to work around the `no_std` requirement.\n\n[](/learn/rust-basics/#macros)\nMacros\n-------------------------------------\n\nAs you learn how to use and write FRAME pallets, you'll see there are many macros available as reusable code to abstract common tasks or enforce runtime-specific requirements. These macros allow you to focus on writing idiomatic Rust and application-specific logic instead of the common code required to interact with a runtime.\n\nRust macros are a powerful tool to help ensure certain requirements are met (without re-writing code) such as the logic to be formatted in a specific way, specific checks are made, or some logic consists of specific data structures. This is especially useful to help developers write code that can integrate with the complexity of a Substrate runtime. For example, the `#[frame_support::pallet]` macro is required in all FRAME pallets to help you correctly implement certain required attributes-such as storage items or externally callable functions-and make it compatible with the build process in `construct_runtime`.\n\nDeveloping Substrate runtimes involves heavy use of Rust's attribute macros, which come in two flavors: derive attributes and custom attributes. When you're getting started with Substrate, it isn't so important to know exactly how they work, but rather to know that they exist that they empower you to write correct runtime code.\n\nDerive attributes are useful for custom runtime types that need to satisfy certain traits, for instance, to have types be decodable by a node during runtime execution.\n\nOther attribute like macros are also common throughout Substrate's codebase for:\n\n*   Specifying whether a code snippet only compiles to `no_std` or can use the `std` library.\n*   Building custom FRAME pallets.\n*   Specifying the way the runtime is built.\n\n[](/learn/rust-basics/#generics-and-configuration-traits)\nGenerics and configuration traits\n-------------------------------------------------------------------------------------------\n\nOften compared to interfaces in languages like Java, traits in Rust provide ways to give advanced functionality to a type.\n\nIf you've read about pallets, you've probably noticed that every pallet has a `Config` trait which allows you to define the types and interfaces a pallet depends on.\n\nThis trait itself inherits a number of core runtime types from the `frame_system::pallet::Config` trait, making it easy to access common types when writing runtime logic. In addition, in any FRAME pallet the `Config` trait is generic over `T` (more on generics in the next section). Some common examples of these core runtime types could be `T::AccountId`, the common type for identifying user accounts in the runtime or `T::BlockNumber`, the block number type used by the runtime.\n\nFor more information about generic types and traits in Rust, see the sections on [Generic Types](https://doc.rust-lang.org/book/ch10-01-syntax.html)\n, [Traits](https://doc.rust-lang.org/book/ch10-02-traits.html)\n and [Advanced traits](https://doc.rust-lang.org/book/ch19-03-advanced-traits.html)\n from the Rust book.\n\nWith Rust generics, Substrate runtime developers can write pallets that are completely agnostic to specific implementation details and therefore make full use of Substrate's flexibility, extensibility and modularity.\n\nAll types in the `Config` trait are defined generically using trait bounds and made concrete in the runtime implementation. This not only means that you can write pallets that support different specifications for the same type (e.g. addresses for both Substrate and Ethereum chains), but you can also customize generic implementations to your needs with minimal overhead (e.g. change block number to `u32`).\n\nThis gives developers the flexibility of writing code that makes no assumptions about the core blockchain architecture decisions you have made.\n\nSubstrate maximizes the use of generic types to provide maximum flexibility. You define how the generic types are resolved to suit your purpose.\n\nFor more information about generic types and traits in Rust, see the sections on [Generic Types](https://doc.rust-lang.org/book/ch10-01-syntax.html)\n from the Rust book.\n\n[](/learn/rust-basics/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------\n\nNow that you know how Substrate relies on a few key Rust features\u2014like traits, generic types, and macros\u2014you can explore the following resources to learn more.\n\n*   [Rust book](https://doc.rust-lang.org/book/)\n    \n*   [Why Rust?](https://www.parity.io/blog/why-rust)\n     (blog by Parity)\n*   [Cargo and crates.io](https://doc.rust-lang.org/book/ch14-00-more-about-cargo.html)\n    \n*   [Why Rust for smart contracts?](https://paritytech.github.io/ink-docs/why-rust-for-smart-contracts)\n     (ink! documentation)\n\n**Last edit:** February 16, 2024\n\n[\u2190 Previous](/learn/accounts-addresses-keys/)\n[Next \u2192](/learn/offchain-operations/)\n\nON THIS PAGE\n\n[Rust in Substrate](#rust-in-substrate)\n[Compilation target](#compilation-target)\n[Macros](#macros)\n[Generics and configuration traits](#generics-and-configuration-traits)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/networks-and-nodes/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nNetworks and nodes\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/networks-and-nodes.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nNetworks and nodes\n==================\n\nWhen thinking about building a blockchain, it's useful to consider that boundaries are what define a network. For example, a set of computers connected to a single router can be considered a home network. A firewall might be the boundary that defines an enterprise network. Smaller, isolated networks can be connected to wider area networks through a common communication protocol. Similarly, you can think of a blockchain network as being defined by its boundaries and its isolation from or communication with other blockchains.\n\nAs a blockchain builder's toolkit, Substrate enables you to develop any type of blockchain you can imagine and to define its boundaries based on your application-specific requirements. With this flexibility in mind, one of the decisions you need to make is the type of network you want to build and the role that different nodes might play in that network.\n\n[](/learn/networks-and-nodes/#network-types)\nNetwork types\n----------------------------------------------------------\n\nSubstrate-based blockchains can be used in different types of network architecture. For example, Substrate blockchains are used to build the following network types:\n\n*   **Private networks** that limit access to a restricted set of nodes.\n*   **Solo chains** that implement their own security protocol and don't connect or communicate with any other chains. Bitcoin and Ethereum are examples of non-Substrate based solo chains.\n*   **Relay chains** that provide decentralized security and communication for other chains that connect to them. Kusama and Polkadot are examples of relay chains.\n*   **Parachains** that are built to connect to a relay chain and have the ability to communicate with other chains that use the same relay chain. Because parachains depend on the relay chain to finalize the blocks produced, parachains must implement the same consensus protocol as the relay chain they target.\n\n[](/learn/networks-and-nodes/#node-types)\nNode types\n----------------------------------------------------\n\nBlockchains require network nodes to be synchronised to present a consistent and up-to-date view of the blockchain state. Each synchronised node stores a copy of the blockchain and keeps track of incoming transactions. However, keeping a full copy of an entire blockchain requires a lot of storage and computing resources and downloading all of the blocks from genesis to the most recent isn\u2019t practical for most use cases. To make it easier to maintain the security and integrity of the chain but reduce the resource requirements for clients wanting access to blockchain data, there are different types of nodes that can interact with the chain:\n\n*   [Full nodes](/learn/networks-and-nodes/#full-nodes)\n    \n*   [Archive nodes](/learn/networks-and-nodes/#archive-nodes)\n    \n*   [Light client nodes](/learn/networks-and-nodes/#light-client-nodes)\n    \n\n### [](/learn/networks-and-nodes/#full-nodes)\nFull nodes\n\nFull nodes are a critical part of the blockchain network infrastructure and are the most common node type. Full nodes store blockchain data and, typically, participate in common blockchain operations, such as authoring and validating blocks, receiving and verifying transactions, and serving data in response to user requests.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1342.8129829984543' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Full node](https://docs.substrate.io/static/66e7370c8b86a3caaee5941feb9865ea/67daa/full-node.png)\n\nBy default, full nodes are configured to store only the most recent 256 blocks and to discard state older than that\u2014with the exception of the genesis block\u2014to prevent the full node from growing indefinitely and consuming all available disk space. You can configure the number of blocks a full node retains.\n\nAlthough older blocks are discarded, full nodes retain all of the [block headers](/reference/glossary/#header)\n from the genesis block to the most recent block to validate that the state is correct. Because the full node has access to all of the block headers, it can be used to rebuild the state of the entire blockchain by executing all of the blocks from the genesis block. Thus it requires much more computation to retrieve information about some previous state, and an archive should generally be used instead.\n\nFull nodes allow you to read the current state of the chain and to submit and validate transactions directly on the network. By discarding state from older blocks, a full node requires much less disk space than an archive node. However, a full node requires far more computational resources to query and retrieve information about some previous state. If you need to query historical blocks, you should purge the full node then restart it as an archive node.\n\n### [](/learn/networks-and-nodes/#archive-nodes)\nArchive nodes\n\nArchive nodes are similar to full nodes except that they store all past blocks with complete state available for every block. Archive nodes are most often used by utilities\u2014such as block explorers, wallets, discussion forums, and similar applications\u2014that need access to historical information.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1330.448222565688' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Archive nodes](https://docs.substrate.io/static/1f6c3eb6e43d2f11ad03d636c00213bb/d652c/archive-node.png)\n\nBecause archive nodes retain historical state, they require a lot of disk space. Because of the disk space required to run them, archive nodes are less common than full nodes. However, archive nodes make it convenient to query the past state of the chain at any point in time. For example, you can query an archive node to look up an account balance in a certain block or to see details about a transaction resulted in a specific state change. These types of queries are faster and more efficient when you run them on the data in an archive node.\n\n### [](/learn/networks-and-nodes/#light-client-nodes)\nLight client nodes\n\nLight client nodes enable you to connect to a Substrate network with minimal hardware requirements.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1340.340030911901' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Light client nodes](https://docs.substrate.io/static/3c52ff0b88c771ed967ddfb6bd031065/9607f/light-node.png)\n\nBecause light client nodes require minimal system resources, they can be embedded into web-based applications, browser extensions, mobile device applications, or internet of things (IoT) devices. Light client nodes provide a runtime and access to the current state through RPC endpoints. The RPC endpoints for light client nodes can be written in Rust, JavaScript, or other languages and used to read block headers, submit transactions, and view the results of transactions.\n\nLight client nodes don't participate in blockchain or network operations. For example, light client nodes aren't responsible for block authoring or validation, gossipping transactions or reaching consensus. The light client node doesn't store any past blocks, so it can't read historical data without requesting it from a node that has it.\n\n[](/learn/networks-and-nodes/#node-roles)\nNode roles\n----------------------------------------------------\n\nDepending on the command-line options you specify when you start a node, nodes can play different roles in the progression of the chain and can provide different levels of access to the on-chain state. For example, you can limit the nodes that are authorized to author new blocks and which nodes can communicate with peers. Peer nodes that aren't authorized as block producers can import new blocks, receive transactions, and send and receive gossip about new transactions to other nodes. Nodes can also be prevented from connecting to the broader network and restricted to communicating with specific nodes.\n\n[](/learn/networks-and-nodes/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------------\n\nYou can use Substrate to build virtually any type of network\u2014from a completely self-contained and private solo-chain to your own relay chain ecosystem or compatible parachains.\n\nTo take a deeper dive into networks and nodes types, explore the following topics.\n\n*   [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n    \n*   [Simulate a network](/tutorials/build-a-blockchain/simulate-network/)\n    \n*   [Add trusted nodes](/tutorials/build-a-blockchain/add-trusted-nodes/)\n    \n*   [Authorize specific nodes](/tutorials/build-a-blockchain/authorize-specific-nodes/)\n    \n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/learn/architecture/)\n[Next \u2192](/learn/what-can-you-build/)\n\nON THIS PAGE\n\n[Network types](#network-types)\n[Node types](#node-types)\n[Node roles](#node-roles)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/state-transitions-and-storage/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nState transitions and storage\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/state-transitions-and-storage.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nState transitions and storage\n=============================\n\nSubstrate uses a simple key-value data store implemented as a database-backed, modified Merkle tree. All of Substrate's [higher-level storage abstractions](/build/runtime-storage/)\n are built on top of this simple key-value store.\n\n[](/learn/state-transitions-and-storage/#key-value-database)\nKey-Value database\n-------------------------------------------------------------------------------\n\nSubstrate implements its storage database with [RocksDB](https://rocksdb.org/)\n, a persistent key-value store for fast storage environments. It also supports an experimental [Parity DB](https://github.com/paritytech/parity-db)\n.\n\nThe DB is used for all the components of Substrate that require persistent storage, such as:\n\n*   Substrate clients\n*   Substrate light-clients\n*   Off-chain workers\n\n[](/learn/state-transitions-and-storage/#trie-abstraction)\nTrie abstraction\n---------------------------------------------------------------------------\n\nOne advantage of using a simple key-value store is that you are able to easily abstract storage structures on top of it.\n\nSubstrate uses a Base-16 Modified Merkle Patricia tree (\"trie\") from [`paritytech/trie`](https://github.com/paritytech/trie)\n to provide a trie structure whose contents can be modified and whose root hash is recalculated efficiently.\n\nTries allow efficient storing and sharing of the historical block state. The trie root is a representation of the data within the trie; that is, two tries with different data will always have different roots. Thus, two blockchain nodes can easily verify that they have the same state by simply comparing their trie roots.\n\nAccessing trie data is costly. Each read operation takes O(log N) time, where N is the number of elements stored in the trie. To mitigate this, we use a key-value cache.\n\nAll trie nodes are stored in the DB and part of the trie state can get pruned, i.e. a key-value pair can be deleted from storage when it is out of pruning range for non-archive nodes. We do not use [reference counting](http://en.wikipedia.org/wiki/Reference_counting)\n for performance reasons.\n\n### [](/learn/state-transitions-and-storage/#state-trie)\nState trie\n\nSubstrate-based chains have a single main trie, called the state trie, whose root hash is placed in each block header. This is used to easily verify the state of the blockchain and provide a basis for light clients to verify proofs.\n\nThis trie only stores content for the canonical chain, not forks. There is a separate [`state_db` layer](https://paritytech.github.io/substrate/master/sc_state_db/index.html)\n that maintains the trie state with references counted in memory for all that is non-canonical.\n\n### [](/learn/state-transitions-and-storage/#child-trie)\nChild trie\n\nSubstrate also provides an API to generate new child tries with their own root hashes that can be used in the runtime.\n\nChild tries are identical to the main state trie, except that a child trie's root is stored and updated as a node in the main trie instead of the block header. Since their headers are a part of the main state trie, it is still easy to verify the complete node state when it includes child tries.\n\nChild tries are useful when you want your own independent trie with a separate root hash that you can use to verify the specific content in that trie. Subsections of a trie do not have a root-hash-like representation that satisfy these needs automatically; thus a child trie is used instead.\n\n[](/learn/state-transitions-and-storage/#querying-storage)\nQuerying storage\n---------------------------------------------------------------------------\n\nBlockchains that are built with Substrate expose a remote procedure call (RPC) server that can be used to query runtime storage. When you use the Substrate RPC to access a storage item, you only need to provide [the key](/learn/state-transitions-and-storage/#key-value-database)\n associated with that item. Substrate's [runtime storage APIs](/build/runtime-storage/)\n expose a number of storage item types; keep reading to learn how to calculate storage keys for the different types of storage items.\n\n### [](/learn/state-transitions-and-storage/#storage-value-keys)\nStorage value keys\n\nTo calculate the key for a simple [Storage Value](/build/runtime-storage/#storage-value)\n, take the [TwoX 128 hash](https://github.com/Cyan4973/xxHash)\n of the name of the pallet that contains the Storage Value and append to it the TwoX 128 hash of the name of the Storage Value itself. For example, the [Sudo](https://paritytech.github.io/substrate/master/pallet_sudo/index.html)\n pallet exposes a Storage Value item named `Key`:\n\n    twox_128(\"Sudo\")                   = \"0x5c0d1176a568c1f92944340dbfed9e9c\"\n    twox_128(\"Key\")                    = \"0x530ebca703c85910e7164cb7d1c9e47b\"\n    twox_128(\"Sudo\") + twox_128(\"Key\") = \"0x5c0d1176a568c1f92944340dbfed9e9c530ebca703c85910e7164cb7d1c9e47b\"\n\nIf the familiar `Alice` account is the sudo user, an RPC request and response to read the Sudo pallet's `Key` Storage Value could be represented as:\n\n    state_getStorage(\"0x5c0d1176a568c1f92944340dbfed9e9c530ebca703c85910e7164cb7d1c9e47b\") = \"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\"\n\nIn this case, the value that is returned (`\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\"`) is Alice's [SCALE](/reference/scale-codec/)\n\\-encoded account ID (`5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY`).\n\nYou may have noticed that the [non-cryptographic](/build/runtime-storage/#cryptographic-hashing-algorithms)\n TwoX 128 hash algorithm is used to generate Storage Value keys. This is because it is not necessary to pay the performance costs associated with a cryptographic hash function since the input to the hash function (the names of the pallet and storage item) are determined by the runtime developer and not by potentially malicious users of your blockchain.\n\n### [](/learn/state-transitions-and-storage/#storage-map-keys)\nStorage map keys\n\nLike Storage Values, the keys for [Storage Maps](/build/runtime-storage/#storage-map)\n are equal to the TwoX 128 hash of the name of the pallet that contains the map prepended to the TwoX 128 hash of the name of the Storage Map itself. To retrieve an element from a map, append the hash of the desired map key to the storage key of the Storage Map. For maps with two keys (Storage Double Maps), append the hash of the first map key followed by the hash of the second map key to the Storage Double Map's storage key.\n\nLike Storage Values, Substrate uses the TwoX 128 hashing algorithm for the pallet and Storage Map names, but you will need to make sure to use the correct [hashing algorithm](/build/runtime-storage/#hashing-algorithms)\n (the one that was declared in [the `#[pallet::storage]` macro](/build/runtime-storage/#declaring-storage-items)\n) when determining the hashed keys for the elements in a map.\n\nHere is an example that illustrates querying a Storage Map named `FreeBalance` from a pallet named `Balances` for the balance of the `Alice` account. In this example, the `FreeBalance` map is using [the transparent Blake2 128 Concat hashing algorithm](/build/runtime-storage/#transparent-hashing-algorithms)\n:\n\n    twox_128(\"Balances\")                                             = \"0xc2261276cc9d1f8598ea4b6a74b15c2f\"\n    twox_128(\"FreeBalance\")                                          = \"0x6482b9ade7bc6657aaca787ba1add3b4\"\n    scale_encode(\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\") = \"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\"\n    \n    blake2_128_concat(\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\") = \"0xde1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\"\n    \n    state_getStorage(\"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\") = \"0x0000a0dec5adc9353600000000000000\"\n\nThe value that is returned from the storage query (`\"0x0000a0dec5adc9353600000000000000\"` in the example above) is the [SCALE](/reference/scale-codec/)\n\\-encoded value of Alice's account balance (`\"1000000000000000000000\"` in this example). Notice that before hashing Alice's account ID it has to be SCALE-encoded. Also notice that the output of the `blake2_128_concat` function consists of 32 hexadecimal characters followed by the function's input. This is because the Blake2 128 Concat is [a transparent hashing algorithm](/build/runtime-storage/#transparent-hashing-algorithms)\n.\n\nAlthough the above example may make this characteristic seem superfluous, its utility becomes more apparent when the goal is to iterate over the keys in a map (as opposed to retrieving the value associated with a single key). The ability to iterate over the keys in a map is a common requirement in order to allow _people_ to use the map in a way that seems natural (such as UIs): first, a user is presented with a list of elements in the map, then, that user can select the element that they are interested in and query the map for more details about that particular element.\n\nHere is another example that uses the same example Storage Map (a map named `FreeBalances` that uses a Blake2 128 Concat hashing algorithm in a pallet named `Balances` that demonstrates using the Substrate RPC to query a Storage Map for its list of keys via the `state_getKeys` RPC endpoint:\n\n    twox_128(\"Balances\")                                      = \"0xc2261276cc9d1f8598ea4b6a74b15c2f\"\n    twox_128(\"FreeBalance\")                                   = \"0x6482b9ade7bc6657aaca787ba1add3b4\"\n    \n    state_getKeys(\"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4\") = [\\\n     \"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\",\\\n     \"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b432a5935f6edc617ae178fef9eb1e211fbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f\",\\\n     ...\\\n    ]\n\nEach element in the list that is returned by the Substrate RPC's `state_getKeys` endpoint can be directly used as input for the RPC's `state_getStorage` endpoint. In fact, the first element in the example list above is equal to the input used for the `state_getStorage` query in the previous example (the one used to find the balance for `Alice`). Because the map that these keys belong to uses a transparent hashing algorithm to generate its keys, it is possible to determine the account associated with the second element in the list. Notice that each element in the list is a hexadecimal value that begins with the same 64 characters; this is because each list element represents a key in the same map, and that map is identified by concatenating two TwoX 128 hashes, each of which are 128-bits or 32 hexadecimal characters. After discarding this portion of the second element in the list, you are left with `0x32a5935f6edc617ae178fef9eb1e211fbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f`.\n\nYou saw in the previous example that this represents the Blake2 128 Concat hash of some [SCALE](/reference/scale-codec/)\n\\-encoded account ID. The Blake 128 Concat hashing algorithm consists of appending (concatenating) the hashing algorithm's input to its Blake 128 hash. This means that the first 128 bits (or 32 hexadecimal characters) of a Blake2 128 Concat hash represents a Blake2 128 hash, and the remainder represents the value that was passed to the Blake 2 128 hashing algorithm. In this example, after you remove the first 32 hexadecimal characters that represent the Blake2 128 hash (i.e. `0x32a5935f6edc617ae178fef9eb1e211f`) what is left is the hexadecimal value `0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f`, which is a [SCALE](/reference/scale-codec/)\n\\-encoded account ID. Decoding this value yields the result `5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY`, which is the account ID for the familiar `Alice_Stash` account.\n\n[](/learn/state-transitions-and-storage/#runtime-storage-api)\nRuntime storage API\n---------------------------------------------------------------------------------\n\nSubstrate's [FRAME Support crate](https://paritytech.github.io/substrate/master/frame_support/index.html)\n provides utilities for generating unique, deterministic keys for your runtime's storage items. These storage items are placed in the [state trie](/learn/state-transitions-and-storage/#trie-abstraction)\n and are accessible by [querying the trie by key](/learn/state-transitions-and-storage/#querying-storage)\n.\n\n[](/learn/state-transitions-and-storage/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------------------\n\n*   [Runtime storage](/build/runtime-storage/)\n    \n*   [Type encoding (SCALE)](/reference/scale-codec/)\n    \n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/learn/transaction-lifecycle/)\n[Next \u2192](/learn/accounts-addresses-keys/)\n\nON THIS PAGE\n\n[Key-Value database](#key-value-database)\n[Trie abstraction](#trie-abstraction)\n[Querying storage](#querying-storage)\n[Runtime storage API](#runtime-storage-api)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/transaction-types/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nTransaction types\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/transaction-types.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTransactions and block basics\n=============================\n\nIn this article, you'll learn about the different types of transactions that you can create and how you can use them in a runtime. Broadly-speaking, transactions determine the data that makes its way into the blocks in your blockchain. By learning how different transaction types are used, you'll be better prepared to select the appropriate type for your needs.\n\n[](/learn/transaction-types/#what-is-a-transaction)\nWhat is a transaction?\n--------------------------------------------------------------------------\n\nIn general, transactions provide a mechanism for making changes to state that can be included in a block. There are three distinct transaction types in Substrate:\n\n*   [Signed transactions](/learn/transaction-types/#signed-transactions)\n    \n*   [Unsigned transactions](/learn/transaction-types/#unsigned-transactions)\n    \n*   [Inherent transactions](/learn/transaction-types/#inherent-transactions)\n    \n\nIn Substrate, all three transaction types are often more broadly referred to as **extrinsics**. The term extrinsic is generally used to mean any information that originates outside of the runtime.\n\nHowever, for practical purposes, it is more useful to consider each transaction type independently and identify scenarios where each type would be most applicable.\n\n### [](/learn/transaction-types/#signed-transactions)\nSigned transactions\n\nSigned transactions must include the signature of an account sending an inbound request to execute some runtime call. Typically, the request is signed using the private key for the account that is submitting the request. In most cases, the account submitting the request also pays a transaction fee. However, transaction fees and other elements of transaction processing depend on how the runtime logic is defined.\n\nSigned transactions are the most common type of transaction. As an example, assume you have an account with some number of tokens. If you want to transfer tokens to Alice, you can call the `pallet_balances::Call::transfer` function in the Balances pallet. Because your account is used to make this call, your account key is used to sign the transaction. As the requester, you would typically be responsible for paying a fee to have your request processed. Optionally, you could also tip the block author to give your transaction higher priority.\n\n### [](/learn/transaction-types/#unsigned-transactions)\nUnsigned transactions\n\nUnsigned transactions don't require a signature and don't include any information about who submitted the transaction.\n\nWith an unsigned transaction, there's no economic deterrent to prevent spam or replay attacks. You must define the conditions for validating unsigned transactions and the logic required to protect the network from misuse and attacks. Because unsigned transactions require custom validation, this transaction type consumes more resources than a signed transaction.\n\nThe `pallet_im_online::Call::heartbeat` function uses unsigned transactions to enable validator nodes to send a signal to the network to indicate that the node is online. This function can only be called by a node that's registered as a validator in the network. The function includes internal logic to verify that the node is a validator, allowing the node to call the function using an unsigned transaction to avoid paying any fees.\n\n### [](/learn/transaction-types/#inherent-transactions)\nInherent transactions\n\nInherent transactions\u2014sometimes referred to as inherents\u2014are a special type of unsigned transaction. With this type of transaction, block authoring nodes can add information directly to a block. Inherent transactions can only be inserted into a block by the block authoring node that calls them. Typically, this type of transaction is not gossiped to other nodes or stored in the transaction queue. The data inserted using an inherent transaction is assumed to be valid without requiring specific validation.\n\nFor example, if a block authoring node inserts a timestamp into a block, there is no way to prove that a timestamp is accurate. Instead, validators might accept or reject the block based on whether the timestamp it is within some acceptable range of their own system clocks.\n\nAs an example, the `pallet_timestamp::Call::now` function enables a block authoring node to insert a current timestamp in each block the node produces. Similarly, the `paras_inherent::Call::enter` function enables a parachain collator node to send its relay chain the validation data the relay chain expects.\n\n[](/learn/transaction-types/#what-is-a-block)\nWhat is a block?\n--------------------------------------------------------------\n\nIn Substrate, a block consists of a header and an array of transactions. The header contains the following properties:\n\n*   Block height\n*   Parent hash\n*   Transaction root\n*   State root\n*   Digest\n\nAll of the transactions are bundled together as a series to be executed as defined in the runtime. You'll learn more about transaction ordering in [Transaction lifecycle](/learn/transaction-lifecycle/)\n. The transaction root is a cryptographic digest of this series. This cryptographic digest serves two purposes:\n\n*   It prevents any alterations to the series of transactions after the header has been built and distributed.\n*   It enables light clients to succinctly verify that any given transaction exists in a block given only knowledge of the header.\n\n[](/learn/transaction-types/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------------\n\nNow that you are familiar with transaction types and the information that constitutes a block, explore the following topics to learn more.\n\n*   [Transaction lifecycle](/learn/transaction-lifecycle/)\n    \n*   [State transitions and storage](/learn/state-transitions-and-storage/)\n    \n*   [Transactions, weights, and fees](/build/tx-weights-fees/)\n    \n*   [Transaction format](/reference/transaction-format/)\n    \n*   [Block reference](https://paritytech.github.io/substrate/master/sp_runtime/traits/trait.Block.html)\n    \n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/learn/runtime-development/)\n[Next \u2192](/learn/transaction-lifecycle/)\n\nON THIS PAGE\n\n[What is a transaction?](#what-is-a-transaction)\n[What is a block?](#what-is-a-block)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/transaction-lifecycle/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nTransaction lifecycle\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/transaction-lifecycle.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTransaction lifecycle\n=====================\n\nIn Substrate, transactions contain data to be included in a block. Because the data in transactions originates outside of the runtime, transactions are sometimes more broadly referred to as extrinsic data or as **extrinsics**. However, the most common extrinsics are **signed transactions**. Therefore, this discussion of the transaction lifecycle focuses on how signed transactions are validated and executed.\n\nYou've already learned that signed transactions include the signature of the account sending the request to execute some runtime call. Typically, the request is signed using the private key for the account that is submitting the request. In most cases, the account submitting the request also pays a transaction fee. However, transaction fees and other elements of transaction processing depend on how the runtime logic is defined.\n\n[](/learn/transaction-lifecycle/#where-transactions-are-defined)\nWhere transactions are defined\n-----------------------------------------------------------------------------------------------\n\nAs discussed in [Runtime development](/learn/runtime-development/)\n, the Substrate runtime contains the business logic that defines transaction properties, including:\n\n*   What constitutes a valid transaction.\n*   Whether the transactions are sent as signed or unsigned.\n*   How transactions change the state of the chain.\n\nTypically, you use pallets to compose the runtime functions and to implement the transactions that you want your chain to support. After you compile the runtime, users interact with the blockchain to submit requests that are processed as transactions. For example, a user might submit a request to transfer funds from one account to another. The request becomes a signed transaction that contains the signature for that user account and if there are sufficient funds in the user's account to pay for the transaction, the transaction executes successfully, and the transfer is made.\n\n[](/learn/transaction-lifecycle/#how-transactions-are-processed-on-a-block-authoring-node)\nHow transactions are processed on a block authoring node\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\nDepending on the configuration of your network, you might have a combination of nodes that are authorized to author blocks and nodes that are not authorized for block authoring. If a Substrate node is authorized to produce blocks, it can process the signed and unsigned transactions it receives. The following diagram illustrates the lifecycle of a transaction that's submitted to a network and processed by an authoring node.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='468' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Transaction lifecycle overview](https://docs.substrate.io/static/05e81b6aa161457fbf3aec95141f90a2/277b8/transaction-lifecycle.png)\n\nAny signed or unsigned transaction that's sent to a non-authoring node is gossiped to other nodes in the network and enter their transaction pool until it is received by an authoring node.\n\n[](/learn/transaction-lifecycle/#validating-and-queuing-transactions)\nValidating and queuing transactions\n---------------------------------------------------------------------------------------------------------\n\nAs discussed in [Consensus](/learn/consensus/)\n, a majority of nodes in the network must agree on the order of transactions in a block to agree on the state of the blockchain and to continue securely adding blocks. To reach consensus, two-thirds of the nodes must agree on the order of the transactions executed and the resulting state change. To prepare for consensus, transactions are first validated and queued on the local node in a **transaction pool**.\n\n### [](/learn/transaction-lifecycle/#validating-transactions-in-the-transaction-pool)\nValidating transactions in the transaction pool\n\nUsing rules that are defined in the runtime, the transaction pool checks the validity of each transaction. The checks ensure that only valid transactions that meet specific conditions are queued to be included in a block. For example, the transaction pool might perform the following checks to determine whether a transaction is valid:\n\n*   Is the transaction index\u2014also referred to as the transaction nonce\u2014correct?\n*   Does the account used to sign the transaction have enough funds to pay the associated fees?\n*   Is the signature used to sign the transaction valid?\n\nAfter the initial validity check, the transaction pool periodically checks whether existing transactions in the pool are still valid. If a transaction is found to be invalid or has expired, it is dropped from the pool.\n\nThe transaction pool only deals with the validity of the transaction and the ordering of valid transactions placed in a transaction queue. Specific details on how the validation mechanism works\u2014including handling for fees, accounts, or signatures\u2014can be found in the [`validate_transaction`](https://paritytech.github.io/substrate/master/sp_transaction_pool/runtime_api/trait.TaggedTransactionQueue.html#method.validate_transaction)\n method.\n\n### [](/learn/transaction-lifecycle/#adding-valid-transactions-to-a-transaction-queue)\nAdding valid transactions to a transaction queue\n\nIf a transaction is identified as valid, the transaction pool moves the transaction into a transaction queue. There are two transaction queues for valid transactions:\n\n*   The **ready queue** contains transactions that can be included in a new pending block. If the runtime is built with FRAME, transactions must follow the exact order that they are placed in the ready queue.\n*   The **future queue** contains transactions that might become valid in the future. For example, if a transaction has a `nonce` that is too high for its account, it can wait in the future queue until the appropriate number of transactions for the account have been included in the chain.\n\n### [](/learn/transaction-lifecycle/#invalid-transaction-handling)\nInvalid transaction handling\n\nIf a transaction is invalid\u2014for example, because it is too large or doesn't contain a valid signature\u2014it is rejected and won't be added to a block. A transaction might be rejected for any of the following reasons:\n\n*   The transaction has already been included in a block so it is dropped from the verifying queue.\n*   The transaction's signature is invalid, so it is immediately rejected.\n*   The transaction is too large to fit in the current block, so it is put back in a queue for a new verification round.\n\n[](/learn/transaction-lifecycle/#transactions-ordered-by-priority)\nTransactions ordered by priority\n---------------------------------------------------------------------------------------------------\n\nIf a node is the next block author, the node uses a priority system to order the transactions for the next block. The transactions are ordered from high to low priority until the block reaches the maximum weight or length.\n\nTransaction priority is calculated in the runtime and provided to the outer node as a tag on the transaction. In a FRAME runtime, a special pallet is used to calculate priority based on the weights and fees associated with the transaction. This priority calculation applies to all types of transactions with the exception of inherents. Inherents are always placed first using the [`EnsureInherentsAreFirst`](https://paritytech.github.io/substrate/master/frame_support/traits/trait.EnsureInherentsAreFirst.html)\n trait.\n\n### [](/learn/transaction-lifecycle/#account-based-transaction-ordering)\nAccount-based transaction ordering\n\nIf your runtime is built with FRAME, every signed transaction contains a nonce that is incremented every time a new transaction is made by a specific account. For example, the first transaction from a new account has `nonce = 0` and the second transaction for the same account has `nonce = 1`. The block authoring node can use the nonce when ordering the transactions to include in a block.\n\nFor transactions that have dependencies, the ordering takes into account the fees that the transaction pays and any dependency on other transactions it contains. For example:\n\n*   If there is an unsigned transaction with `TransactionPriority::max_value()` and another signed transaction, the unsigned transaction is placed first in the queue.\n*   If there are two transactions from _different_ senders, the `priority` determines which transaction is more important and should be included in the block first.\n*   If there are two transactions from the _same_ sender with an identical `nonce`: only one transaction can be included in the block, so only the transaction with the higher fee is included in the queue.\n\n[](/learn/transaction-lifecycle/#executing-transactions-and-producing-blocks)\nExecuting transactions and producing blocks\n-------------------------------------------------------------------------------------------------------------------------\n\nAfter valid transactions are placed in the transaction queue, a separate **executive module** orchestrates how transactions are executed to produce a block. The executive module calls functions in the runtime modules and executes those functions in specific order.\n\nAs a runtime developer, it's important to understand how the executive module interacts with the system pallet and the other pallets that compose the business logic for your blockchain because you can insert logic for the executive module to perform as part of the following operations:\n\n*   Initializing a block\n*   Executing the transactions to be included in a block\n*   Finalizing block building\n\n### [](/learn/transaction-lifecycle/#initialize-a-block)\nInitialize a block\n\nTo initialize a block, the executive module first calls the `on_initialize` function in the system pallet and then in all other runtime pallets. The `on_initialize` function enables you to define business logic that should be completed before transactions are executed. The system pallet `on_initialize` function is always executed first. The remaining pallets are called in the order they are defined in the `construct_runtime!` macro.\n\nAfter all of `on_initialize` functions have been executed, the executive module checks the parent hash in the block header and the trie root to verify that the information is correct.\n\n### [](/learn/transaction-lifecycle/#executing-transactions)\nExecuting transactions\n\nAfter the block has been initialized, each valid transaction is executed in order of transaction priority. It is important to remember that the state is not cached prior to execution. Instead, state changes are written directly to storage during execution. If a transaction were to fail mid-execution, any state changes that took place before the failure would not be reverted, leaving the block in an unrecoverable state. Before committing any state changes to storage, the runtime logic should perform all necessary checks to ensure the extrinsic will succeed.\n\nNote that [events](/build/events-and-errors/)\n are also written to storage. Therefore, the runtime logic should not emit an event before performing the complementary actions. If a transaction fails after an event is emitted, the event is not reverted.\n\n### [](/learn/transaction-lifecycle/#finalizing-a-block)\nFinalizing a block\n\nAfter all queued transactions have been executed, the executive module calls into each pallet's `on_idle` and `on_finalize` functions to perform any final business logic that should take place at the end of the block. The modules are again executed in the order that they are defined in the `construct_runtime!` macro, but in this case, the `on_finalize` function in the system pallet is executed last.\n\nAfter all of the `on_finalize` functions have been executed, the executive module checks that the digest and storage root in the block header match what was calculated when the block was initialized.\n\nThe `on_idle` function also passes through the remaining weight of the block to allow for execution based on the usage of the blockchain.\n\n[](/learn/transaction-lifecycle/#block-authoring-and-block-imports)\nBlock authoring and block imports\n-----------------------------------------------------------------------------------------------------\n\nSo far, you have seen how transactions are included in a block produced by the local node. If the local node is authorized to produce blocks, the transaction lifecycle follows a path like this:\n\n1.  The local node listens for transactions on the network.\n2.  Each transaction is verified.\n3.  Valid transactions are placed in the transaction pool.\n4.  The transaction pool orders the valid transactions in the appropriate transaction queue and the executive module calls into the runtime to begin the next block.\n5.  Transactions are executed and state changes are stored in local memory.\n6.  The constructed block is published to the network.\n\nAfter the block is published to the network, it is available for other nodes to import. The block import queue is part of the outer node in every Substrate node. The block import queue listens for incoming blocks and consensus-related messages and adds them to a pool. In the pool, incoming information is checked for validity and discarded if it isn't valid. After verifying that a block or message is valid, the block import queue imports the incoming information into the local node's state and adds it to the database of blocks that the node knows about.\n\nIn most cases, you don't need to know details about how transactions are gossiped or how blocks are imported by other nodes on the network. However, if you plan to write any custom consensus logic or want to know more about the implementation of the block import queue, you can find details in the Rust API documentation.\n\n*   [`ImportQueue`](https://paritytech.github.io/substrate/master/sc_consensus/import_queue/trait.ImportQueue.html)\n    \n*   [`Link`](https://paritytech.github.io/substrate/master/sc_consensus/import_queue/trait.Link.html)\n    \n*   [`BasicQueue`](https://paritytech.github.io/substrate/master/sc_consensus/import_queue/struct.BasicQueue.html)\n    \n*   [`Verifier`](https://paritytech.github.io/substrate/master/sc_consensus/import_queue/trait.Verifier.html)\n    \n*   [`BlockImport`](https://paritytech.github.io/substrate/master/sc_consensus/block_import/trait.BlockImport.html)\n    \n\n[](/learn/transaction-lifecycle/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------------------\n\n*   [Seminar: Lifecycle of a transaction](https://www.youtube.com/watch?v=3pfM0GOp02c)\n    \n*   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n    \n\n**Last edit:** February 16, 2024\n\n[\u2190 Previous](/learn/transaction-types/)\n[Next \u2192](/learn/state-transitions-and-storage/)\n\nON THIS PAGE\n\n[Where transactions are defined](#where-transactions-are-defined)\n[How transactions are processed on a block authoring node](#how-transactions-are-processed-on-a-block-authoring-node)\n[Validating and queuing transactions](#validating-and-queuing-transactions)\n[Transactions ordered by priority](#transactions-ordered-by-priority)\n[Executing transactions and producing blocks](#executing-transactions-and-producing-blocks)\n[Block authoring and block imports](#block-authoring-and-block-imports)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/welcome-to-substrate/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nWelcome to Substrate\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/welcome-to-substrate.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nWelcome to Substrate\n====================\n\nSubstrate is a Software Development Kit (SDK) that allows you to build application-specific blockchains that can run as standalone services or in parallel with other chains with the shared security provided by the Polkadot ecosystem.\n\n[](/learn/welcome-to-substrate/#simplicity-with-the-freedom-to-innovate)\nSimplicity with the freedom to innovate\n----------------------------------------------------------------------------------------------------------------\n\nWith Substrate, you have complete creative control over the application you want to build. You can select predefined application logic from a large library of open source modules and templates to speed your development time. Not finding what you need in the current library? That\u2019s not a problem\u2014it\u2019s an opportunity to build custom modules from reusable Rust macros and scaffolding code. If you\u2019re feeling more adventurous or have a novel idea, you\u2019re free to innovate on the blockchain design by using low-level primitives.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='876.9433465085639' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Development time and complexity](https://docs.substrate.io/static/c9882d38950de8f51743890233f18ef6/3c520/development-complexity.png)\n\n[](/learn/welcome-to-substrate/#building-with-templates-and-modules)\nBuilding with templates and modules\n--------------------------------------------------------------------------------------------------------\n\nMost projects start with templates to reduce complexity and development time, then progress by modifying existing modules and adding new ones. The modules, macros, and libraries are the core components of the FRAME development environment. The main purpose of FRAME is to provide a modular and flexible collection of components for building a customized Substrate runtime.\n\nThe FRAME development environment enables you to select and configure the specific modules\u2014called **pallets**\u2014that you want to use in your runtime. Pallets provide customizable business logic for common use cases like managing account balances and voting on proposals. Pallets also provide the business logic for blockchain operations such as staking and consensus.\n\n[](/learn/welcome-to-substrate/#composing-a-runtime)\nComposing a runtime\n------------------------------------------------------------------------\n\nEach pallet defines specific types, storage items, and functions to implement a specific set of features or functionality for a runtime. You select and combine the pallets that suit your application to compose a custom runtime. For example, if your application needs to manage account balances, you can simply include the Balances pallet in the configuration of your runtime logic. You can then modify the configuration of the pallet in your custom runtime to suit your application.\n\nIn the following diagram, the runtime is composed of nine pallets to implement consensus, include timestamps for blocks, manage assets and balances, and prepare a framework for governance and managing pooled funds.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1463' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Select pallets to compose the runtime](https://docs.substrate.io/static/64b2fcb61748ae77f4dd4c9ce63872b1/ee8ba/compose-runtime.png)\n\nIn addition to the pallets that provide the functionality you choose to use in the runtime, FRAME relies on a few underlying system services to construct and enable the client outer node services to interact with the runtime. These underlying services are provided by the following required modules:\n\n*   FRAME system crate frame\\_system provides low-level types, storage, and functions for the runtime.\n*   FRAME support crate frame\\_support is a collection of Rust macros, types, traits, and modules that simplify the development of Substrate pallets.\n*   FRAME executive pallet frame\\_executive orchestrates the execution of incoming function calls to the respective pallets in the runtime.\n\nThere are a lot of pallets available for you to use as building blocks for your runtime. You can see the list of pallets available in the Substrate repository or in the Rust documentation. For a summary with a brief description of the most common pallets, see FRAME pallets.\n\nIf you can\u2019t find a pallet that provides the functionality you need, you can use FRAME to create your own custom pallet, then add that custom pallet to your customized runtime.\n\n[](/learn/welcome-to-substrate/#building-with-custom-pallets)\nBuilding with custom pallets\n------------------------------------------------------------------------------------------\n\nThe FRAME development environment includes libraries that make it relatively easy to build your own custom pallets. With custom pallets, you have the flexibility to define the runtime behavior that best suits your application. Because each pallet has its own discrete logic, you can combine existing open source pallets with custom pallets to provide the specific features or functionality your application requires. For example, you might include the Balances pallet in your runtime to use its functions and storage items for managing account balances, but add a custom pallet to send notifications to a service when an account balance changes.\n\n[](/learn/welcome-to-substrate/#why-you-should-build-with-substrate)\nWhy you should build with Substrate\n--------------------------------------------------------------------------------------------------------\n\nSubstrate is a fully **modular** and **flexible** framework that lets you compose a chain by selecting and customizing the infrastructure components best suited to your project. For example, you can change the network stack, consensus model, transaction format, or governance method to deploy a blockchain that's uniquely designed for your application, but that can also evolve with your changing needs.\n\nIn addition to being composable and adaptable, Substrate is designed to be **upgradeable**. The state transition logic\u2014the Substrate runtime\u2014is a self-contained WebAssembly object that you can change completely whenever you need to introduce new features or update existing features. Because the runtime is a self-contained object, you can introduce runtime upgrades across the network without disrupting service or requiring nodes to be taken offline. In most cases, no action is required for nodes to operate with a new runtime, so you can evolve your network protocols seamlessly over time to meet the needs of your users.\n\nSubstrate is also an **open source** project and all of the Substrate libraries and tools are available under open-source licensing. In addition, core components of the Substrate framework use open protocols such as `libp2p` and `jsonRPC` while empowering you to decide how much you want to customize your blockchain architecture. Substrate also has a large, active, and helpful builder community contributing to the ecosystem. Contributions from the community enhance the capabilities available for you to incorporate into your own blockchain as it evolves.\n\nSubstrate supports **cross-consensus messaging (XCM)** to enable disparate systems to pass messages to each other.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/learn/)\n[Next \u2192](/learn/blockchain-basics/)\n\nON THIS PAGE\n\n[Simplicity with the freedom to innovate](#simplicity-with-the-freedom-to-innovate)\n[Building with templates and modules](#building-with-templates-and-modules)\n[Composing a runtime](#composing-a-runtime)\n[Building with custom pallets](#building-with-custom-pallets)\n[Why you should build with Substrate](#why-you-should-build-with-substrate)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/xcm-communication/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nXcm communication\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/xcm-communication.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nCross-consensus messaging\n=========================\n\nCross-consensus communication relies on a message format\u2014XCM\u2014that is designed to provide a generalized and extensible set of instructions for completing transactions across boundaries created by different consensus systems, transaction formats, and transport protocols.\n\nThe XCM format expresses the content of the message. Each message consists of a set of **instructions** being requested by a **sender** that can be accepted or rejected by a message **recipient**. The message format is completely independent of the **message protocol** used to send and receive messages.\n\n[](/learn/xcm-communication/#message-protocols)\nMessage protocols\n-----------------------------------------------------------------\n\nIn the Polkadot ecosystem, there are three main communication channels\u2014the message protocols\u2014used to transport messages between chains:\n\n*   Upward message passing (UMP) enables a parachain to pass messages up to its relay chain.\n*   Downward message passing (DMP) enables the relay chain to pass messages down to a parachain.\n*   Cross-consensus message passing (XCMP) enables parachains to exchange messages with other parachains that are connected to the same relay chain.\n\nThe upward and downward message passing protocols provide a vertical message passing channel. Cross-consensus message passing can be thought of as a horizontal\u2014parachain-to-parachain\u2014transport protocol. Because the full cross-consensus message passing (XCMP) protocol is still under development, horizontal relay-routed message passing (HRMP) provides an interim solution for routing messages intended for a parachain through the relay chain. Horizontal relay-routed message passing (HRMP) is intended to be a temporary solution that will be deprecated when XCMP is released to production.\n\nAlthough these message passing protocols are the primary means of communication between chains in the Polkadot ecosystem, XCM itself isn't limited by these transport protocols. Instead, you can use XCM to express many common types of transactions regardless of where the message originates and its destination. For example, you can construct messages that are routed from smart contracts or pallets, over bridges, or using transport protocols that aren't part of the Polkadot ecosystem at all.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1740.8194233687404' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![XCM provides message content separate from message delivery](https://docs.substrate.io/static/b0d45f2ae0f2d3f4bc411ee44623bda3/3f7aa/xcm-channel-overview.png)\n\nBecause XCM is specifically designed to communicate what should be done by a receiving system, it can provide a flexible and agnostic transaction format for many common types of transactions.\n\n[](/learn/xcm-communication/#messages-in-the-xcm-format)\nMessages in the XCM format\n-----------------------------------------------------------------------------------\n\nThere are four important principles you should understand about messages that use the XCM format:\n\n*   Messages are **asynchronous**. After you send a message, there's no expectation that sending system should wait for a response that indicates the message was delivered or executed.\n*   Messages are **absolute** in that they are guaranteed to be delivered and interpreted **in order** and executed **efficiently**.\n*   Messages are **asymmetric** and don't return any results back to the sender. You can only communicate results back to the sender separately using an additional message.\n*   Messages are **agnostic** and make no assumptions about the consensus systems between which messages are passed.\n\nWith these basic principles in mind, you can start constructing messages using XCM. In Rust, a message is defined like this:\n\n    pub struct Xcm<Call>(pub Vec<Instruction<Call>>);\n\nAs this definition indicates, the message is simply a call to execute an ordered set of instructions. The `Instruction` type is an enumeration data type and the order in which the variants are defined reflects generally the order in which they are used when constructing a message. For example, the `WithdrawAsset` is the first variant because it is typically be executed before other instructions\u2014such as `BuyExecution` or `DepositAsset`\u2014in the ordered list of instructions.\n\nMost of the XCM instructions enable you to perform common tasks such as transfer an asset to a new location or deposit an asset in a different account. The instructions that perform these types of tasks allow you to construct consistent messages that do what you expect them to do regardless of how the consensus system you communicate with is configured. However, you also have the flexibility to customize how instructions are executed or to use the `Transact` instruction.\n\nThe `Transact` instruction allow you to execute any callable function exposed by the recipient of a message. By using the `Transact` instruction, you can make a generic call to any function on the receiving system, but it requires you to know something about how that system is configured. For example, if you want to call a specific pallet of another parachain, you must know how the receiving runtime is configured to construct the correct message to reach the correct pallet. This information can vary from chain to chain because every runtime can be configured differently.\n\n[](/learn/xcm-communication/#execution-in-a-virtual-machine)\nExecution in a virtual machine\n-------------------------------------------------------------------------------------------\n\nThe cross-consensus virtual machine (XCVM) is a high level virtual machine with an XCM executor program that executes the XCM instructions it receives. The program executes the instructions in order until it runs to the end or encounters an error and stops execution.\n\nAs XCM instructions are executed, the XCVM maintains its internal state through the use of several specialized registers. The XCVM also has access to the state of the underlying consensus system where the instructions are executing. Depending on the operations performed, the XCM instructions might change a register, the state of the consensus system, or both.\n\nFor example, the `TransferAsset` instruction specifies an asset to transfer and where the asset is to be transferred. When this instruction is executed, the **origin register** is automatically set to reflect where the message came from and, from that information, identify where assets to be transferred should be taken from. Another register that is manipulated when executing XCM instructions is the **holding register**. The holding register is used to store assets temporarily while waiting for additional instructions for what should be done with them.\n\nThere are several other registers in the XCVM to handle specific tasks. For example, there's a surplus weight register to store any overestimation of fees and a refunded weight register to store the portion of surplus weight that has been refunded. In general, you can't modify the values stored in the registers directly. Instead, values are set when the XCM executor program starts and are manipulated by specific instructions, under certain circumstances, or according to certain rules. For more information about what's contained in each register, see [XCM reference](/reference/xcm-reference/)\n.\n\n### [](/learn/xcm-communication/#configuration)\nConfiguration\n\nLike other components in Substrate and FRAME-based chains, the XCM executor is modular and configurable. You can configure many aspects of the XCM executor program using the `Config` trait and customize the implementation to handle XCM instructions in different ways. For example, the `Config` trait provides the following type definitions:\n\n    /// The trait to parameterize the `XcmExecutor`.\n    pub trait Config {\n        /// The outer call dispatch type.\n        type Call: Parameter + Dispatchable<PostInfo = PostDispatchInfo> + GetDispatchInfo;\n        /// How to send an onward XCM message.\n        type XcmSender: SendXcm;\n        /// How to withdraw and deposit an asset.\n        type AssetTransactor: TransactAsset;\n        /// How to get a call origin from a `OriginKind` value.\n        type OriginConverter: ConvertOrigin<<Self::Call as Dispatchable>::Origin>;\n        /// Combinations of (Location, Asset) pairs trusted as reserves.\n        type IsReserve: FilterAssetLocation;\n        /// Combinations of (Location, Asset) pairs trusted as teleporters.\n        type IsTeleporter: FilterAssetLocation;\n        /// Means of inverting a location.\n        type LocationInverter: InvertLocation;\n        /// Whether to execute the given XCM at all.\n        type Barrier: ShouldExecute;\n        /// Handler for estimating weight for XCM execution.\n        type Weigher: WeightBounds<Self::Call>;\n        /// Handler for purchasing weight credit for XCM execution.\n        type Trader: WeightTrader;\n        /// Handler for the response to a query.\n        type ResponseHandler: OnResponse;\n        /// Handler for assets in the Holding register after execution.\n        type AssetTrap: DropAssets;\n        /// Handler for when there is an instruction to claim assets.\n        type AssetClaims: ClaimAssets;\n        /// Handler version subscription requests.\n        type SubscriptionService: VersionChangeNotifier;\n    }\n\nThe configuration settings and the XCM set of instructions\u2014the message or, more accurately, the program to be executed on the receiving system\u2014act as input to the XCM executor. With additional types and functions provided by XCM builder modules, the XCM executor interprets and executes the operations contained in the instructions one at a time in the order provided. The following diagram provides a simplified overview of the workflow.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1090.699904122723' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![XCM configuration and execution](https://docs.substrate.io/static/2d81fb1433ac45ac31e641c4a2078390/46851/xcvm-overview.png)\n\n[](/learn/xcm-communication/#locations)\nLocations\n-------------------------------------------------\n\nBecause XCM is a language for communicating between different consensus systems, it must have an abstract way to express locations in a general, flexible, and unambiguous way. For example, XCM must be able to identify the location for the following types of activity:\n\n*   where an instruction should be executed.\n*   where an asset should be withdrawn from.\n*   where an account to receive assets can be found.\n\nFor any of these activities, the location might be in the context of a relay chain, a parachain, a foreign chain, an account on a specific chain, a specific smart contract, or an individual pallet. For example, XCM must be able to identify the following types of locations:\n\n*   A layer-0 chain such as the Polkadot or Kusama relay chain.\n*   A layer-1 chain such as the Bitcoin or Ethereum mainnet or a parachain.\n*   A layer-2 smart contract such as an ERC-20 on Ethereum.\n*   An address on a parachain or Ethereum.\n*   An account on a relay chain or parachain.\n*   A specific pallet on a Frame-based Substrate chain.\n*   A single instance of a pallet on a Frame-based Substrate chain.\n\nTo describe the location within the context of a consensus system, XCM uses the `MultiLocation` type. The `MultiLocation` type expresses a location that is relative to the current location and consists of two parameters:\n\n*   `parents: u8` to describe the number of levels to travel up from the current consensus location before interpreting the `interior` parameter.\n*   `interior: InteriorMultiLocation` to describe a location interior to the outer consensus system after ascending the relative path as specified using the `parents` parameter.\n\nThe `InteriorMultiLocation` identifies a consensus system interior to the local consensus system using the concept of **junctions**, with each junction specifying a location further internal to the previous. An `InteriorMultiLocation` with no junctions simply refers to the local consensus system (Here). You can use junctions to specify an interior context for XCM instructions as a parachain, an account, or a pallet instance relative to the outer consensus.\n\nFor example, the following parameters refer to a parachain with the unique identifier 1000 from the context of the relay chain:\n\n    { \"parents\": 1,\n    \"interior\": { \"X1\": [{ \"Parachain\": 1000 }]}\n    }\n\nIn this example, the `parents` parameter ascends one level to the parent chain and `interior` specifies an interior location with a junction type of `Parachain` and an index of `1000`.\n\nIn text, a MultiLocation follows the convention used to describe file system paths. For example, the MultiLocation expressed as `../PalletInstance(3)/GeneralIndex(42)` describes a MultiLocation with one parent (..) and two junctions (`PalletInstance{index: 3}`) and (`GeneralIndex{index: 42}`).\n\nFor more information about specifying locations and junctions, see [Universal consensus location identifiers](https://github.com/paritytech/xcm-format#7-universal-consensus-location-identifiers)\n.\n\n[](/learn/xcm-communication/#assets)\nAssets\n-------------------------------------------\n\nMost blockchains depend on some type of digital asset to provide economic incentives that are crucial to the security of the network. Some blockchains support a single native asset. Other blockchains allow multiple assets to be managed on-chain, for example, as assets defined in smart contracts or non-native tokens. There are also blockchains that support non-fungible digital assets for one-of-a-kind collectibles. For XCM to support these different types of assets, it must be able to express assets in a general, flexible, and unambiguous way.\n\nTo describe on-chain assets, XCM uses the `MultiAsset` type. The `MultiAsset` type specifies the asset identity and whether the asset is fungible or non-fungible. Typically, the asset identity is specified using a concrete location. If the asset is fungible, the definition includes an amount.\n\nAlthough it's possible to identify an asset using an abstract identifier, concrete identifiers are an unambiguous way of identifying an asset without a global registry of asset names.\n\nConcrete identifiers specifically identify a single asset through its location in a consensus system relative to the context interpreting. However, it's worth noting that the concrete asset identifier can't just be copied between consensus systems. Instead, the asset is moved using the relative path for each consensus system. The relative paths must be constructed to be read from the point of view of the receiving system.\n\nFor native assets\u2014such as DOT on the Polkadot relay chain\u2014the asset identifier is typically the chain that mints the asset or up one level (`..`) from the context of one its parachains. If an assets is managed from within a pallet, the asset identifier specifies a location using the pallet instance identifier and the index within that pallet. For example, the Karura parachain might refer to an asset on the Statemine parachain with the location `../Parachain(1000)/PalletInstance(50)/GeneralIndex(42)`.\n\nFor more information about specifying locations and junctions, see [Universal asset identifiers](https://github.com/paritytech/xcm-format#6-universal-asset-identifiers)\n.\n\n[](/learn/xcm-communication/#instructions)\nInstructions\n-------------------------------------------------------\n\nMost of the XCM instructions enable you to construct consistent messages that do what you expect regardless of how the consensus system you communicate with is configured. However, you also have the flexibility to use the `Transact` instruction to execute any callable function exposed by the recipient of the message. By using the `Transact` instruction, you can make a generic call to any function on the receiving system, but it requires you to know something about how that system is configured. For example, if you want to call a specific pallet of another parachain, you must know how the receiving runtime is configured to construct the correct message to reach the correct pallet. This information can vary from chain to chain because every runtime can be configured differently.\n\n**Last edit:** February 23, 2024\n\n[\u2190 Previous](/learn/consensus/)\n[Next \u2192](/install/)\n\nON THIS PAGE\n\n[Message protocols](#message-protocols)\n[Messages in the XCM format](#messages-in-the-xcm-format)\n[Execution in a virtual machine](#execution-in-a-virtual-machine)\n[Locations](#locations)\n[Assets](#assets)\n[Instructions](#instructions)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/learn/what-can-you-build/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    *   [Welcome to Substrate](/learn/welcome-to-substrate/)\n        \n    *   [Blockchain basics](/learn/blockchain-basics/)\n        \n    *   [Architecture and Rust libraries](/learn/architecture/)\n        \n    *   [Networks and nodes](/learn/networks-and-nodes/)\n        \n    *   [What can you build](/learn/what-can-you-build/)\n        \n    *   [Runtime development](/learn/runtime-development/)\n        \n    *   [Transactions and block basics](/learn/transaction-types/)\n        \n    *   [Transaction lifecycle](/learn/transaction-lifecycle/)\n        \n    *   [State transitions and storage](/learn/state-transitions-and-storage/)\n        \n    *   [Accounts, addresses, and keys](/learn/accounts-addresses-keys/)\n        \n    *   [Rust for Substrate](/learn/rust-basics/)\n        \n    *   [Offchain operations](/learn/offchain-operations/)\n        \n    *   [Light clients in Substrate Connect](/learn/light-clients-in-substrate-connect/)\n        \n    *   [Cryptography](/learn/cryptography/)\n        \n    *   [Consensus](/learn/consensus/)\n        \n    *   [Cross-consensus messaging](/learn/xcm-communication/)\n        \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Learn](/learn/)\nWhat can you build\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/learn/what-can-you-build.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nWhat you can build\n==================\n\nOne of the first decisions you need to make in designing your application is the approach you want to use. For example, you need to decide whether your project is best suited to be delivered in the form of a smart contract, an individual pallet, a custom runtime, or a parachain. The decision about what to build will affect almost all of other decisions you'll need to make. To help you make that initial determination about what to build, this section highlights the options available, the differences between them, and the reasons you might select one approach over another.\n\n[](/learn/what-can-you-build/#smart-contracts)\nSmart contracts\n--------------------------------------------------------------\n\nMany developers are familiar with smart contracts and are naturally inclined to think that their project is well-suited to the smart contract model. However, there are both benefits and drawbacks to consider in determining whether the smart contract approach is right for your project.\n\n### [](/learn/what-can-you-build/#smart-contracts-must-adhere-to-blockchain-rules)\nSmart contracts must adhere to blockchain rules\n\nSmart contracts are instructions that are deployed on a specific chain and run on a specific chain address. Because smart contracts run on an underlying blockchain that they don't control, they must comply with any rules or limitations that the underlying chain imposes. For example, the underlying blockchain might restrict access to storage or prevent certain types of transactions.\n\nIn addition, blockchains that accept smart contracts typically treat the code as coming from an untrusted source\u2014potentially a malicious actor or inexperienced developer. To prevent untrusted code from disrupting blockchain operations, the underlying blockchain implements native safeguards to limit what a malicious or faulty smart contract can do. For example, the underlying chain might charge fees or enforce metering to ensure that contract developers or users are charged for the computation and storage the contract consumes. The fees and rules for contract execution are at the discretion of the underlying chain.\n\n### [](/learn/what-can-you-build/#smart-contracts-and-state)\nSmart contracts and state\n\nYou can think of smart contracts as executing in a sandboxed environment. They don't modify the underlying blockchain storage or the storage of other contracts directly. In general, smart contracts only modify their own state and don't make calls to other contracts or to runtime functions. There's typically some additional overhead for running smart contracts to ensure that the underlying blockchain can revert transactions to prevent state from being updated if errors in a contract cause execution to fail.\n\n### [](/learn/what-can-you-build/#scenarios-for-using-smart-contracts)\nScenarios for using smart contracts\n\nAlthough there are limitations to smart contracts, there are scenarios where your project might benefit from using smart contracts. For example, smart contracts have lower barrier to entry and can often be built and deployed in a short period of time. The reduced development time might give you an advantage in determining product-to-market fit and iterating quickly.\n\nSimilarly, if you're familiar with building smart contracts using a language like Solidity, you can reduce the learning curve and time-to-market for your project. Because smart contracts adhere to the functionality of the chain where they are deployed, you can focus more narrowly on implementing the application logic of the contract without worrying about blockchain infrastructure or economics.\n\nIf you are planning to build a parachain, you can also use smart contracts to prototype features or functionality in an isolated way that doesn't affect the underlying network before investing in a more full-scale solution. If you are a runtime developer, you can incorporate contracts to allow your community to extend and develop features for your runtime without granting them access to the underlying runtime logic. You can also use smart contracts to test future runtime changes.\n\nIn general, you should consider the following characteristics when deciding whether to build your project using smart contracts:\n\n*   They are inherently safer for the network because safeguards are built into the underlying chain, but you have no control over any restrictions, limitations, or computational overhead imposed by those safeguards.\n*   The underlying chains provides the built-in economic incentives against abuse, but the fee and metering system is defined by the underlying chain.\n*   They have a lower barrier to entry in terms of code complexity and time to deployment.\n*   They can provide an isolated environment for prototyping, testing, and community engagement.\n*   They have lower deployment and maintenance overhead because you take advantage of an existing network.\n\nThe following examples illustrate use cases for smart contracts:\n\n*   Add a derivative to an existing decentralized exchange (DEX).\n*   Implement a custom trading algorithm.\n*   Define logic for a contract between specific parties.\n*   Prototype and test an application before converting it to parachain.\n*   Introduce layer-2 tokens and custom assets on an existing chain.\n\n### [](/learn/what-can-you-build/#support-for-smart-contracts)\nSupport for smart contracts\n\nThe Polkadot relay chain doesn't support smart contracts. However, the parachains that connect to Polkadot can support arbitrary state transitions, so any parachain can be a potential platform for smart contract deployment. For example, there are several parachains in the current Polkadot ecosystem that support different types of smart contract deployment. If you plan to develop a smart contract for the Polkadot ecosystem, you must first decide on the type of smart contract you want to build and identify a parachain that supports that type of smart contract. Substrate provides tools to support two types of smart contracts:\n\n*   The `contracts` pallet in the FRAME library enables a Substrate-based chain to execute smart contracts compiled to WebAssembly regardless of the language used to write the smart contract.\n*   The `evm` pallet in the Frontier project enables a Substrate-based chain to run Ethereum virtual machine (EVM) contracts written in Solidity.\n\n### [](/learn/what-can-you-build/#explore-smart-contracts)\nExplore smart contracts\n\nIf your project seems well-suited to be a smart contracts, you can see some simple examples to get you started in the following tutorials:\n\n*   [Develop smart contracts](/tutorials/smart-contracts/)\n    \n*   [Access EVM accounts](/tutorials/integrate-with-tools/access-evm-accounts/)\n    \n\n[](/learn/what-can-you-build/#individual-pallets)\nIndividual pallets\n--------------------------------------------------------------------\n\nIn some cases, you might want to implement application logic as a standalone pallet and make the functionality available to the community as a library rather than building your own custom runtime. For example, if you don\u2019t want to deploy and manage an application-specific blockchain, you might build one or more individual pallets to provide features that are broadly useful across all Substrate-based chains, that improve existing functionality, or that define a standard for the Polkadot ecosystem. Individual pallets are typically easy to develop by using FRAME and easy for Substrate chains to integrate.\n\n### [](/learn/what-can-you-build/#writing-correct-code)\nWriting correct code\n\nIt's worth noting that pallets don't inherently provide any type of protection or safeguards that smart contracts provide. With pallets, you control the logic available for runtime developers to implement. You provide the methods, storage items, events, and errors that your module requires. Pallets don't inherently introduce a fee or metering system. It is up to you to ensure that your pallet logic doesn't allow bad behavior or leave the network where your pallet is used vulnerable to attacks. This lack of built-in safeguards implies that you have a great deal of responsibility to write code that avoids mistakes.\n\n### [](/learn/what-can-you-build/#pallets-outside-of-runtime-development)\nPallets outside of runtime development\n\nOften, writing a pallet is the gateway to runtime development, giving you the opportunity to experiment with existing pallets and coding patterns without building a complete blockchain application. Individual pallets also provide an alternative way you can contribute to a project without writing your own application.\n\nAlthough writing and testing pallets is typically a stepping stone to building larger scale application, there are many examples of the value individual pallets can have to the ecosystem as a whole.\n\nEven if you are building a single pallet, you'll need to test it in the context of a runtime. The main disadvantage of developing individual pallets is that you don't have control over any other part of the runtime where they are used. If you treat your pallet as isolated code, you might miss opportunities to enhance or improve it. In addition, changes to FRAME or Substrate can create maintenance issues for your individual pallets if you don't update your code to stay synchronized with those changes.\n\n### [](/learn/what-can-you-build/#explore-building-pallets)\nExplore building pallets\n\nIf your project seems well-suited to be an individual pallet, you can see some simple examples to get you started in the following sections:\n\n*   [Custom pallets](/build/custom-pallets/)\n    \n*   [Build application logic](/tutorials/build-application-logic/)\n    \n*   [Collectibles workshop](/tutorials/collectibles-workshop/)\n    \n\n[](/learn/what-can-you-build/#custom-runtime)\nCustom runtime\n------------------------------------------------------------\n\nIn most cases, deciding to build a custom runtime is the critical step toward building and deploying an application-specific parallel blockchain\u2014a parachain\u2014as part of the Polkadot ecosystem. By building with Substrate and FRAME, you can develop a fully-customized runtime. With a custom runtime, you have complete control over all aspects of your application, including economic incentives, governance, consensus, and resource management.\n\nThere are pallets that provide pluggable modules for many of these features. However, it is up to you to decide which modules to use, how to modify them for your needs, and where custom modules are required. Because you control all of the underlying logic that each node in your network runs, there's a higher barrier to entry in terms of coding skill and experience than there is for writing a smart contract or an individual pallet.\n\nAs with individual pallets, a custom runtime doesn't provide any built-in safeguards to prevent bad actors or incorrect code from causing harm. It is up to you to correctly assess the resource consumption and how to apply transaction fees in the runtime logic to adequately protect the network and your user community.\n\nUnlike a smart contract or an individual pallet, a custom runtime is a fully-functioning blockchain. Making the custom runtime accessible and secure for others to use involves acquiring physical or cloud computing resources, building a community that finds value in your service, and managing a network infrastructure.\n\nWith smart contracts, your application runs on top of an existing execution model, limiting what your application can do. With a custom runtime, you control that underlying execution model and can choose to extend it to support smart contract execution for other developers. With a custom runtime, you can also deliver more complex functionality and user interactions than smart contracts or individual pallets can provide.\n\n### [](/learn/what-can-you-build/#explore-building-a-custom-runtime)\nExplore building a custom runtime\n\nIf you want to build a more complete custom runtime rather than an individual pallet, you can start with a simple example like the [Collectibles workshop](/tutorials/collectibles-workshop/)\n. However, if you want to build a custom runtime as a proof-of-concept for a solo chain or a parachain, you'll want a broader and deeper understanding of runtime components and FRAME pallets. The most relevant topics are under [Build](/build/)\n and [Test](/test/)\n and in the following sections:\n\n*   [Runtime storage structures](/build/runtime-storage/)\n    \n*   [Transactions, weights, and fees](/build/tx-weights-fees/)\n    \n*   [Application development](/build/application-development/)\n    \n*   [FRAME pallets](/reference/frame-pallets/)\n    \n*   [FRAME macros](/reference/frame-macros/)\n    \n\n[](/learn/what-can-you-build/#parachain)\nParachain\n--------------------------------------------------\n\nA custom runtime can exist on its own as the business logic for a private network or a solo chain, but if you want your project to be a viable production chain, there are several advantages to deploying the business logic and state transition function for your application as a parachain or parathread.\n\nParachains and parathreads act as independent Layer-1 blockchains. Each parachain has its own logic and runs in parallel with other chains in their ecosystem. All of the chains in the ecosystem benefit from the shared security, governance, scalability, and interoperability of the network.\n\n### [](/learn/what-can-you-build/#parachains-provide-maximum-flexibility)\nParachains provide maximum flexibility\n\nBy developing your project as a parachain, you have a great deal of freedom and flexibility in the design and functionality of the chain. What you decide to build is entirely up to you. For example, you can define what data to store on-chain or off. You can define your own economic primitives, transaction requirements, fee policies, governance model, treasury accounts, and access control rules. Your parachain can have as little\u2014or as much\u2014overhead per transaction as you decide, and your parachain can evolve with upgrades and optimization over time. The only requirement is that your parachain or parathread must be compatible with the Polkadot API.\n\n### [](/learn/what-can-you-build/#planning-parachain-resource-requirements)\nPlanning parachain resource requirements\n\nAs a parachain, your project can offer functionality to a broader community in a more secure way than a private chain or a solo chain. However, if you want to build a production-ready parachain, you should keep the following additional requirements in mind:\n\n*   You'll need a development team with sufficient skills and experience, whether that means programming in Rust or a background in UX design.\n    \n    Parachain development might require more resources than other options.\n    \n*   You'll need to build your community through marketing, outreach, or ecosystem development programs.\n*   You'll need resources for your infrastructure and network maintenance.\n    \n    A parachain is a whole blockchain. Although the relay chain provides security and consensus for your project, you must maintain your chain and network infrastructure. In addition to developer operations (DevOps), you need to secure a parachain slot, design a crowdloan or auction strategy, and accumulate enough resources to extend the slot.\n    \n*   You'll need sufficient time for testing and validating your chain operations, in a sandbox or simulated network and on a fully-functioning test network.\n\n### [](/learn/what-can-you-build/#parachain-use-cases)\nParachain use cases\n\nIn general rule, you should build your project as a parachain if it requires complex operations because parachains provide faster and more efficient execution of transactions. For example, building a parachain might be the best option for the following use cases:\n\n*   Decentralized finance (DeFi) applications\n*   Digital wallets\n*   Internet of things (IOT) applications\n*   Gaming applications\n*   Web 3.0 infrastructure\n\n### [](/learn/what-can-you-build/#explore-building-a-parachain)\nExplore building a parachain\n\nIf you have a custom runtime that you want to deploy as a parachain to take advantage of the security, governance, and interoperability of the relay chain and the Polkadot or Kusama ecosystem, you can start by building locally and setting up your own test network for initial testing.\n\nFor some examples to get you started, see the following sections:\n\n*   [Connect parachains to a network](/tutorials/build-a-parachain/)\n    \n*   [Simulate parachains in a test network](/test/simulate-parachains/)\n    \n*   [Parachains](/reference/how-to-guides/parachains/)\n    \n\nTo learn more about what you can build, explore the following resources:\n\n*   [Build with Polkadot](https://wiki.polkadot.network/docs/build-build-with-polkadot)\n    \n*   [Parachain development](https://wiki.polkadot.network/docs/build-pdk)\n    \n*   [Smart contracts](https://wiki.polkadot.network/docs/build-smart-contracts)\n    \n\n**Last edit:** February 23, 2024\n\n[\u2190 Previous](/learn/networks-and-nodes/)\n[Next \u2192](/learn/runtime-development/)\n\nON THIS PAGE\n\n[Smart contracts](#smart-contracts)\n[Individual pallets](#individual-pallets)\n[Custom runtime](#custom-runtime)\n[Parachain](#parachain)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/maintain/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nMaintain\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/maintain/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nMaintain\n========\n\nIn many ways, deploying your project as a parachain, parathread, paraobject, or private solo chain is the beginning of your journey. To keep your application viable and evolving, it's important to build your community and manage your network, including staying up-to-date with hardware and software upgrades, managing new releases, and maintaining your infrastructure. The topics in this section are intended to highlight\u2014in a generalized form\u2014some of the most important maintenance tasks. However, every project is different and most projects will require their own specialized set of instructions, processes, and policies.\n\n*   [Monitor](/maintain/monitor/)\n     describes the default telemetry available for Substrate nodes and the Polkadot ecosystem, including how to view and filter the information available.\n*   [Runtime upgrades](/maintain/runtime-upgrades/)\n     explains how runtime versioning and storage migration support runtime upgrades, enabling your blockchain to evolve over time.\n\nThe following topics are planned but not available at this time:\n\n*   [Operate](/maintain/operate/)\n    \n*   [Client upgrades](/maintain/client-upgrades/)\n    \n*   [Network upgrades](/maintain/network-upgrades/)\n    \n*   [Storage migration](/maintain/storage-migration/)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/deploy/keys-and-network-operations/)\n[Next \u2192](/maintain/monitor/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/maintain/monitor/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Maintain](/maintain/)\nMonitor\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/maintain/monitor.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nMonitor\n=======\n\nMonitoring network operations and performance is an important part of maintaining a healthy, stable, and secure ecosystem. By default, Substrate nodes provide low-level **telemetry** components to automatically collect and transmit detailed information about the operation of each node in the network. The backend telemetry information is streamed in real time\u2014as it occurs\u2014to an endpoint so that you can observe, monitor, and alert on system behavior.\n\nAs a developer or node operator, there's rarely any need to know the implementation details of how these low-level telemetry components provide information about computer and network operations. At a high level, the information collected from each public node is sent to a default telemetry server and aggregated for display in a front-end dashboard.\n\nThe following diagram provides a simplified overview of the workflow.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='768.5470085470085' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Default telemetry for Substrate nodes](https://docs.substrate.io/static/0b1e648d79668d7f632f915e47f0d70d/b91bc/telemetry-overview.png)\n\n[](/maintain/monitor/#view-telemetry-data)\nView telemetry data\n--------------------------------------------------------------\n\nThe [Polkadot telemetry](https://telemetry.polkadot.io/)\n dashboard provides a real-time view of how currently online nodes are performing. You can choose the information you want to display by turning visible columns on and off from the list of columns available.\n\nTo see the list of columns and modify which columns are displayed, click **Settings**.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='128.8014311270125' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Click Settings to modify the visible columns](https://docs.substrate.io/static/6321062954aa8c256f74e2b4f32d9bcb/677ee/list-view-control.png)\n\nThe columns you can toggle on and off include:\n\n*   **Validator** to display an indicator to differentiate validator nodes from other nodes.\n*   **Location** to display the location of a node.\n*   **Implementation** to display the version of the software running on the node.\n*   **Network ID** to display the public network identifier for the node.\n*   **Peer Count** to display the number of peers connected to the node.\n*   **Transactions in Queue** to display the number of transactions in the Ready queue waiting for a block author.\n*   **Upload Bandwidth** to display a graph of recent upload activity in MB per second.\n*   **Download Bandwidth** to display a graph of recent download activity in MB per second.\n*   **State Cache Size** to display a graph of the state cache size in MB.\n*   **Block** to display the current best block number for the node to ensure it's staying synchronized with its peers.\n*   **Block Hash** to display the block hash for the current best block number for the node.\n*   **Finalized Block** to display the most recently finalized block number for the node to ensure it's staying synchronized with its peers.\n*   **Finalized Block Hash** to display the block hash for the most recently finalized block number for the node.\n*   **Block Time** to display the block execution time between blocks.\n*   **Block Propagation Time** to display the time it took for the node to import the most recent block.\n*   **Last Block Time** to display the time it took for the node to author the most recent block.\n*   **Node Uptime** to display the number of days the node has been online without being restarted.\n\n### [](/maintain/monitor/#pin-node-information)\nPin node information\n\nYou can keep the information for one or more nodes in view in the dashboard by clicking the line displayed for the node in the dashboard list. For example, if you want to keep the information for two nodes visible while the information for other nodes scrolls by, you can select the nodes in the list and pin the information in place.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='146.08195542774982' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Keep information for selected nodes displayed](https://docs.substrate.io/static/d843aed2e0766874508b4df6476ece0d/00682/pin-nodes.png)\n\n### [](/maintain/monitor/#display-nodes-on-a-map)\nDisplay nodes on a map\n\nAs an alternative to the list of nodes, you can display nodes on a global map. The map provides a visual representation of where nodes are located, where blocks are being produced and imported in real time, and where there are higher concentrations of nodes geographically. Note that only nodes that have a known location are displayed in the map.\n\nTo see represented on a map, click **Map**.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='918.5611510791367' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Display nodes on a global map](https://docs.substrate.io/static/45a9f959cc490e9a4e96de1fae2bd89c/88292/node-map-view.png)\n\nIn this view, you can hover over any node location on the map to display a subset of the information available for the node, including the node name, location, best block number, best block hash, and block time statistics.\n\n### [](/maintain/monitor/#display-node-statistics)\nDisplay node statistics\n\nIn addition to the information available for individual nodes, you can view statistics that describe the number and percentage of nodes that share specific attributes. For example, you can see the percentage of nodes that are using each release of Polkadot, the percentage of nodes using the Linux operating system and the most common distributions currently deployed. You can also view statistics about the CPU and memory configuration across nodes in the network.\n\nTo see the full set of statistics available, click **Statistics**.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='114.44600280504909' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![View statistics across nodes](https://docs.substrate.io/static/7b2d614da3e8fb874dba64c5f769f2a0/f79ab/node-statistics.png)\n\nThe statistics available include details about the hardware and software running on the nodes in the network, including:\n\n*   Software version.\n*   Operating system.\n*   CPU architecture and model.\n*   Number of physical CPU cores.\n*   Total memory.\n*   Whether the node is a virtual machine.\n*   Linux distribution and kernel version.\n*   CPU and memory speed.\n*   Disk speed.\n\n### [](/maintain/monitor/#filter-by-chain)\nFilter by chain\n\nBy default, the telemetry dashboard displays information about Polkadot and provides quick links to a subset of other chains. To display information for other chains, click **More** and select a different chain.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='172.5258493353028' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Select other chains](https://docs.substrate.io/static/a50648b10bae846a4d0eb2998415fa32/445df/more-chains.png)\n\n[](/maintain/monitor/#customize-the-monitoring-stack)\nCustomize the monitoring stack\n------------------------------------------------------------------------------------\n\nThe default telemetry dashboard provides visibility into node and chain operations without requiring you to host or configure any backend monitoring or front-end services. However, many projects choose to augment or replace the default telemetry server with their own backend server and front-end dashboards.\n\nIn general, setting up your own telemetry server involves establishing monitoring and alerting policies for both **on-chain events** and individual **node operations**.\n\n### [](/maintain/monitor/#on-chain-activity)\nOn-chain activity\n\nYou can monitor on-chain activity for specific events, such as transactions submitted from a certain address, a change to the current validator set. On-chain monitoring typically involves connecting to RPC nodes to check for specific values, identify processing delays, or track the timing of events. In most cases, you only need two RPC instances to handle requests for all of your hosts. However, it's recommended that you run your own RPC servers to service these requests in case there are issues with the public RPC nodes. Some examples of applications that query on-chain information are [polkabot](https://gitlab.com/Polkabot/polkabot)\n and [polkadot-basic-notification](https://github.com/paritytech/polkadot-basic-notification)\n.\n\n### [](/maintain/monitor/#node-operations)\nNode operations\n\nYou should monitor each node that you run on the network for basic information about its operation such as the current block height, the number of peer-to-peer connections, CPU usage, and the available free memory. By default, Substrate exposes many useful metrics on the `host:9615/metrics` endpoint. For example, if Substrate is running locally, you can see the metrics on the [http://localhost:9615/metrics](http://localhost:9615/metrics)\n endpoint. This endpoint outputs metrics using a simple key-value format. For example:\n\n    polkadot_database_cache_bytes 0\n\nHowever, keys can also include descriptive tags. For example:\n\n    susbtrate_block_height{status=\"best\"} 136\n    susbtrate_block_height{status=\"finalized\"} 133\n\nBy default, the [metrics](http://localhost:9615/metrics)\n endpoint is only be exposed on the local network interface. However, you can expose it on all interfaces by using the `--prometheus-external` command-line option to start a node.\n\n### [](/maintain/monitor/#configure-monitoring-tools)\nConfigure monitoring tools\n\nTo set up monitoring and alerting policies, you typically configure a set of tools to create your own monitoring stack. For example, the default `metrics` endpoint doesn't include host metrics\u2014such as CPU, memory, bandwidth usage\u2014so you can complement it by installing the Prometheus [node\\_exporter](https://github.com/prometheus/node_exporter)\n on each host. The following diagram illustrates an open source set of tools that are often used as a monitoring stack.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='834.8565356004251' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Monitoring stack layers](https://docs.substrate.io/static/a1880cb95d36fc33c1d677a13f6a9d27/39d27/monitoring-stack.png)\n\nAs this diagram illustrates, there are different tools available for each layer of the stack. In this example, the following tools are configured for monitoring on-chain activity and node operations:\n\n*   Prometheus is a monitoring engine that collects metrics from specified targets at specified intervals and evaluates the data collected using rules you define. Its time series database can hold large amounts of data that can be accessed very quickly.\n*   Grafana is an observability platform that allows you to query, visualize, and analyze the data you collect through dashboards and graphs.\n*   Node exporter is process that listens on a port and reports application-specific metrics to Prometheus.\n*   Alertmanager is a tool that enables you to create and route alerts based on the rules you specify. Alertmanager allows you to configure how and where to send alert if something goes wrong. For example, you can send instant messages for warning alerts, but page an on-call technician for critical alerts\n*   Loki is a scalable log aggregation system that allows you to view and search logs from all components in your infrastructure in one place.\n\nFor a simple example of setting up node monitoring using Prometheus, Grafana, and node exporter, see [Monitor node metrics](/tutorials/build-a-blockchain/monitor-node-metrics/)\n. For a simplified example of using Loki, see [Remote logging](/deploy/deployment-options/#remote-logging)\n.\n\n### [](/maintain/monitor/#change-the-telemetry-server)\nChange the telemetry server\n\nAfter you have configured the backend monitoring rules for your nodes, you can use the `--telemetry-url` command-line option when you start a node to specify the telemetry server that you want to send telemetry data to. You can pass this option multiple times to specify multiple telemetry endpoints. If you specify the `--telemetry-url` command-line option, you must also specify how verbose metrics should be, with level 0 denoting the least verbose through level 9 denoting the most verbose.\n\nFor example, to specify your own telemetry server URL with a verbosity level of 5, you would run a command similar to the following:\n\n    ./target/release/node-template --dev \\\n      --telemetry-url \"wss://192.168.48.1:9616 5\" \\\n      --prometheus-port 9616 \\\n      --prometheus-external\n\nFor more information about the backend components for telemetry or configuring your own server, see [substrate-telemetry](https://github.com/paritytech/substrate-telemetry)\n or the [telemetry helm chart](https://github.com/paritytech/helm-charts/tree/main/charts/substrate-telemetry)\n for Kubernetes deployments.\n\n[](/maintain/monitor/#disable-telemetry)\nDisable telemetry\n----------------------------------------------------------\n\nTelemetry is enabled for all global chain nodes by default. You can use the `--no-telemetry` command-line option to prevent a node from connecting to the Substrate telemetry server. For example, to prevent telemetry data from being send to the default telemetry server, you would run a command similar to the following:\n\n    ./target/release/node-template --chain myCustomChain \\\n      --no-telemetry\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/maintain/)\n[Next \u2192](/maintain/runtime-upgrades/)\n\nON THIS PAGE\n\n[View telemetry data](#view-telemetry-data)\n[Customize the monitoring stack](#customize-the-monitoring-stack)\n[Disable telemetry](#disable-telemetry)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/maintain/runtime-upgrades/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Maintain](/maintain/)\nRuntime upgrades\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/maintain/runtime-upgrades.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRuntime upgrades\n================\n\nForkless runtime upgrades are a defining feature of the Substrate framework for blockchain development. The ability to update the runtime logic without forking the code base enables your blockchain to evolve and improve over time. This capability is made possible by including the definition of the runtime execution environment\u2014the runtime WebAssembly blob\u2014as an element in the blockchain's runtime state.\n\nBecause the runtime is part of the blockchain state, network maintainers can leverage the blockchain's capabilities for trustless, decentralized consensus to securely make enhancements to the runtime.\n\nIn the FRAME system for runtime development, the system library defines [the `set_code` call](https://paritytech.github.io/substrate/master/frame_system/pallet/enum.Call.html#variant.set_code)\n that is used to update the definition of the runtime. The tutorial [Upgrade a running network](/tutorials/build-a-blockchain/upgrade-a-running-network/)\n demonstrates two ways that you can upgrade a runtime without shutting down a node or interrupting operations. However, both of the upgrades in the tutorial illustrate adding functionality to the runtime as opposed to _updating_ the existing runtime state. If a runtime upgrade requires changes to the existing state, it is likely to require storage migration.\n\n[](/maintain/runtime-upgrades/#runtime-versioning)\nRuntime versioning\n---------------------------------------------------------------------\n\nIn [Build process](/main-docs/build/build-process/)\n, you learned that compiling a node generated both a platform-native binary and a WebAssembly binary and that selecting which binary to use at different points in the block production process can be controlled by execution strategy command-line options. The component that selects the runtime execution environment to communicate with is called the **executor**. Although you can override the default execution strategies for custom scenarios, in most cases the executor select the appropriate binary to use by evaluating the following information for both the native and WebAssembly runtime binaries:\n\n*   `spec_name`\n*   `spec_version`\n*   `authoring_version`\n\nTo provide this information to the executor process, the runtime includes a [runtime version struct](https://paritytech.github.io/substrate/master/sp_version/struct.RuntimeVersion.html)\n similar to the following:\n\n    pub const VERSION: RuntimeVersion = RuntimeVersion {\n      spec_name: create_runtime_str!(\"node-template\"),\n      impl_name: create_runtime_str!(\"node-template\"),\n      authoring_version: 1,\n      spec_version: 1,\n      impl_version: 1,\n      apis: RUNTIME_API_VERSIONS,\n      transaction_version: 1,\n    };\n\nThe parameters in the struct provide the following information:\n\n| This parameter | Provides this |\n| --- | --- |\n| `spec_name` | The identifier for the different Substrate runtimes. |\n| `impl_name` | The name of the implementation of the spec. This is of little consequence for the node and serves only to differentiate code of different implementation teams. |\n| `authoring_version` | The version of the authorship interface. An authoring node will not attempt to author blocks unless this is equal to its native runtime. |\n| `spec_version` | The version of the runtime specification. A full node will not attempt to use its native runtime in substitute for the on-chain Wasm runtime unless all of `spec_name`, `spec_version`, and `authoring_version` are the same between the Wasm and native binaries. Updates to the `spec_version` can be automated as a CI process, as is done for the [Polkadot network](https://gitlab.parity.io/parity/mirrors/polkadot/-/blob/master/scripts/ci/gitlab/check_extrinsics_ordering.sh)<br>. This paramenter is typically incremented when there's an update to the `transaction_version`. |\n| `impl_version` | The version of the implementation of the specification. Nodes can ignore this. It is only used to indicate that the code is different. As long as the `authoring_version` and the `spec_version` are the same, the code itself might have changed, but the native and Wasm binaries do the same thing. In general, only non-logic-breaking optimizations would result in a change of the `impl_version`. |\n| `transaction_version` | The version of the interface for handling transactions. This parameter can be useful to synchronize firmware updates for hardware wallets or other signing devices to verify that runtime transactions are valid. The parameter allows hardware wallets to know which transactions they can safely sign. This number must be bumped if there is a change in the index of the pallets in the `construct_runtime!` macro or if there are any changes to dispatchable functions, such as the number of parameters or parameter types. If this number is updated, then the `spec_version` must also be updated. |\n| `apis` | A list of supported [runtime APIs](https://paritytech.github.io/substrate/master/sp_api/macro.impl_runtime_apis.html)<br> along with their versions. |\n\nThe orchestration engine\u2014sometimes referred to as the executor\u2014verifies that the native runtime has the same consensus-driven logic as the WebAssembly before it chooses to execute it. However, because the runtime versioning is set manually, the orchestration engine can still make inappropriate decisions if the runtime version is misrepresented.\n\n[](/maintain/runtime-upgrades/#accessing-the-runtime-version)\nAccessing the runtime version\n-------------------------------------------------------------------------------------------\n\nThe FRAME system exposes the runtime version information through the `state.getRuntimeVersion` RPC endpoint. The endpoint accepts an optional block identifier. However, in most cases, you use the runtime [metadata](/main-docs/build/application-development/#exposing-runtime-information-as-metadata)\n to understand the APIs the runtime exposes and how to interact with these APIs. The runtime metadata should _only_ change when the chain's [runtime `spec_version`](https://paritytech.github.io/substrate/master/sp_version/struct.RuntimeVersion.html#structfield.spec_version)\n changes.\n\n[](/maintain/runtime-upgrades/#forkless-runtime-upgrades)\nForkless runtime upgrades\n-----------------------------------------------------------------------------------\n\nTraditional blockchains require a [hard fork](https://en.wikipedia.org/wiki/Fork_(blockchain))\n when upgrading the state transition function of their chain. A hard fork requires all node operators to stop their nodes and manually upgrade to the latest executable. For distributed production networks, coordination of hard fork upgrades can be a complex process.\n\nThe runtime versioning properties enable Substrate-based blockchains to upgrade the runtime logic in real time without causing a fork in the network.\n\nTo perform a forkless runtime upgrade, Substrate uses existing runtime logic to update the Wasm runtime stored on the blockchain to a new consensus-breaking version with new logic. This upgrade gets pushed out to all full nodes on the network as a part of the consensus process. After the Wasm runtime is upgraded, the orchestration engine sees that the native runtime `spec_name`, `spec_version`, or `authoring_version` no longer matches the new Wasm runtime. As a result, the orchestration engine executes the canonical Wasm runtime instead of using the native runtime in any of the execution processes.\n\n[](/maintain/runtime-upgrades/#storage-migration)\nStorage migration\n-------------------------------------------------------------------\n\nStorage migrations are custom, one-time functions that allow you to update storage to adapt to changes in the runtime. For example, if a runtime upgrade changes the data type used to represent user balances from an _unsigned_ integer to a _signed_ integer, the storage migration would read the existing value as an unsigned integer and write back an updated value that has been converted to a signed integer. If you don't make these kinds of changes to how data is stored when needed, the runtime can't properly interpret the storage values to include in the runtime state and is likely to lead to undefined behavior.\n\n### [](/maintain/runtime-upgrades/#storage-migrations-with-frame)\nStorage migrations with FRAME\n\nFRAME storage migrations are implemented using the [`OnRuntimeUpgrade`](https://paritytech.github.io/substrate/master/frame_support/traits/trait.OnRuntimeUpgrade.html)\n trait. The `OnRuntimeUpgrade` trait specifies a single function\u2014`on_runtime_upgrade`\u2014that allows you to specify logic to run immediately _after_ a runtime upgrade but _before_ any [`on_initialize`](/main-docs/learn/transaction-lifecycle/#initialize-a-block)\n functions or transactions are executed.\n\n### [](/maintain/runtime-upgrades/#preparing-for-storage-migration)\nPreparing for storage migration\n\nPreparing for a storage migration means understanding the changes that are defined by a runtime upgrade. The Substrate repository uses the [`E1-runtimemigration`](https://github.com/paritytech/substrate/pulls?q=is%3Apr+label%3AE1-runtimemigration)\n label to designate such changes.\n\n### [](/maintain/runtime-upgrades/#writing-a-migration)\nWriting a migration\n\nEvery storage migration is different, with different requirements and different levels of complexity. However, you can use the following recommended practices to guide you when you need to perform storage migration:\n\n*   Extract migrations into reusable functions and write tests for them.\n*   Include logging in migrations to assist in debugging.\n*   Remember that migrations are executed within the context of the _upgraded_ runtime. The migration code might need to include deprecated types, as in [this example](https://github.com/hicommonwealth/substrate/blob/5f3933f5735a75d2d438341ec6842f269b886aaa/frame/indices/src/migration.rs#L5-L22)\n    .\n*   Use storage versions to make migrations safer by making them more declarative, as in [this example](https://github.com/paritytech/substrate/blob/c79b522a11bbc7b3cf2f4a9c0a6627797993cb79/frame/elections-phragmen/src/lib.rs#L119-L157)\n    .\n\n### [](/maintain/runtime-upgrades/#ordering-migrations)\nOrdering migrations\n\nBy default, FRAME orders the execution of `on_runtime_upgrade` functions based on the order in which the pallets appear in the `construct_runtime!` macro. For upgrades, the functions run in _reverse_ order, starting with the last pallet executed first. You can impose a custom order, if needed (see an [example here](https://github.com/hicommonwealth/edgeware-node/blob/7b66f4f0a9ec184fdebcccd41533acc728ebe9dc/node/runtime/src/lib.rs#L845-L866)\n).\n\nFRAME storage migrations run in this order:\n\n1.  Custom `on_runtime_upgrade` functions if using a custom order.\n2.  System `frame_system::on_runtime_upgrade` functions.\n3.  All `on_runtime_upgrade` functions defined in the runtime starting with the last pallet in the `construct_runtime!` macro.\n\n### [](/maintain/runtime-upgrades/#testing-migrations)\nTesting migrations\n\nIt is important to test storage migrations. A few of the tools available for you to test storage migration include the following:\n\n*   The [Substrate debug kit](https://github.com/paritytech/substrate-debug-kit)\n     includes a [remote externalities](https://github.com/paritytech/substrate-debug-kit/tree/master/remote-externalities)\n     tool that allows storage migration unit testing to be safely performed on live chain data.\n*   The [fork-off-substrate](https://github.com/maxsam4/fork-off-substrate)\n     script makes it easy to create a chain specification to bootstrap a local test chain for testing runtime upgrades and storage migrations.\n\n[](/maintain/runtime-upgrades/#where-to-go-next)\nWhere to go next\n-----------------------------------------------------------------\n\n*   [Upgrade a running network](/tutorials/build-a-blockchain/upgrade-a-running-network/)\n    \n*   [Substrate migrations](https://github.com/apopiak/substrate-migrations)\n    \n\n**Last edit:** February 16, 2024\n\n[\u2190 Previous](/maintain/monitor/)\n[Next \u2192](/tutorials/)\n\nON THIS PAGE\n\n[Runtime versioning](#runtime-versioning)\n[Accessing the runtime version](#accessing-the-runtime-version)\n[Forkless runtime upgrades](#forkless-runtime-upgrades)\n[Storage migration](#storage-migration)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/maintain/operate/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Maintain](/maintain/)\nOperate\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/maintain/operate.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nOperate\n=======\n\nMaintain the blockchain you have deployed\n\nDevOps concerns\n\nNetwork maintenance\n\nSynchronizing with Polkadot updates\n\nKeeping up with Substrate metadata updates.\n\nMaintain runtime uptime\n\n**Last edit:** August 18, 2022\n\n[Next \u2192](/quick-start/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/quick-start/explore-the-code/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Quick start](/quick-start/)\nExplore the code\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/quick-start/explore-the-code.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nExplore the code\n================\n\nIn [Start a node](/quick-start/start-a-node/)\n, you compiled and started a local Substrate node in development mode. This particular node\u2014the `substrate-node-template`\u2014provides a simplified environment with only a few common modules to get you started. Without going too deeply into the details, there's a lot you can learn from exploring the basic building blocks of the node template code.\n\n[](/quick-start/explore-the-code/#about-the-node-template)\nAbout the node template\n----------------------------------------------------------------------------------\n\nThe node template includes some default blockchain essentials, like peer-to-peer networking, a simple consensus mechanism, and transaction handling. The node template also includes some basic functionality for working with accounts, balances, and transaction fees and performing administrative actions. This core set of functionality is provided through several predefined modules\u2014called **pallets**\u2014that implement specific features.\n\nFor example, the following core modules are predefined in the node template:\n\n*   `pallet_balances` for managing account assets and transfers between accounts.\n*   `pallet_transaction_payment` for managing transaction fees for the transactions performed.\n*   `pallet_sudo` for performing operations that require administrative permissions.\n\nThe node template also provides a starter `pallet_template` that illustrates how to implement features in custom pallets.\n\nNow that you have an overview of the features included in the node template, let's take a closer look at the code in the `substrate-node-template` directory and its subdirectories.\n\n[](/quick-start/explore-the-code/#manifest-files)\nManifest files\n----------------------------------------------------------------\n\nBecause Substrate is a Rust-based framework, each package has a manifest file\u2014the `Cargo.toml` file\u2014that contains information required to compile the package. If you open the `Cargo.toml` file located in the root directory for the `substrate-node-template`, you can see that it describes the member packages that make up the node template workspace. For example:\n\n    [workspace]\n    members = [\\\n        \"node\",\\\n        \"pallets/template\",\\\n        \"runtime\",\\\n    ]\n    [profile.release]\n    panic = \"unwind\"\n\nFrom this manifest, you see that the node template workspace includes three packages:\n\n*   The `node` package provides Rust modules for many core blockchain services like peer-to-peer networking, block authoring, block finalization, and transaction pool management.\n*   The `template` package in the `pallets` subdirectory is the starter template that illustrates how to implement features when building your own custom modules.\n*   The `runtime` package provides all of the application logic for handling accounts, balances, transaction fees, and other features that have been included in the node template.\n\nEach member package also has its own manifest\u2014its own `Cargo.toml` file\u2014that contains package-specific information, including dependencies and configuration settings, that are required to compile that member package. For example, the `Cargo.toml` file for the `node` member of the workspace specifies the name of the package is `node-template` and lists the core libraries and primitives that enable the node template to provide essential blockchain services. You'll learn more about libraries and primitives in [Architecture and Rust libraries](/learn/architecture/)\n. For now, it's enough to understand the importance of the manifest in describing dependencies and other critical information for each package.\n\nIf you open the `runtime/Cargo.toml` file and the `pallets/template/Cargo.toml`, you\u2019ll see different libraries and primitives as dependencies, but you\u2019ll get a general sense of what\u2019s required to compile these packages. For example, the manifest for the runtime lists all of the pallets\u2014including the `frame_system`, `frame_support` and previously-mentioned `pallet_balances`, `pallet_transaction_payment`, and `pallet_sudo` modules\u2014that comprise the default runtime for the node template.\n\n[](/quick-start/explore-the-code/#core-client-source-code)\nCore client source code\n----------------------------------------------------------------------------------\n\nOne of the most important aspects of Substrate is that nodes consist of two main parts: the **core client** and the **runtime**. The node template also consists of separate packages for core client services in the the `node/src` directory and the runtime in the `runtime/src` directory.\n\nBy default, the `node/src` directory includes the following Rust modules:\n\n*   `benchmarking.rs`\n*   `chain_spec.rs`\n*   `cli.rs`\n*   `command.rs`\n*   `lib.rs`\n*   `main.rs`\n*   `rpc.rs`\n*   `service.rs`\n\nMost core client service are encapsulated in the `node/src/service.rs` Rust module. It's rare that you need to modify this file or the other Rust modules in the `node/src` directory. A file you are likely to modify is the `chain_spec.rs` file. The `chain_spec.rs` file describes the configuration of the default Development and Local Testnet chains, including information about default pre-funded development accounts and the nodes that are preconfigured with the authority to produce blocks. If you create a custom chain, you use this file to identify the network that a node connects to and the other nodes that the local node communicates with.\n\n[](/quick-start/explore-the-code/#default-node-template-runtime)\nDefault node template runtime\n----------------------------------------------------------------------------------------------\n\nBecause Substrate provides a modular and flexible framework for building blockchains, you can make changes to any package in the workspace. However, most application development work is done in the runtime and in the modules\u2014the pallets\u2014used to construct the runtime. Before you start to customize the runtime for your own project, you should spend a little time exploring what\u2019s in the default node template.\n\n### [](/quick-start/explore-the-code/#default-manifest)\nDefault manifest\n\nYou've already seen how the default manifest for the runtime lists the default dependencies and features for the runtime in lines similar to the following:\n\n    pallet-balances = { version = \"4.0.0-dev\", default-features = false, git = \"https://github.com/paritytech/polkadot-sdk.git\", branch = \"polkadot-vX.Y.Z\" }\n    \n    pallet-sudo = { version = \"4.0.0-dev\", default-features = false, git = \"https://github.com/paritytech/polkadot-sdk.git\", branch = \"polkadot-vX.Y.Z\" }\n    \n    pallet-transaction-payment = { version = \"4.0.0-dev\", default-features = false, git = \"https://github.com/paritytech/polkadot-sdk.git\", branch = \"polkadot-vX.Y.Z\" }\n\nThere are also dependencies on core packages\u2014such as `frame-system`, `frame-support`, and `frame-executive`. You'll learn more about these core services in [Core FRAME services](/learn/runtime-development/#core-frame-services)\n. For now, just notice that these and other modules are required to compile the runtime for the node template.\n\n### [](/quick-start/explore-the-code/#default-source-code)\nDefault source code\n\nThe main source code for the runtime is located in the `runtime/src/lib.rs` file. If you open this file in your code editor, it might seen complicated at first. There are some nuances that are covered in other parts of the documentation, but in essence, the source code does the following:\n\n*   Imports the frame_system and frame_support core services.\n*   Specifies version information for the runtime.\n*   Declares the pallets to include.\n*   Declares the types and parameters for each pallet included.\n*   Sets constant and variable values for each pallet included.\n*   Implements the `Config` trait for each pallet included.\n*   Constructs the runtime from the pallets included.\n*   Prepares the benchmarking framework for evaluating pallet performance.\n*   Implements the interfaces that enable the core client to call into the runtime.\n\nYou\u2019ll learn more about constructing the runtime, defining benchmarks, and using runtime interfaces in topics in the [Build](/build/)\n and [Test](/test/)\n sections. For now, you only need to have a general sense of how the runtime is composed and how the default pallets are implemented using the `Config` trait.\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/quick-start/start-a-node/)\n[Next \u2192](/quick-start/modify-the-runtime/)\n\nON THIS PAGE\n\n[About the node template](#about-the-node-template)\n[Manifest files](#manifest-files)\n[Core client source code](#core-client-source-code)\n[Default node template runtime](#default-node-template-runtime)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/maintain/upgrades/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    *   [Monitor](/maintain/monitor/)\n        \n    *   [Runtime upgrades](/maintain/runtime-upgrades/)\n        \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Maintain](/maintain/)\nUpgrades\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/maintain/upgrades.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nUpgrades\n========\n\nTODO\n\n**Last edit:** August 15, 2022\n\n[Next \u2192](/quick-start/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/quick-start/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nQuick start\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/quick-start/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nQuick start\n===========\n\nThe _Quick start_ assumes that you are a new developer without any prior experience working with Substrate or FRAME, but that you are aware that these tools exist. The _Quick start_ also assumes that you want a simplified entry point for setting up a development environment and starting a blockchain node on your local computer.\n\nIn the _Quick start_, you'll get a brief overview of what Substrate is, learn how to compile and start a node, and take a short tour through the node template code. The following topics are intended to be read in order as a fast path to learning to build with Substrate:\n\n*   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n    \n*   [Start a node](/quick-start/start-a-node/)\n    \n*   [Explore the code](/quick-start/explore-the-code/)\n    \n*   [Modify the runtime](/quick-start/modify-the-runtime/)\n    \n\nIf the _Quick start_ isn't your route of choice, there are other ways to approach the documentation for learning to build with Substrate. For example, you can dive directly into core concepts in the [Learn](/learn/)\n section or work through hands-on exercises in the [Tutorials](/tutorials/)\n section.\n\nTo help you find your way, think of Substrate documentation as being divided into three parts: the developer journey, the tutorials, and an API and reference section. Although the parts are interrelated, each part presents information in a different way and with a different purpose:\n\nThe **Developer journey** presents information in the form of a narrative arc:\n\n*   [Learn](/learn/)\n     covers core blockchain and Substrate concepts and operations.\n*   [Install](/install/)\n     provides platorm-specific installation instructions and troubleshooting tips for installation-related issues.\n*   [Build](/build/)\n     exposes the tools and techniques for building custom blockchain applications.\n*   [Test](/test/)\n     highlights approaches for unit testing and benchmarking code before deploying on a test network or in a production environment.\n*   [Deploy](/deploy/)\n     describes different options for deploying nodes, how to prepare for deployment, and how to move from a test network to a production network.\n*   [Maintain](/maintain/)\n     provides general information about maintaining your network with hardware and software upgrades, managing new releases, and maintaining your infrastructure.\n\nThe **Tutorials** provide hands-on learning experiences that cover different aspects of building and managing a Substrate-based blockchain:\n\n*   [Build a blockchain](/tutorials/build-a-blockchain/)\n     tutorials are focused on network basics from starting a single node to creating a private four node blockchain, monitoring node operations, and upgrading a running network.\n*   [Build application logic](/tutorials/build-application-logic/add-a-pallet/)\n     tutorials are focused on how to implement application-specific logic working with existing and custom pallets.\n*   [Build a parachain](/tutorials/build-a-parachain/connect-a-local-parachain/)\n     tutorials are focused on how to move from a standalone chain to a parachain, connect a parachain to a relay chain, and send messages between chains.\n\nThe **Reference** provides direct access to technical information such as the Rust API and help for command-line tools.\n\n**Last edit:** July 27, 2023\n\n[Next \u2192](/quick-start/substrate-at-a-glance/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/quick-start/start-a-node/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Quick start](/quick-start/)\nStart a node\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/quick-start/start-a-node.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nStart a node\n============\n\nAll of the Substrate tutorials and how-to guides require you to build and run a Substrate node in your development environment. To help you set up a working environment quickly, the [Substrate Developer Hub](https://github.com/substrate-developer-hub/)\n maintains _templates_ for you to use. For example, the [substrate-node-template](https://github.com/substrate-developer-hub/substrate-node-template/tags/)\n is a snapshot of the main Substrate `node-template` binary that includes a core set of features to get you started.\n\nAfter you start the node, you can connect to it using a web browser and a simple application that allows you to look up a balance for a predefined account.\n\n[](/quick-start/start-a-node/#before-you-begin)\nBefore you begin\n----------------------------------------------------------------\n\nBefore you begin, verify the following:\n\n*   You have an internet connection and access to an interactive shell terminal on your local computer.\n*   You are generally familiar with software development and using command-line interfaces.\n*   You have the Rust compiler and toolchain installed.\n    \n    You can check whether you have Rust installed by running the `rustup show` command. If Rust is installed, this command displays version information for the toolchain and compiler. If Rust is not installed, the command doesn't return any output. For information about installing Rust, see [Install](/install/)\n    .\n    \n\n[](/quick-start/start-a-node/#build-the-node-template)\nBuild the node template\n------------------------------------------------------------------------------\n\n1.  Clone the node template repository by running the following command:\n    \n        git clone https://github.com/substrate-developer-hub/substrate-node-template\n    \n    This command clones the `main` branch.\n    \n    Optionally, you can use the `--branch` command-line option and a [tag](https://github.com/substrate-developer-hub/substrate-node-template/tags)\n     to specify a version of Polkadot you want the node to be compatible with.\n    \n2.  Change to the root of the cloned directory:\n    \n        cd substrate-node-template\n    \n3.  Create a new branch to save your work by running a command similar to the following:\n    \n        git switch -c my-learning-branch-yyyy-mm-dd\n    \n    You can name the branch using any identifying information you choose. In most cases, you should include information about the year-month-day you cloned the branch in the name. For example:\n    \n        git switch -c my-learning-branch-2023-03-31\n    \n4.  Compile the node template:\n    \n        cargo build --package node-template --release\n    \n    The first time you compile the node, it can take some time to complete. When compiling is complete, you should see a line like this:\n    \n        Finished release [optimized] target(s) in 11m 23s\n    \n\n[](/quick-start/start-a-node/#view-information-for-the-node)\nView information for the node\n------------------------------------------------------------------------------------------\n\n1.  Verify that your node is ready to use and see information about the command-line options available by running the following command:\n    \n        ./target/release/node-template --help\n    \n    The usage information displays the command-line options you can use to:\n    \n    *   start the node\n    *   work with accounts and keys\n    *   modify node operations\n2.  View account information for the predefined `Alice` development account by running the following command:\n    \n        ./target/release/node-template key inspect //Alice\n    \n    The command displays the following account and address information:\n    \n        Secret Key URI `//Alice` is account:\n        Network ID:        substrate\n        Secret seed:       0xe5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a\n        Public key (hex):  0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n        Account ID:        0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n        Public key (SS58): 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n        SS58 Address:      5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n    \n    Predefined development accounts like `Alice` and `Bob` are configured in a **chain specification** file. You'll learn more about node template files in [Explore the code](/quick-start/explore-the-code/)\n     and more specifically about the chain specification file in [Chain specification](/build/chain-spec/)\n    . For now, it's enough to be aware that development accounts exist to enable testing of simple transactions like balance transfers.\n    \n\n[](/quick-start/start-a-node/#start-the-blockchain)\nStart the blockchain\n------------------------------------------------------------------------\n\n1.  Start the node in development mode by running the following command:\n    \n        ./target/release/node-template --dev\n    \n    In development mode, the chain doesn't require any peer computers to finalize blocks. As the node starts, the terminal displays output about the operations performed. If you see messages that blocks are being proposed and finalized, you have a running node.\n    \n        ... Idle (0 peers), best: #3 (0xcc78\u20265cb1), finalized #1 ...\n        ... Starting consensus session on top of parent ...\n        ... Prepared block for proposing at 4 (0 ms) ...\n    \n\n[](/quick-start/start-a-node/#connect-to-the-node)\nConnect to the node\n----------------------------------------------------------------------\n\nNow that your node is running, you can connect to it to check the balance of the predefined `Alice` account. For this simple application, you can create one `index.html` HTML file that uses JavaScript and the [Polkadot-JS API](https://polkadot.js.org/docs/api)\n to interact with the blockchain.\n\nFor example, this sample [index.html](/assets/quickstart/index.html/)\n demonstrates how to use JavaScript, the Polkadot-JS API, and HTML to do the following:\n\n*   Take an account address as input.\n*   Look up the account balance using an `onClick` event.\n*   Display the balance for the account as output.\n\nTo connect to the node and check an account balance:\n\n1.  Copy and paste the [sample code](/assets/quickstart/index.html/)\n     for the **Quick start: Get Balance** application into a new file in your code editor and save the file on your local computer.\n2.  Open the `index.html` file in a web browser.\n3.  Copy and paste the SS58 Address for the `Alice` account in the input field, then click **Get Balance**.\n\n[](/quick-start/start-a-node/#stop-the-node)\nStop the node\n----------------------------------------------------------\n\n1.  Go to the terminal that displays blockchain operations.\n2.  Stop the local blockchain and clear all state by pressing the `control-c` key combination.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/quick-start/substrate-at-a-glance/)\n[Next \u2192](/quick-start/explore-the-code/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Build the node template](#build-the-node-template)\n[View information for the node](#view-information-for-the-node)\n[Start the blockchain](#start-the-blockchain)\n[Connect to the node](#connect-to-the-node)\n[Stop the node](#stop-the-node)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/quick-start/modify-the-runtime/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Quick start](/quick-start/)\nModify the runtime\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/quick-start/modify-the-runtime.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nModify the runtime\n==================\n\nIn [Explore the code](/quick-start/explore-the-code/)\n, you learned about the manifest files and Rust modules that make up the default node template. Now that you have a general idea of what the runtime source code looks like, let's look at how easy it is for you to make a few simple changes to customize the runtime.\n\nFor this simple demonstration, you are going to do the following:\n\n*   Add a pallet that has some functionality you want to use.\n*   Change some constant values.\n*   Update the runtime version.\n*   Recompile the runtime to include your changes.\n*   Submit a transaction to update the runtime stored on-chain.\n\nYou'll also see another application that uses the Polkadot-JS API and how you can use the hosted version of that application to view the chain state and submit transactions.\n\n[](/quick-start/modify-the-runtime/#before-you-begin)\nBefore you begin\n----------------------------------------------------------------------\n\nWhen you run a node in development mode using the `--dev` command-line option, it starts in a clean state with the first block. To best illustrate how to modify and update the runtime, you should restart the default node template with its default runtime so that it starts producing blocks.\n\nTo restart the node with the default runtime:\n\n1.  Open a terminal shell on your computer.\n2.  Change to the root directory where you compiled the Substrate node template.\n3.  Start the local node in development mode by running the following command:\n    \n        cargo run --release -- --dev\n    \n\nAfter you start the node, you can connect to it using a browser-based application built using the Polkadot-JS API.\n\nTo connect to the running node:\n\n1.  Open the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/explorer)\n     in a Chrome or a Chromium-based browser.\n    \n    If you use a more restrictive browser\u2014such as Firefox\u2014you might find that connections between the Polkadot/Substrate Portal and the node are blocked.\n    \n2.  Connect to the Development network and the default local node endpoint `127.0.0.1:9944`, if necessary.\n    \n    In most cases, the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/explorer)\n     initializes the connection to the running local node automatically. If required, click **Unknown** to display the network selection menu, then select **Development** and **Local Node**, then click **Switch**.\n    \n3.  Notice that under Development, the node template version is the default version 100.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='417.7339901477833' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Node template default version](https://docs.substrate.io/static/c2fb81c66cb08d25c1a3d253bc4e339a/054b6/quickstart-100.png)\n    \n\n[](/quick-start/modify-the-runtime/#add-a-pallet)\nAdd a pallet\n--------------------------------------------------------------\n\nThe most common way to start building with Substrate and FRAME involves adding pallets, either by importing one from the existing library or by creating your own. Creating your own pallet from scratch isn't difficult, but it requires more work designing the application logic, storage requirements, error handling, and so on. To keep things simple, let's add a pallet by importing one from the existing library.\n\nBy default, the node template doesn't include the [Utility pallet](https://paritytech.github.io/substrate/master/pallet_utility/index.html)\n. If this pallet contains functions you want to use, you can add it to the default runtime.\n\nTo add the Utility pallet:\n\n1.  Open a second terminal shell on your computer and change to the node template root directory.\n2.  Open the runtime manifest\u2014`runtime/Cargo.toml` in your code editor.\n3.  Locate the `[dependencies]` section and add the Utility pallet as a dependency.\n    \n    For example, you should add a single line similar to the following.\n    \n        pallet-utility = { version = \"4.0.0-dev\", default-features = false, git = \"https://github.com/paritytech/polkadot-sdk.git\", branch = \"polkadot-vX.Y.Z\" }\n    \n    Be sure to replace `branch = \"polkadot-vX.Y.Z\"` with the Polkadot branch used for other pallets.\n    \n    You can copy any existing pallet dependency as a model to ensure that the branch setting for the `pallet-utility` dependency is the same as the branch setting for all other pallets.\n    \n4.  Locate the `[features]` section and add the Utility pallet to the list of default features for the standard binary.\n    \n    For example:\n    \n        [features]\n        default = [\"std\"]\n        std = [\\\n          ...\\\n          \"pallet-utility/std\",\\\n          ...\\\n        ]\n    \n    You'll learn more about building features for the standard and WebAssembly binaries in [Rust and WebAssembly](/build/build-process/)\n    .\n    \n5.  Save your changes and close the `Cargo.toml` file.\n6.  Open the `runtime/src/lib.rs` file in your code editor.\n7.  Add the implementation for the `Config` trait for the Utility pallet.\n    \n    For example:\n    \n        impl pallet_utility::Config for Runtime {\n          type RuntimeEvent = RuntimeEvent;\n          type RuntimeCall = RuntimeCall;\n          type PalletsOrigin = OriginCaller;\n          type WeightInfo = pallet_utility::weights::SubstrateWeight<Runtime>;\n        }\n    \n    Every pallet has a `Config` trait for the specific parameters and types it requires. You can always look at the Rust documentation for a pallet to learn more about its configuration requirements. For example, you can view the Rust documentation for the [pallet-utility](https://paritytech.github.io/substrate/master/pallet_utility/index.html)\n    .\n    \n8.  Add the Utility pallet inside the `construct_runtime!` macro.\n    \n    For example:\n    \n        construct_runtime!(\n         pub struct Runtime\n         where\n            Block = Block,\n            NodeBlock = opaque::Block,\n            UncheckedExtrinsic = UncheckedExtrinsic\n         {\n                System: frame_system,\n                RandomnessCollectiveFlip: pallet_randomness_collective_flip,\n                Timestamp: pallet_timestamp,\n                Aura: pallet_aura,\n                ...\n                Utility: pallet_utility, // Add this line\n                ...\n         }\n    \n    You can learn more about how the `construct_runtime` macro works in [FRAME macros](/reference/frame-macros/)\n     and [Runtime construction macros](/reference/frame-macros/#runtime-construction-macros)\n    .\n    \n\n[](/quick-start/modify-the-runtime/#change-constant-values)\nChange constant values\n----------------------------------------------------------------------------------\n\nBy default, the Balances pallet in the node template defines an `EXISTENTIAL_DEPOSIT` constant. The `EXISTENTIAL_DEPOSIT` represents the minimum balance that an account must have to be considered a valid active account. By default, the constant is defined as a 128-bit unsigned integer type with a value of 500. To keep things simple, you're going to change the value of this constant from 500 to 1000.\n\nTo update a constant value:\n\n1.  Open the `runtime/src/lib.rs` file in your code editor.\n2.  Locate the `EXISTENTIAL_DEPOSIT` for the Balances pallet.\n    \n        /// Existential deposit.\n        pub const EXISTENTIAL_DEPOSIT: u128 = 500;\n    \n3.  Update the value for the EXISTENTIAL\\_DEPOSIT.\n    \n        pub const EXISTENTIAL_DEPOSIT: u128 = 1000 // Update this value.\n    \n\n[](/quick-start/modify-the-runtime/#update-the-runtime-version)\nUpdate the runtime version\n------------------------------------------------------------------------------------------\n\nBy default, the node template identifies the default runtime version in the `VERSION` constant using the `spec_version` and a value of 100. To indicate that you've made changes to the default runtime, you're going to change the `spec_version` from 100 to 101.\n\nNote that updating the `spec_version` isn't strictly required for the changes you've made to the default runtime in the _Quick start_. However, by updating the version you can see the basic steps involved in performing a forkless upgrade.\n\nTo update the runtime version:\n\n1.  Open the `runtime/src/lib.rs` file in your code editor.\n2.  Locate the `runtime_version` macro.\n    \n        #[sp_version::runtime_version]\n        pub const VERSION: RuntimeVersion = RuntimeVersion {\n            spec_name: create_runtime_str!(\"node-template\"),\n            impl_name: create_runtime_str!(\"node-template\"),\n            authoring_version: 1,\n            spec_version: 100,\n            impl_version: 1,\n            apis: RUNTIME_API_VERSIONS,\n            transaction_version: 1,\n            state_version: 1,\n        };\n    \n3.  Update the `spec_version` to specify the new runtime version.\n    \n        spec_version: 101,  // Change the spec_version from 100 to 101\n    \n4.  Save your changes and close the `runtime/src/lib.rs` file.\n\nAt this point, you've modified the runtime code and changed the version information. However, the running node is still using the previously-compiled version of the runtime. If you are still connected to the running node using the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/explorer)\n, you can see the node template version is still the default version 100 and the [chain state](https://polkadot.js.org/apps/#/chainstate/constants)\n for the balances constant existentialDeposit is still 500.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='298.82044560943643' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Chain state](https://docs.substrate.io/static/a2724f8a920f6c78647158d16273aca5/441e6/quickstart-org-chainstate.png)\n\n[](/quick-start/modify-the-runtime/#recompile-the-runtime)\nRecompile the runtime\n--------------------------------------------------------------------------------\n\nBefore you can update the node template to use your modified runtime, you must recompile the runtime.\n\nTo recompile the runtime package:\n\n1.  Open a second terminal shell and change to the root directory where you compiled the node template.\n2.  Recompile the runtime by running the following command:\n    \n        cargo build --release --package node-template-runtime\n    \n    The `--release` command-line option requires a longer compile time. However, it generates a smaller build artifact that is better suited for submitting to the blockchain network. Storage optimization is _critical_ for any blockchain. With this command, the build artifacts are output to the `target/release` directory. The WebAssembly build artifacts are in the `target/release/wbuild/node-template-runtime` directory. For example, if you list the contents of the `target/release/wbuild/node-template-runtime` directory, you should see the following WebAssembly artifacts:\n    \n        node_template_runtime.compact.compressed.wasm\n        node_template_runtime.compact.wasm\n        node_template_runtime.wasm\n    \n\n[](/quick-start/modify-the-runtime/#submit-a-transaction)\nSubmit a transaction\n------------------------------------------------------------------------------\n\nYou now have an updated WebAssembly object that describes the modified runtime. However, the running node isn't using the upgraded runtime yet. To update the runtime stored on-chain, you must submit a transaction that changes the WebAssembly object to use.\n\nTo update the runtime:\n\n1.  In the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/explorer)\n    , click **Developer** and select **Extrinsics**.\n2.  Select the administrative **Alice** account.\n3.  Select the **sudo** pallet and the **sudoUncheckedWeight(call, weight)** function.\n4.  Select **system** and **setCode(code)** as the call to make using the Alice account.\n5.  Click **file upload**, then select or drag and drop the compact and compressed WebAssembly file\u2014`node_template_runtime.compact.compressed.wasm`\u2014that you generated for the updated runtime.\n    \n    For example, navigate to the `target/release/wbuild/node-template-runtime` directory and select `node_template_runtime.compact.compressed.wasm` as the file to upload.\n    \n6.  Leave both of the **weight** parameters set to the default value of `0`.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1250.620347394541' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Runtime upgrade settings](https://docs.substrate.io/static/1abb15872875a741ba7957a77463480a/6ef51/set-code-transaction.png)\n    \n7.  Click **Submit Transaction**.\n8.  Review the authorization, then click **Sign and Submit**.\n\n[](/quick-start/modify-the-runtime/#verify-the-modified-runtime)\nVerify the modified runtime\n--------------------------------------------------------------------------------------------\n\nAfter the transaction is included in a block, you can verify that you're using the modified runtime.\n\nTo verify your changes:\n\n1.  In the [Polkadot/Substrate Portal](https://polkadot.js.org/apps)\n    , click **Network** and select **Explorer** to see that there has been a successful `sudo.Sudid` event.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='356.786703601108' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Successful sudo event](https://docs.substrate.io/static/acc82575c3cb918243bcb63731c7e2fd/241d6/set-code-sudo-event.png)\n    \n2.  Check that the node template version is now `101`.\n    \n    For example:\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='417.7339901477833' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Updated runtime version is 101](https://docs.substrate.io/static/d2b284ae84ff285bd030d91aa16f35b0/054b6/quickstart-101.png)\n    \n3.  Click **Developer** and select **Extrinsics**.\n4.  Click **submit the following extrinsic** and scroll to the bottom of the list to verify that the **utility** pallet is available as an option.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='531.5926892950391' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Utility pallet](https://docs.substrate.io/static/b6d4b1158817952d65b3969e402f57a3/d9b14/quickstart-utility-pallet.png)\n    \n5.  Click **Developer** , select **Chain state**, then click [Constants](https://polkadot.js.org/apps/#/chainstate/constants?rpc=ws://127.0.0.1:9944)\n    .\n6.  Select the **balances** pallet, select **existentialDeposit**, then click **+** to query the constant value.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='297.57694826457106' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Verify the constant value change](https://docs.substrate.io/static/b0ccb722efcfbc95f68eefd19af972f0/1bdaa/quickstart-chain-state.png)\n    \n\n[](/quick-start/modify-the-runtime/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------------------\n\nAfter verifying the changes, you know that you have a customized version of the node template running and have successfully upgraded your local node to use your modified runtime.\n\nThat's quite an achievement, but there's a lot more you can do. To dig deeper into concepts and core components, review topics in the [Learn](/learn/)\n section or start building on what you've learned so far by exploring topics in the [Build](/build/)\n section.\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/quick-start/explore-the-code/)\n[Next \u2192](/learn/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Add a pallet](#add-a-pallet)\n[Change constant values](#change-constant-values)\n[Update the runtime version](#update-the-runtime-version)\n[Recompile the runtime](#recompile-the-runtime)\n[Submit a transaction](#submit-a-transaction)\n[Verify the modified runtime](#verify-the-modified-runtime)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/quick-start/substrate-at-a-glance/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    *   [Substrate at a glance](/quick-start/substrate-at-a-glance/)\n        \n    *   [Start a node](/quick-start/start-a-node/)\n        \n    *   [Explore the code](/quick-start/explore-the-code/)\n        \n    *   [Modify the runtime](/quick-start/modify-the-runtime/)\n        \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Quick start](/quick-start/)\nSubstrate at a glance\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/quick-start/substrate-at-a-glance.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nSubstrate at a glance\n=====================\n\nThis article offers a bare bones overview of the Substrate framework for building application-optimized blockchains. All of the topics mentioned here are covered in more detail in other parts of the documentation.\n\n[](/quick-start/substrate-at-a-glance/#what-is-substrate)\nWhat is Substrate?\n----------------------------------------------------------------------------\n\nSubstrate is a Software Development Kit (SDK) that uses Rust-based libraries and tools to enable you to build application-specific blockchains from modular and extensible components. Application-specific blockchains that are built with Substrate can run as standalone services or in parallel with other chains to take advantage of the shared security provided by the Polkadot ecosystem. Substrate includes default implementations of the core components of the blockchain infrastructure to allow you to focus on the application logic.\n\n[](/quick-start/substrate-at-a-glance/#what-is-frame)\nWhat is FRAME?\n--------------------------------------------------------------------\n\nFRAME provides the core modular and extensible components that make the Substrate software development kit flexible and adaptable to different use cases. FRAME include Rust-based programs and libraries that simplify and streamline the development of application-specific logic. Most of the functionality that FRAME provides takes the form of plug-in modules called **pallets** that you can add and configure to suit your requirements.\n\n[](/quick-start/substrate-at-a-glance/#why-use-substrate-and-frame)\nWhy use Substrate and FRAME?\n------------------------------------------------------------------------------------------------\n\nBy using Substrate and FRAME, you can build proof-of-concept application-specific blockchains without the complexity of building a blockchain from scratch or the limitations of building on a general-purpose blockchain. With Substrate and FRAME, you can focus on crafting the business logic that makes your chain unique and innovative with the additional benefits of flexibility, upgradeability, open source licensing, and cross-consensus interoperability.\n\n[](/quick-start/substrate-at-a-glance/#what-is-a-substrate-node)\nWhat is a Substrate node?\n------------------------------------------------------------------------------------------\n\nEvery blockchain platform relies on a decentralized network of computers\u2014called nodes\u2014that communicate with each other about transactions and blocks. In general, a node in this context is the software running on the connected devices rather than the physical or virtual machine in the network. As software, Substrate nodes consist of two main parts with separate responsibilities:\n\n*   A **core client** with outer node services to handle network and blockchain infrastructure activity.\n*   A **runtime** with the business logic for state transitions and the current state of the blockchain.\n\n[](/quick-start/substrate-at-a-glance/#why-build-a-custom-runtime)\nWhy build a custom runtime?\n----------------------------------------------------------------------------------------------\n\nThe separation of responsibilities into client-driven activity and runtime-driven activity is a critical part of what makes Substrate nodes upgradeable. The application logic is what makes your chain unique and it's stored on-chain in the form of a WebAssembly binary. If you make changes to the application logic, you simply compile a new WebAssembly binary. You can then submit a transaction to update the WebAssembly binary currently stored on-chain with your updated binary. Because the custom runtime is a self-contained object that's stored as part of the chain state, you can easily iterate on the application design and evolve your project as your community evolves.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/quick-start/)\n[Next \u2192](/quick-start/start-a-node/)\n\nON THIS PAGE\n\n[What is Substrate?](#what-is-substrate)\n[What is FRAME?](#what-is-frame)\n[Why use Substrate and FRAME?](#why-use-substrate-and-frame)\n[What is a Substrate node?](#what-is-a-substrate-node)\n[Why build a custom runtime?](#why-build-a-custom-runtime)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/account-data-structures/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nAccount data structures\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/account-data-structures.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nAccount data structures\n=======================\n\nAccounts are a fundamental part of any blockchain, and, in Substrate, accounts can be used in many different ways. This article describes how accounts are stored in Substrate and how the account data structure is used to manage the account lifecycle in the runtime logic.\n\n[](/reference/account-data-structures/#account)\nAccount\n-------------------------------------------------------\n\nThe `Account` data type is a storage map that is defined generically in the [`frame-system` pallet](https://paritytech.github.io/substrate/master/src/frame_system/lib.rs.html#530)\n:\n\n    /// The full account information for a particular account ID.\n    #[pallet::storage]\n    #[pallet::getter(fn account)]\n    pub type Account<T: Config> = StorageMap<\n      _,\n      Blake2_128Concat,\n      T::AccountId,\n      AccountInfo<T::Nonce, T::AccountData>,\n      ValueQuery,\n    >;\n\nThe `StorageMap` for an `Account` consists of the following parameters:\n\n*   The first parameter (\\_) is used in macro expansion.\n*   `Blake2_128Concat` specifies the hashing algorithm to use.\n*   `T::AccountId` is used as the key for over the `AccountInfo<T::Nonce, T::AccountData>` struct.\n\nSee [`StorageMap` API](https://paritytech.github.io/substrate/master/frame_support/storage/types/struct.StorageMap.html#impl)\n for details.\n\n[](/reference/account-data-structures/#accountinfo)\nAccountInfo\n---------------------------------------------------------------\n\nThe `AccountInfo` for an account is defined in the [`frame_system` pallet](https://paritytech.github.io/substrate/master/src/frame_system/lib.rs.html#788-803)\n:\n\n    #[derive(Clone, Eq, PartialEq, Default, RuntimeDebug, Encode, Decode)]\n    pub struct AccountInfo<Nonce, AccountData> {\n      /// The number of transactions this account has sent.\n      pub nonce: Nonce,\n      /// The number of other modules that currently depend on this account's existence. The account\n      /// cannot be reaped until this is zero.\n      pub consumers: RefCount,\n      /// The number of other modules that allow this account to exist. The account may not be reaped\n      /// until this and `sufficients` are both zero.\n      pub providers: RefCount,\n      /// The number of modules that allow this account to exist for their own purposes only. The\n      /// account may not be reaped until this and `providers` are both zero.\n      pub sufficients: RefCount,\n      /// The additional data that belongs to this account. Used to store the balance(s) in a lot of\n      /// chains.\n      pub data: AccountData,\n    }\n\nEvery account has an `AccountInfo` consisting of:\n\n*   The `nonce` indicating the number of transactions the account has sent.\n*   The `consumers` reference counter indicating the number of other modules that currently depend on this account's existence.\n*   The `providers` reference counter indicating the number of other modules that allow this account to exist.\n*   The `sufficients` reference counter indicating the number of modules that allow this account to exist for their own purposes only.\n*   The `AccountData` structure that you can configure to hold different kinds of data.\n\n[](/reference/account-data-structures/#account-reference-counters)\nAccount reference counters\n---------------------------------------------------------------------------------------------\n\nThe account reference counters track account dependencies in the runtime. For example, if you store data under a map controlled by an account, you wouldn't want to delete the account until the data stored under the map the account controls has been deleted.\n\nThe `consumers` and `providers` reference counters are designed to be used together. For example, the `consumers` reference counter in the `Session` pallet is incremented when an account sets its session keys prior of becoming a validator. The `providers` reference counter must be greater than zero before the `consumer` counter can be incremented.\n\nThe `providers` reference counter indicates if an account is ready to be depended upon. For example, the `providers` reference counter is incremented when a new account is created with more than the existential deposit [\\[2\\]](/reference/account-data-structures/#ref-system-created)\n.\n\nThe `providers` reference counter prevents Substrate pallets from storing data about an account until the account is active (`providers` > 0). The `consumers` reference counter prevents Substrate pallets from removing an account until data about the account is removed in all pallets (`consumers` == 0). The `consumers` reference counter holds users accountable for the data stored on-chain. If users want to remove their accounts and get back the existential deposit, they need to remove all of the data they have stored on all on-chain pallets to decrement `consumers` counter.\n\nPallets also have cleanup functions to decrement the `providers` reference counter to mark the account as deactivated within the pallet-managed scope. When the account `providers` reference counter is zero and the `consumers` is zero, the account is considered **deactivated** by all on-chain pallets.\n\nThe `sufficients` reference counter indicates if an account is self-sufficient and can exist by itself. For example, in the Assets pallet, an account can have sufficient number of certain assets but without owning any native account balance.\n\nRuntime developers can update these counters using the `inc_consumers()`, `dec_consumers()`, `inc_providers()`, `dec_providers()`, `inc_sufficients()`, and `dec_sufficients()` methods exposed by the `frame-system` pallet. Each increment call of a certain counter should be accompanied by a corresponding decrement call of the counter in an account life cycle.\n\nThere are also three query functions to ease usage on these counters:\n\n*   `can_inc_consumer()` to check if an account is ready to be used (`providers` > 0).\n*   `can_dec_provider()` to check if an account is no longer referenced in runtime whatsoever (`consumers` == 0) before decrementing `providers` to 0.\n*   `is_provider_required()` to check if an account has outstanding consumer references (`consumers` > 0).\n\nSee [`frame-system` API](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#impl-11)\n for details.\n\n[](/reference/account-data-structures/#accountdata-trait-and-implementation)\nAccountData trait and implementation\n-----------------------------------------------------------------------------------------------------------------\n\nThe `AccountInfo` can be any struct as long as the struct satisfies the associated type `AccountData` trait bound defined in the [`frame-system::pallet::Config` trait](https://paritytech.github.io/substrate/master/frame_system/pallet/trait.Config.html#associatedtype.AccountData)\n. By default, the Substrate runtime configures `AccountInfo` to be as defined in [`pallet-balances`](https://paritytech.github.io/substrate/master/pallet_balances/struct.AccountData.html)\n.\n\n[](/reference/account-data-structures/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------------------------\n\nFor addtional technical details, see the following resources:\n\n*   [`frame_system::AccountInfo` API](https://paritytech.github.io/substrate/master/frame_system/struct.AccountInfo.html)\n    \n*   [`pallet_balances::AccountData` API](https://paritytech.github.io/substrate/master/pallet_balances/struct.AccountData.html)\n    .\n*   [`pallet_session::Pallet::set_keys` dispatchable call](https://paritytech.github.io/substrate/master/src/pallet_session/lib.rs.html#508-571)\n    \n*   [`frame_system::Provider` `HandleLifetime` implementation](https://paritytech.github.io/substrate/master/src/frame_system/lib.rs.html#1549-1561)\n    \n*   [`pallet_assets` `new_account` function](https://paritytech.github.io/substrate/master/src/pallet_assets/functions.rs.html#46-61)\n    \n\n**Last edit:** September 7, 2023\n\n[\u2190 Previous](/reference/frame-macros/)\n[Next \u2192](/reference/scale-codec/)\n\nON THIS PAGE\n\n[Account](#account)\n[AccountInfo](#accountinfo)\n[Account reference counters](#account-reference-counters)\n[AccountData trait and implementation](#accountdata-trait-and-implementation)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/address-formats/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nAddress formats\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/address-formats.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nAddress formats\n===============\n\nThe default Substrate address format is SS58. The SS58 encoded address format is based on the Bitcoin Base-58-check format, but with a few modification specifically designed to suite Substrate-based chains. You can use other address formats for Substrate-based chains. However, the SS58 address format provides a base-58 encoded value that can identify a specific account on any Substrate chain. Because different chains can have different ways of identifying accounts, the SS58 address is designed to be extensible.\n\n[](/reference/address-formats/#basic-format)\nBasic format\n---------------------------------------------------------\n\nYou can find the implementation for the SS58 address format in [Ss58Codec](https://paritytech.github.io/substrate/master/sp_core/crypto/trait.Ss58Codec.html)\n.\n\nThe basic format of the address can be described as:\n\n    base58encode ( concat ( <address-type>, <address>, <checksum> ) )\n\nThe address is the concatenated byte series consisting of an address type, the encoded address, and a checksum that is passed into a base-58 encoder. The `base58encode` function is implemented exactly as defined in Bitcoin and IPFS specifications, using the same alphabet as both of those implementations. The Base-58 alphabet eliminates characters that might look ambiguous when printed, for example:\n\n*   non-alphanumerical characters (+ and /)\n*   zero (0)\n*   capital i (I)\n*   capital o (O)\n*   lower-case L (l)\n\n[](/reference/address-formats/#address-type)\nAddress type\n---------------------------------------------------------\n\nThe `address-type` in the SS58 address format is one or more bytes that describe the precise format of the address bytes that follow it.\n\nCurrently, the valid values are:\n\n*   `00000000b..=00111111b` (0 to 63 inclusive)\n    \n    Simple account/address/network identifier. The byte can be interpreted directly as such an identifier.\n    \n*   `01000000b..=01111111b` (64 to 127 inclusive)\n    \n    Full address/address/network identifier. The lower 6 bits of this byte should be treated as the upper 6 bits of a 14 bit identifier value, with the lower 8 bits defined by the following byte. This works for all identifiers up to 2\\*\\*14 (16,383).\n    \n*   `10000000b..=11111111b` (128 to 255 inclusive)\n    \n    Reserved for future address format extensions. The latter (42) address that is intended to be valid on all Substrate networks that support fixed-length addresses. For production networks, however, a network-specific version might be desirable to help avoid the key-reuse between networks and some of the problems that re-use can cause. By default, Substrate nodes print keys in address type 42 However, Substrate-based chains with alternative node implementations\u2014for example, nodes in the Polkadot ecosystem\u2014can default to some other address type.\n    \n\n[](/reference/address-formats/#address-length-in-bytes)\nAddress length in bytes\n-------------------------------------------------------------------------------\n\nThere are 16 different address formats, identified by the length in bytes of the total payload including the checksum.\n\n| Total | Type | Raw account | Checksum |\n| --- | --- | --- | --- |\n| 3   | 1   | 1   | 1   |\n| 4   | 1   | 2   | 1   |\n| 5   | 1   | 2   | 2   |\n| 6   | 1   | 4   | 1   |\n| 7   | 1   | 4   | 2   |\n| 8   | 1   | 4   | 3   |\n| 9   | 1   | 4   | 4   |\n| 10  | 1   | 8   | 1   |\n| 11  | 1   | 8   | 2   |\n| 12  | 1   | 8   | 3   |\n| 13  | 1   | 8   | 4   |\n| 14  | 1   | 8   | 5   |\n| 15  | 1   | 8   | 6   |\n| 16  | 1   | 8   | 7   |\n| 17  | 1   | 8   | 8   |\n| 35  | 1   | 32  | 2   |\n\n[](/reference/address-formats/#checksum-types)\nChecksum types\n-------------------------------------------------------------\n\nSeveral potential checksum strategies exist within Substrate, giving different length and longevity guarantees. There are two types of checksum preimages (known as SS58 and AccountID) and many different checksum lengths (1 to 8 bytes).\n\nIn all cases for Substrate, the Blake2b-512 (Spec, Wiki) hash function is used (OID 1.3.6.1.4.1.1722.12.2.1.16). The variants simply select the preimage used as the input to the hash function and the number of bytes taken from its output.\n\nThe bytes used are always the left-most bytes. The input to be used is the non-checksum portion of the SS58 byte series used as input to the base-58 function, for example `concat( <address-type>, <address> )`. A context prefix of 0x53533538505245, (the string SS58PRE) is prepended to the input to give the final hashing preimage.\n\nThe advantage of using more checksum bytes is simply that more bytes provide a greater degree of protection against input errors and index alteration at the cost of widening the textual address by an extra few characters. For the account ID format, this is insignificant and therefore no 1-byte alternative is provided. For the shorter account-index formats, the extra byte represents a far greater portion of the final address, so it is left for further up the stack (though not necessarily the user themselves) to determine the best tradeoff for their purposes.\n\n[](/reference/address-formats/#address-types-and-the-network-registry)\nAddress types and the network registry\n-------------------------------------------------------------------------------------------------------------\n\nThe [SS58 registry](https://github.com/paritytech/ss58-registry)\n is the canonical listing of all address type identifiers and how they map to Substrate-based networks.\n\n[](/reference/address-formats/#encoding-address-and-network-identifiers)\nEncoding address and network identifiers\n-----------------------------------------------------------------------------------------------------------------\n\nIdentifiers up to value 64 can be expressed using a simple address format. For the simple address format, the least significant byte of the network identifier value is expressed as the first byte of the encoded address.\n\nFor identifiers between 64 and 16,383, the full address format must be used.\n\nThe full address encoding requires special handling because SCALE encoding as little endian requires the first two bits to be used for the 01 prefix. To encode the network identifier, the full address format treats the first two bytes as a 16-bit sequence, and disregards the first two bits of that sequence to account for the 01 prefix. The remaining 14 bits encode the network identifier value as little endian, with the assumption that the two missing higher order bits are zero. This effectively spreads the low-order byte across the boundary between the two bytes.\n\nFor example, the 14-bit identifier `0b00HHHHHH_MMLLLLLL` is expressed in two bytes as:\n\n    0b01LLLLLL\n    0bHHHHHHMM\n\nIdentifiers of 16384 and beyond are not currently supported.\n\n[](/reference/address-formats/#validating-addresses)\nValidating addresses\n-------------------------------------------------------------------------\n\nYou can verify that a value is a valid SS58 address by using the `subkey inspect` command or though the Polkadot-JS API.\n\n### [](/reference/address-formats/#using-subkey)\nUsing subkey\n\nThe basic syntax for the `subkey inspect` command is:\n\n    subkey inspect [flags] [options] uri\n\nFor the `uri` command-line argument, you can specify the secret seed phrase, a hex-encoded private key, or an SS58 address. If the input is a valid address, the `subkey` program displays the corresponding hex-encoded public key, account identifier, and SS58 addresses. For example, to inspect the public keys derived from a secret seed phrase, you can run a command similar to the following::\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very\"\n\nThe command displays output similar to the following:\n\n    Secret phrase `caution juice atom organ advance problem want pledge someone senior holiday very` is account:\n      Secret seed:       0xc8fa03532fb22ee1f7f6908b9c02b4e72483f0dbd66e4cd456b8f34c6230b849\n      Public key (hex):  0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n      Public key (SS58): 5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n      Account ID:        0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n      SS58 Address:      5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n\nThe `subkey` program assumes that an address is based on a public/private key pair. If you inspect an address, the command returns the 32-byte account identifier. However, not all addresses in Substrate-based networks are based on keys.\n\nDepending on the command-line options you specify and the input you provided, the command output might also display the network for which the address has been encoded. For example:\n\n    subkey inspect \"12bzRJfh7arnnfPPUZHeJUaE62QLEwhK48QnH9LXeK2m1iZU\"\n\nThe command displays output similar to the following:\n\n    Public Key URI `12bzRJfh7arnnfPPUZHeJUaE62QLEwhK48QnH9LXeK2m1iZU` is account:\n      Network ID/Version: polkadot\n      Public key (hex):   0x46ebddef8cd9bb167dc30878d7113b7e168e6f0646beffd77d69d39bad76b47a\n      Account ID:         0x46ebddef8cd9bb167dc30878d7113b7e168e6f0646beffd77d69d39bad76b47a\n      Public key (SS58):  12bzRJfh7arnnfPPUZHeJUaE62QLEwhK48QnH9LXeK2m1iZU\n      SS58 Address:       12bzRJfh7arnnfPPUZHeJUaE62QLEwhK48QnH9LXeK2m1iZU\n\n### [](/reference/address-formats/#using-polkadot-js-api)\nUsing Polkadot-JS API\n\nTo verify an address in JavaScript or TypeScript projects, you can use the functions built into the Polkadot-JS API. For example:\n\n    // Import Polkadot.js API dependencies.\n    const { decodeAddress, encodeAddress } = require('@polkadot/keyring')\n    const { hexToU8a, isHex } = require('@polkadot/util')\n    \n    // Specify an address to test.\n    const address = '<addressToTest>'\n    \n    // Check address.\n    const isValidSubstrateAddress = () => {\n      try {\n        encodeAddress(isHex(address) ? hexToU8a(address) : decodeAddress(address))\n    \n        return true\n      } catch (error) {\n        return false\n      }\n    }\n    \n    // Query result.\n    const isValid = isValidSubstrateAddress()\n    console.log(isValid)\n\nIf the function returns `true`, the address you specified is a valid address.\n\n### [](/reference/address-formats/#other-ss58-implementations)\nOther SS58 implementations\n\nSupport for encoding and decoding Substrate SS58 addresses has been implemented in several other languages and libraries.\n\n*   Crystal: [`wyhaines/base58.cr`](https://github.com/wyhaines/base58.cr)\n    \n*   Go: [`itering/subscan`](https://github.com/subscan-explorer/subscan-essentials/blob/master/util/ss58/ss58.go)\n    \n*   Python: [`polkascan/py-scale-codec`](https://github.com/polkascan/py-scale-codec/blob/master/scalecodec/utils/ss58.py)\n    \n*   Typescript: [`subsquid/squid-sdk`](https://github.com/subsquid/squid-sdk/tree/master/substrate/ss58-codec)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/reference/scale-codec/)\n[Next \u2192](/reference/transaction-format/)\n\nON THIS PAGE\n\n[Basic format](#basic-format)\n[Address type](#address-type)\n[Address length in bytes](#address-length-in-bytes)\n[Checksum types](#checksum-types)\n[Address types and the network registry](#address-types-and-the-network-registry)\n[Encoding address and network identifiers](#encoding-address-and-network-identifiers)\n[Validating addresses](#validating-addresses)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/frame-pallets/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nFrame pallets\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/frame-pallets.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nFRAME pallets\n=============\n\nThe FRAME development environment provides modules\u2014called pallets\u2014and support libraries that you can use, modify, and extend to build the runtime logic to suit the needs of your blockchain.\n\nThis section provides an overview of the predefined pallets and links to the Rust API reference documentation, where you can find details about each pallet's interfaces.\n\n[](/reference/frame-pallets/#system-pallets)\nSystem pallets\n-----------------------------------------------------------\n\nThe FRAME system pallets are integral to the Substrate runtime and provide core functionality that all other pallets depend on.\n\n| System pallet name | What it's for |\n| --- | --- |\n| [`frame_benchmarking`](https://paritytech.github.io/substrate/master/frame_benchmarking/trait.Benchmark.html) | Contains common runtime patterns for benchmarking and testing purposes. |\n| [`frame_executive`](https://paritytech.github.io/substrate/master/frame_executive/index.html) | Orchestrates incoming function calls by sending them to the appropriate pallets in the runtime. |\n| [`frame_support`](https://paritytech.github.io/substrate/master/frame_support/index.html) | Provides Rust macros, types, traits, and modules that generate boilerplate code for the pallet structure when compiled. |\n| [`frame_system`](https://paritytech.github.io/substrate/master/frame_system/index.html) | Defines low-level types for Substrate primitives, storage items, and core functions for the blockchain. All other pallets depend on the `frame_system` crate. |\n\n[](/reference/frame-pallets/#functional-pallets)\nFunctional pallets\n-------------------------------------------------------------------\n\nThe Substrate development framework includes many functional pallets that provide features you might find generally useful as composable components of your blockchain. These functional pallets are prebuilt and freely available to enable the community to share, reuse, and improve the interfaces to address common use cases.\n\nThe following table highlights some of the most commonly used pallets available. However, the number of pallets that provide specialized functionality and how they provide that functionality changes frequently. You should check the [Rust documentation](https://paritytech.github.io/substrate/)\n for the most up-to-date listing of pallets and for details about using them.\n\n| Prebuilt pallet name | What it's for |\n| --- | --- |\n| [`pallet_alliance`](https://paritytech.github.io/substrate/master/pallet_alliance/index.html) | Initializes a collective for community members to join in an effort to establish rules against bad behavior and to provide recognition and influence for teams that contribute to the ecosystem. |\n| [`pallet_assets`](https://paritytech.github.io/substrate/master/pallet_assets/index.html) | Provides simple and secure methods for dealing with fungible assets. |\n| [`pallet_atomic_swap`](https://paritytech.github.io/substrate/master/pallet_atomic_swap/index.html) | Enables sending funds from an origin to a target. A proof is used to allow the target to claim the swap. If the swap is not claimed within a specified duration of time, the sender may cancel it. |\n| [`pallet_aura`](https://paritytech.github.io/substrate/master/pallet_aura/index.html) | Extends the authority round (Aura) consensus model by managing offline reporting. |\n| [`pallet_authority_discovery`](https://paritytech.github.io/substrate/master/pallet_authority_discovery/index.html) | Retrieves the current set of authorities, learns its own authority ID, and signs and verifies messages to and from other authorities. |\n| [`pallet_authorship`](https://paritytech.github.io/substrate/master/pallet_authorship/index.html) | Tracks the current author of the block and recent uncles. |\n| [`pallet_babe`](https://paritytech.github.io/substrate/master/pallet_babe/index.html) | Extends BABE consensus by collecting on-chain randomness from VRF outputs and managing epoch transitions. |\n| [pallet\\_balances](https://paritytech.github.io/substrate/master/pallet_balances/index.html) | Provides functionality for handling accounts and balances. |\n| [`pallet_bounties`](https://paritytech.github.io/substrate/master/pallet_bounties/index.html) | Manages rewards for performing specified work or for achieving a specified set of objectives. |\n| [`pallet_collective`](https://paritytech.github.io/substrate/master/pallet_collective/index.html) | Allows a set of account IDs to make their collective feelings known through dispatched calls from specialized origins. |\n| [`pallet_contracts`](https://paritytech.github.io/substrate/master/pallet_contracts/index.html) | Provides functionality for the runtime to deploy and execute WebAssembly smart contracts. |\n| [`pallet_contracts_primitives`](https://paritytech.github.io/substrate/master/pallet_contracts_primitives/index.html) | Provides common definitions that are used by the `pallet_contracts` crate for smart contracts. |\n| [`pallet_democracy`](https://paritytech.github.io/substrate/master/pallet_democracy/index.html) | Provides a democratic system that handles administration of general stakeholder voting. |\n| [`pallet_election_provider_multi_phase`](https://paritytech.github.io/substrate/master/pallet_election_provider_multi_phase/index.html) | Enables an election provider to conduct an election consisting of signed and unsigned phases. |\n| [`pallet_elections_phragmen`](https://paritytech.github.io/substrate/master/pallet_elections_phragmen/index.html) | Provides an election module based on [sequential Phragm\u00e9n](https://wiki.polkadot.network/docs/en/learn-phragmen)<br>. |\n| [`pallet_example_basic`](https://paritytech.github.io/substrate/master/pallet_example_basic/index.html) | Demonstrates concepts, APIs, and structures that are applicable for most pallets. |\n| [`pallet_example_offchain_worker`](https://paritytech.github.io/substrate/master/pallet_example_offchain_worker/index.html) | Demonstrates concepts, APIs, and structures that are applicable for most offchain workers. |\n| [`pallet_grandpa`](https://paritytech.github.io/substrate/master/pallet_grandpa/index.html) | Extends the GRANDPA consensus by managing the GRANDPA authority set ready for the native code. |\n| [`pallet_identity`](https://paritytech.github.io/substrate/master/pallet_identity/index.html) | Enables a federated naming system that allows multiple registrars to be added from a specified origin. Registrars can set a fee to provide identity-verification service. |\n| [`pallet_im_online`](https://paritytech.github.io/substrate/master/pallet_im_online/index.html) | Allows validators to gossip a heartbeat transaction with each new session to signal that the node is online. |\n| [`pallet_indices`](https://paritytech.github.io/substrate/master/pallet_indices/index.html) | Allocates indices for newly created accounts. An index is a short form of an address. |\n| [pallet\\_lottery](https://paritytech.github.io/substrate/master/pallet_lottery/index.html) | Configures a lottery that enables network participants to purchase tickets. |\n| [`pallet_membership`](https://paritytech.github.io/substrate/master/pallet_membership/index.html) | Allows control of membership of a set of `AccountId`s, useful for managing the membership of a collective. |\n| [`pallet_multisig`](https://paritytech.github.io/substrate/master/pallet_multisig/index.html) | Enables multi-signature dispatches. |\n| [`pallet_nicks`](https://paritytech.github.io/substrate/master/pallet_nicks/index.html) | Demonstrates simplified account naming on-chain. It makes no effort to create a name hierarchy, be a DNS replacement, or provide reverse lookups. |\n| [`pallet_offences`](https://paritytech.github.io/substrate/master/pallet_offences/index.html) | Tracks reported offences. |\n| [`pallet_proxy`](https://paritytech.github.io/substrate/master/pallet_proxy/index.html) | Allows accounts to give permission to other accounts to dispatch types of calls from their signed origin. |\n| [`pallet_randomness_collective_flip`](https://paritytech.github.io/substrate/master/pallet_insecure_randomness_collective_flip/index.html) | Provides a `random` function that can be used in tests and generates low-influence random values based on the block hashes from the previous `81` blocks. This pallet is not intended for use in production. |\n| [`pallet_recovery`](https://paritytech.github.io/substrate/master/pallet_recovery/index.html) | Provides a social recovery tool for users to gain access to their accounts if their private key or other authentication mechanism is lost. This pallet enables an account owner to identify trusted parties who can act on the owner's behalf to recover access to an account. |\n| [`pallet_scheduler`](https://paritytech.github.io/substrate/master/pallet_scheduler/index.html) | Exposes capabilities for scheduling dispatches to occur at a specified block number or at a specified period. These scheduled dispatches can be named or anonymous and can be canceled. |\n| [`pallet_scored_pool`](https://paritytech.github.io/substrate/master/pallet_scored_pool/index.html) | Maintains a scored membership pool where the highest scoring entities are made members. |\n| [`pallet_session`](https://paritytech.github.io/substrate/master/pallet_session/index.html) | Allows validators to manage their session keys, provides a function for changing the session length, and handles session rotation. |\n| [`pallet_society`](https://paritytech.github.io/substrate/master/pallet_society/index.html) | Provides economic incentives for users to participate and maintain a membership society. |\n| [`pallet_staking`](https://paritytech.github.io/substrate/master/pallet_staking/index.html) | Manages funds that have been staked by network maintainers. |\n| [`pallet_sudo`](https://paritytech.github.io/substrate/master/pallet_sudo/index.html) | Allows for a single account\u2014called the sudo key\u2014to execute dispatchable functions that require a `Root` origin or designate a new account to replace them as the sudo key. |\n| [`pallet_timestamp`](https://paritytech.github.io/substrate/master/pallet_timestamp/index.html) | Provides functionality to get and set the on-chain time. |\n| [`pallet_transaction_payment`](https://paritytech.github.io/substrate/master/pallet_transaction_payment/index.html) | Provides the basic logic to compute pre-dispatch transaction fees. |\n| [`pallet_treasury`](https://paritytech.github.io/substrate/master/pallet_treasury/index.html) | Provides a reserve of funds that can be managed by stakeholders in the system and a structure for making spending proposals from this reserve. |\n| [`pallet_uniques`](https://paritytech.github.io/substrate/master/pallet_uniques/index.html) | Provides methods for managing non-fungible collections and items. |\n| [`pallet_utility`](https://paritytech.github.io/substrate/master/pallet_utility/index.html) | Provides a stateless helper module for managing dispatches. |\n| [`pallet_vesting`](https://paritytech.github.io/substrate/master/pallet_vesting/index.html) | Places a linear curve on an account's locked balance. This module ensures that there is a lock in place to prevent the balance to drop below the unvested amount for any reason other than transaction fee payment. |\n\n[](/reference/frame-pallets/#parachain-pallets)\nParachain pallets\n-----------------------------------------------------------------\n\nIn addition to the functional pallets that are generally useful for any blockchain, there are prebuilt pallets that provide features specifically for blockchains that are intended to connect to a relay chain. The following pallets provide features for parachain development.\n\n| Prebuilt pallet name | What it's for |\n| --- | --- |\n| [`cumulus-pallet-aura-ext`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/aura-ext) | Provides AURA consensus for parachains. |\n| [`pallet-collator-selection`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/collator-selection) | Manages collators in a parachain. |\n| [`cumulus-pallet-dmp-queue`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/dmp-queue) | Implements a message queue for receiving messages from the relay chain. |\n| [`cumulus-pallet-parachain-system`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/parachain-system) | Provides basic functionality for cumulus-based parachains. |\n| [`cumulus-pallet-solo-to-para`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/solo-to-para) | Enables migration from a solo chain to a parachain. |\n| [`cumulus-pallet-xcm`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/xcm) | Adds support for cross-chain message passing (XCMP) to a parachain. |\n| [`cumulus-pallet-xcmp-queue`](https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/pallets/xcmp-queue) | Enables the XCMP transport layer to handle both incoming and outgoing message sending and dispatch, queuing, signalling, and backpressure. |\n\n[](/reference/frame-pallets/#additional-information)\nAdditional information\n---------------------------------------------------------------------------\n\nFor detailed information about any pallet, refer to the [Rust-generated API](https://paritytech.github.io/substrate/master/)\n documentation or the source code for the individual pallet.\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/reference/runtime-apis/)\n[Next \u2192](/reference/frame-macros/)\n\nON THIS PAGE\n\n[System pallets](#system-pallets)\n[Functional pallets](#functional-pallets)\n[Parachain pallets](#parachain-pallets)\n[Additional information](#additional-information)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/frame-macros/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nFrame macros\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/frame-macros.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nFRAME macros\n============\n\n**\u26a0\ufe0f WARNING:** This section contains outdated information. Please refer to the [Rust docs](https://paritytech.github.io/polkadot-sdk/master/frame_support/attr.pallet.html)\n for the most up-to-date documentation on this topic.\n\nSubstrate uses customized [Rust macros](https://doc.rust-lang.org/book/ch19-06-macros.html)\n to generate code and aggregate the logic from the pallets you implement for a runtime. These runtime macros allow you to focus on your runtime logic rather than spending time on encoding and decoding on-chain variables or duplicating the code required for [basic blockchain development](/learn/runtime-development/#core-primitives)\n.\n\nThis section provides an overview of the types of macros available in Rust and highlights how the specific FRAME macros are used in runtime development.\n\n[](/reference/frame-macros/#macro-basics)\nMacro basics\n------------------------------------------------------\n\nIn computer programming, macros are lines of code that encapsulate a preset sequence of instructions to execute. As code that writes code, macros enable you to abstract repetitive operations and simplify the code you need to write. With macros, you can declare complex data structures implicitly.\n\nIn Rust, macros can be **declarative macros** or **procedural macros**.\n\n[Declarative macros](https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming)\n enable you to declare a pattern and compare the result of an expression to the pattern, then execute any additional lines of code based on whether the pattern was matched. Declarative macros are widely-used in Rust programming.\n\n[Procedural macros](https://doc.rust-lang.org/book/ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes)\n are similar to functions. Unlike the pattern-matching done in declarative macros, procedural macros take code as input, perform some set of instructions on the input, and produce code as output. There are three types of procedural macros:\n\n*   [Custom derive macros](https://doc.rust-lang.org/book/ch19-06-macros.html#how-to-write-a-custom-derive-macro)\n     enable you to define and reuse the implementation of a trait for a given type. The `derive` macro is particularly useful for defining the implementation for custom runtime types that must satisfy specific traits.\n*   [Attribute-like macros](https://doc.rust-lang.org/book/ch19-06-macros.html#attribute-like-macros)\n     enable you to create new attributes to generate code.\n*   [Function-like macros](https://doc.rust-lang.org/book/ch19-06-macros.html#function-like-macros)\n     enable you to define macros that operate like function calls to generate code.\n\nBecause macros are expanded before the compiler interprets the lines of code they contain, they can define complex data structures and operations. FRAME macros take advantage of the different types of macros to provide shortcut abstractions to what is often complex blocks of code. However, the abstraction that macros provide can make the runtime code somewhat difficult to follow.\n\nTo learn more about the FRAME macros used in the Substrate runtime, you can install and use [cargo-expand](https://docs.rs/crate/cargo-expand)\n. After you install cargo-expand, you can use the `cargo expand` command to display the results of the code contained in the macros the runtime uses.\n\n[](/reference/frame-macros/#frame-support-and-system-macros)\nFRAME support and system macros\n--------------------------------------------------------------------------------------------\n\nSubstrate primitives and FRAME both rely on a collection of different macros. This section provides an overview of the macros provided in the FRAME support and FRAME system libraries. In most cases, these macros provide the framework that other pallets depend on and you should be familiar with how and where they are used in the runtime logic. After the overview, this section describes the specific macros that you are most likely to use as a runtime developer.\n\n### [](/reference/frame-macros/#frame-support-macros)\nFRAME support macros\n\nThe `frame_support` crate provides many of the most important declarative, derive, attribute-like, and function-like macros used in the runtime. A few of the important macros that you should be familiar with from the `frame_support` crate include the following:\n\n*   `construct_runtime` used to construct runtime from the list of pallets you have implemented.\n*   `match_types` used to create a type that implements the `Contains` trait with syntax similar to `matches!`.\n*   `parameter_types` used to create new implementations of the `Get` trait.\n\nFor additional information about the macros in the `frame_support` crate, see the Rust documentation for [Macros](https://paritytech.github.io/substrate/master/frame_support/index.html#macros)\n, [Derive macros](https://paritytech.github.io/substrate/master/frame_support/index.html#derives)\n, and [Attribute macros](https://paritytech.github.io/substrate/master/frame_support/index.html#attributes)\n.\n\n### [](/reference/frame-macros/#frame-system-macros)\nFRAME system macros\n\nThe `frame_system` crate uses macros to define primitives that provide access to core data types and shared utilities. These primitives and associated macros form the foundation for many node operations both in the outer node and in the runtime and act as the base layer for other pallets to interact with the Substrate framework.\n\nA few of the important primitives and macros that you should be familiar with from the `frame_system` crate include the following:\n\n*   [`sp_core`](https://paritytech.github.io/substrate/master/sp_core/index.html)\n    \n    *   `map` used to initialize a key-value collection from array.\n    *   `RuntimeDebug` used to debug the runtime.\n    \n    For more information about `sp_core` function-like macros, see [Macros](https://paritytech.github.io/substrate/master/sp_core/index.html#macros)\n    .\n    \n*   [`sp_runtime`](https://paritytech.github.io/substrate/master/sp_runtime/index.html)\n    \n    *   `bounded_btree_map` used to build a bounded `btree-map` from given literals.\n    *   `bounded_vec` used to build a bounded `vec` from given literals.\n    *   `impl_opaque_keys` used to implement `OpaqueKeys` for a described data structure.\n    *   `parameter_types` used to create new implementations of the `Get` trait.\n    \n    For more information about `sp_runtime` function-like macros, see [Macros](https://paritytech.github.io/substrate/master/sp_runtime/index.html#macros)\n    . For information about `sp_runtime` derive macros, see [Derive macros](https://paritytech.github.io/substrate/master/sp_runtime/index.html#derives)\n    .\n    \n*   [`sp_api`](https://paritytech.github.io/substrate/master/sp_api/index.html)\n    \n    *   `decl_runtime_apis` used to declare specified traits as runtime APIs.\n    *   `impl_runtime_apis` used to tag specified trait implementations as runtime APIs.\n    \n    For more information about `sp_api` function-like macros, see [Macros](https://paritytech.github.io/substrate/master/sp_api/index.html#macros)\n    .\n    \n*   [`sp_std`](https://paritytech.github.io/substrate/master/sp_std/index.html)\n    \n    *   `if_std` used to indicate code that should only be run when the `std` feature set is enabled.\n    *   `map` used to initialize a key-value collection from array.\n    *   `vec` used to create a vector containing the arguments.\n    \n    For more information about `sp_std` function-like macros, see [Macros](https://paritytech.github.io/substrate/master/sp_std/index.html#macros)\n    .\n    \n*   [`sp_version`](https://paritytech.github.io/substrate/master/sp_version/index.html)\n    \n    *   `create_apis_vec` used to create a vector of API declarations.\n    *   `create_runtime_str` used to create a `RuntimeString` constant.\n    *   `runtime_version` used as an attribute that accepts the version declaration of a runtime and generates a custom WebAssembly section with the equivalent contents.\n\nYou'll see these many of these crates listed as dependencies in the runtime and node `Cargo.toml` file for the node template.\n\n[](/reference/frame-macros/#macros-for-composing-pallets)\nMacros for composing pallets\n--------------------------------------------------------------------------------------\n\nAs discussed in [Building custom pallets](/learn/runtime-development/#building-custom-pallets)\n, most FRAME pallets are composed using a common set of sections.\n\nMacros make building each of those sections more modular and extensible. This section describes the macros available and how to use them to build your custom runtime.\n\n### [](/reference/frame-macros/#pallet)\n#\\[pallet\\]\n\nThe `#[pallet]` macro is required to declare a pallet. This [attribute macro](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html)\n is an attribute of the pallet module (`mod pallet`). Within the `pallet` module, the `#[pallet]` macro serves as an entry point for additional `#[pallet::*]` macros that describe the attributes used to identify the specific items the pallet requires. For example, a pallet typically includes a set of types, functions, and trait implementations that are aggregated by the `construct_runtime!` macro to build the runtime.\n\n    #[pallet]\n    pub mod pallet {\n    ...\n    }\n\n#### Development mode\n\nYou can specify `dev_mode` as an argument on the `#[pallet]` or `#[frame_support::pallet]` attribute macro to enable development mode for a pallet. For example, replace `#[pallet]` with `#[pallet(dev_mode)]` or `#[frame_support::pallet]` with `#[frame_support::pallet(dev_mode)]` to enable development mode for the pallet you're working on.\n\nDevelopment mode loosens some of the restrictions and requirements placed on production pallets to make it easier to iterate on your code during development and testing cycles. For example, if you enable development mode for a pallet:\n\n*   You don't need to specify a weight on every `#[pallet::call]` declaration. By default, development mode assigns a weight of zero (`0`) to calls that don't have a weight explicitly specified.\n*   You don't need to implement `MaxEncodedLen` on storage types. By default, development mode marks all storage items as unbounded.\n\nNote that you can only add the `dev_mode` argument to the `#[pallet]` or `#[frame_support::pallet]` attribute macro that encloses your pallet module. You can't specify this argument for any of the `#[pallet::*]` attribute macros.\n\nYou should never deploy pallets with development mode enabled in a production network. Before deploying a pallet in a production runtime, be sure to remove the `dev_mode` argument from the `#[pallet]` declaration, fix any compiler errors, and complete testing with the development mode disabled.\n\n#### Using the pallet module\n\nInside the module, the macro parses items with the attribute `#[pallet::*]`. Some `#[pallet::*]` attributes are mandatory and some are optional.\n\nYou can import system-level types from the `frame_support` and `frame_system` crates automatically by using the `pallet_prelude` from those crates. For example:\n\n    #[pallet]\n    pub mod pallet {\n    \t\tuse frame_support::pallet_prelude::*;\n    \t\tuse frame_system::pallet_prelude::*;\n    \t\t...\n    }\n\nThe `#[pallet]` macro is similar to a derive macro in that it expands the pallet types and trait implementations by reading the input. In most cases, the macro doesn't modify any input. However, there are a few specific scenarios where\u2014unlike a derive macro\u2014this macro modifies its input.\n\nThe macro will modify the input in the following circumstances:\n\n*   If a **generic** is replaced with a **type**\n    \n    For example, this can occur if the inner type of an item in `pub struct Pallet<..>(_)` is replaced in the `pallet::storage` macro with a type that implements the `StorageInstance` trait.\n    \n*   If a **function or data structure** is **changed**\n    \n    For example, this can occur if the `pallet::type_value` macro changes a function item into a struct and trait implementation.\n    \n*   If **docs** are **not provided** by the user\n    \n    For example, if no documentation is provided, the macro `pallet::pallet` modifies the input to add documentation above the `struct Pallet<T>(_);` item.\n    \n\n### [](/reference/frame-macros/#palletconfig)\n#\\[pallet::config\\]\n\nThe [`#[pallet::config]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#config-trait-palletconfig-mandatory)\n macro is required to define the generic data types that the pallet uses.\n\nThis macro provides the constants that are part of the system-level [`Config` trait](https://paritytech.github.io/substrate/master/frame_system/pallet/trait.Config.html)\n for the pallet.\n\nThe Config trait for this macro must be defined as a regular trait definition named `Config` that includes the system-level `frame_system::Config` trait. The definition can include other top-level traits and a where clause. For example:\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + $optionally_some_other_supertraits\n    $optional_where_clause\n    {\n    ...\n    }\n\nTo bypass the `frame_system::Config` requirement, you can use the attribute `#[pallet::disable_frame_system_supertrait_check]`. For example:\n\n    #[pallet::config]\n    #[pallet::disable_frame_system_supertrait_check]\n    pub trait Config: pallet_timestamp::Config {}\n\n### [](/reference/frame-macros/#palletconstant)\n#\\[pallet::constant\\]\n\nThe `#[pallet::constant]` macro provides the `Config` trait\u2014inside the [`#[pallet::config]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#config-trait-palletconfig-mandatory)\n macro\u2014with the types and attributes it needs for the runtime and generates associated metadata.\n\nThis macro adds information about the constants used in a pallet to the runtime metadata, including:\n\n*   the constant name\n*   the name of the associated types\n*   the constant value\n*   the value returned by `Get::get()` for the constant\n\nFor example, you can use `#[pallet::constant]` to add `type MyGetParam` to the metadata:\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config {\n    \t#[pallet::constant] // puts attributes in metadata\n    \ttype MyGetParam: Get<u32>;\n    }\n\n### [](/reference/frame-macros/#palletextra_constants)\n#\\[pallet::extra\\_constants\\]\n\nThe [`#[pallet::extra_constants]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#extra-constants-palletextra_constants-optional)\n macro enables you to add constants to the metadata.\n\nFor example, you can declare a function that returns a generated value. You can then use the `#[pallet::extra_constants]` macro to add the information for the generated value to the metadata:\n\n    #[pallet::extra_constants]\n    impl<T: Config> Pallet<T> {\n      //Example function using extra_constants\n      fn example_extra_constants() -> u128 { 4u128 }\n    }\n\n### [](/reference/frame-macros/#palletpallet)\n#\\[pallet::pallet\\]\n\nThe [`#[pallet::pallet]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#pallet-struct-placeholder-palletpallet-mandatory)\n macro is required to declare the pallet data structure placeholder to be used by `construct_runtime!` macro. This macro must be defined as a struct named Pallet with a generic type and no where clause.\n\nFor example:\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\nThis macro can generate the `Store` trait to contain an associated type for each storage item if you provide the `#[pallet::generate_store($vis trait Store)]` attribute macro.\n\nFor example:\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\nFor more information about working with storage and this macro, see the [macro expansion](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#macro-expansion-1)\n added to the `struct Pallet<T>` definition.\n\n### [](/reference/frame-macros/#palletwithout_storage_info)\n#\\[pallet::without\\_storage\\_info\\]\n\nThe `#[pallet::without_storage_info]` macro enables you to define pallet storage items that don't have a fixed size.\n\nBy default, all pallet storage items are required to implement `traits::StorageInfoTrait`, so that all key and value types have a fixed size based on the bound defined in the `pallet_prelude::MaxEncodedLen` attribute. This size limitation is required for parachain development to estimate the size of the Proof of Validity (PoV) blob.\n\nThe `#[pallet::without_storage_info]` attribute macro allows you to override the default behavior if you require unbounded storage for an entire pallet. To use it, add the `#[pallet::without_storage_info]` attribute to the pallet struct like so:\n\n    #[pallet::pallet]\n    #[pallet::generate_store(pub(super) trait Store)]\n    #[pallet::without_storage_info]\n    pub struct Pallet<T>(_);\n\nNote that you should only use the `#[pallet::without_storage_info]` macro if you need to make all of the storage items in your pallet unbounded. If you only need undefined storage for a specific storage item, you can use the `#[pallet::unbounded]` attribute macro to override the fixed size constraint.\n\nBecause the `#[pallet::without_storage_info]` macro applies to all storage items in your pallet, you should only use it in a test or development environment. You should never use the `#[pallet::without_storage_info]` attribute macro in a production environment.\n\nFor more information about working with storage and this macro, see the [macro expansion](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#pallet-struct-placeholder-palletpallet-mandatory)\n added to the `struct Pallet<T>` definition.\n\n### [](/reference/frame-macros/#palletunbounded)\n#\\[pallet::unbounded\\]\n\nThe `#[pallet::unbounded]` attribute macro enables you to declare a specific storage item as unbounded. By default, all pallet storage items are required to have a fixed size. You can use this attribute macro to override the default requirement on a specific storage item. If you are a parachain developer, you can use this macro for storage items that will never go into the Proof of Validity (PoV) blob.\n\n### [](/reference/frame-macros/#pallethooks)\n#\\[pallet::hooks\\]\n\nThe [`#[pallet::hooks]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#hooks-pallethooks-optional)\n macro allows you to declare optional pallet hooks to implement pallet-specific logic at specific points in the block making process. Within the `#[pallet::hooks]` macro, you can implement the [`Hooks`](https://paritytech.github.io/substrate/master/frame_support/traits/trait.Hooks.html#provided-methods)\n trait to execute logic when a block is being initialized or finalized, before a runtime is upgraded, or after a runtime upgrade has been completed.\n\nFor example:\n\n    #[pallet::hooks]\n    impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {\n      // Hooks functions and logic goes here.\n    }\n\nFor more information about using hooks, see the Rust documentation for [pallet::hooks](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html##hooks-pallethooks-optional)\n and [macro expansion](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#macro-expansion-2)\n.\n\n### [](/reference/frame-macros/#palletcall)\n#\\[pallet::call\\]\n\nThe [`#[pallet::call]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet#call-palletcall-optional)\n is required to implement the functions that can be dispatched to the runtime for a pallet. Each function must:\n\n*   define a weight with the `#[pallet::weight($expr)]` attribute\n*   have its first argument as `origin: OriginFor<T>`\n*   use compact encoding for arguments using #\\[pallet::compact\\]\n*   return `DispatchResultWithPostInfo` or `DispatchResult`\n\nExtrinsic requests coming into the runtime can use calls to trigger specific logic. Calls can also be used in on-chain governance, demonstrated by the democracy pallet where calls can be voted on. The `#[pallet::call]` aggregates all of the function call logic using the [`Call` enum](https://paritytech.github.io/substrate/master/frame_system/pallet/enum.Call.html)\n. The [aggregation](/reference/glossary/#aggregation)\n enables FRAME to batch functions of the same type into a single runtime call. The runtime then generates the associated items from the implementation defined in the `impl` code blocks.\n\nFor more information. see the Rust documentation for [pallet::call](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#call-palletcall-optional)\n.\n\n### [](/reference/frame-macros/#palleterror)\n#\\[pallet::error\\]\n\nThe [`#[pallet::error]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet#error-palleterror-optional)\n macro allows you to define the error types that can be returned from the function calls dispatched to the runtime. The error information is included in the runtime metadata.\n\nThe macro must be defined as an enumeration named Error with a generic type and variants with or without fields.\n\nFor example:\n\n    #[pallet::error]\n    pub enum Error<T> {\n    \t/// $some_optional_doc\n    \t$SomeFieldLessVariant,\n    \t/// $some_more_optional_doc\n    \t$SomeVariantWithOneField(FieldType),\n    \t...\n    }\n\nAny field type you specify for an enumeration variant must implement the `scale_info::TypeInfo` trait and its encoded size should be as small as possible. Field types in enum variants must also implement the [PalletError](https://paritytech.github.io/substrate/master/frame_support/traits/trait.PalletError.html)\n trait to compile.\n\nFor more information, see the Rust documentation for [pallet::error](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#error-palleterror-optional)\n.\n\n### [](/reference/frame-macros/#palletevent)\n#\\[pallet::event\\]\n\nThe [`#[pallet::event]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#event-palletevent-optional)\n macro allows you to define event types for a pallet.\n\nThis macro is similar to the `pallet::error` macro but it can hold more information. The macro is defined as an enumeration named Event.\n\nFor example:\n\n    #[pallet::event]\n    #[pallet::generate_deposit($visibility fn deposit_event)] // Optional\n    pub enum Event<$some_generic> $optional_where_clause {\n    \t/// Some doc\n    \t$SomeName($SomeType, $YetanotherType, ...),\n    \t...\n    }\n\nFor more information, see the Rust documentation for [pallet::event](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#event-palletevent-optional)\n.\n\n### [](/reference/frame-macros/#palletstorage)\n#\\[pallet::storage\\]\n\nThe [`#[pallet::storage]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#storage-palletstorage-optional)\n macro enables you to define abstract storage inside runtime storage and to set metadata for that storage. This attribute macro can be used multiple times.\n\nThe `[pallet::storage]` macro can be defined using named or unnamed generics with a type alias of StorageValue, StorageMap or StorageDoubleMap.\n\n    #[pallet::storage]\n    #[pallet::getter(fn $getter_name)] // optional\n    $vis type $StorageName<$some_generic> $optional_where_clause\n    \t= $StorageType<$generic_name = $some_generics, $other_name = $some_other, ...>;\n\nFor more information, see the Rust documentation for [pallet::storage](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#storage-palletstorage-optional)\n and the following storage data structures:\n\n*   [StorageDoubleMap](https://paritytech.github.io/polkadot-sdk/master/frame_support/storage/types/struct.StorageDoubleMap.html)\n    \n*   [StorageMap](https://paritytech.github.io/polkadot-sdk/master/frame_support/storage/types/struct.StorageMap.html)\n    \n*   [StorageValue](https://paritytech.github.io/polkadot-sdk/master/frame_support/storage/types/struct.StorageValue.html)\n    \n\n### [](/reference/frame-macros/#pallettype_value)\n#\\[pallet::type\\_value\\]\n\nThe `#[pallet::type_value]` macro enables you to define a struct that implements a `Get` trait for storage types. This attribute macro can be used multiple times in combination with the #\\[pallet::storage\\] macro to define default values in storage.\n\n    #[pallet::type_value]\n    fn MyDefault<T: Config>() -> T::Balance { 3.into() }\n\nFor more information about using this macro, see the Rust documentation for [pallet::type\\_value](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#type-value-pallettype_value-optional)\n.\n\n### [](/reference/frame-macros/#palletgenesis_build)\n#\\[pallet::genesis\\_build\\]\n\nThe [`#[pallet::genesis_build]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#genesis-build-palletgenesis_build-optional)\n macro allows you to define how a genesis configuration is built.\n\nThe macro is defined as a Rust trait implementation with a generic type <T: Config> of trait GenesisBuild on type GenesisConfig.\n\nFor example:\n\n    #[pallet::genesis_build]\n    impl<T: Config> GenesisBuild<T> for GenesisConfig {\n    \tfn build(&self) {}\n    }\n\nFor more information, see the Rust documentation for [pallet::genesis\\_build](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#genesis-build-palletgenesis_build-optional)\n.\n\n### [](/reference/frame-macros/#palletgenesis_config)\n#\\[pallet::genesis\\_config\\]\n\nThe [`#[pallet::genesis_config]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#genesis-config-palletgenesis_config-optional)\n macro allows you to define the genesis configuration of the pallet.\n\nThe macro can be defined as an enumeration or a struct, but must be public and implement trait the GenesisBuild with the #\\[pallet::genesis\\_build\\] macro.\n\nFor example:\n\n    #[pallet::genesis_config]\n    pub struct GenesisConfig<T: Config> {\n    \t_myfield: BalanceOf<T>,\n    }\n\nFor more information, see the Rust documentation for [pallet::genesis\\_config](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#genesis-config-palletgenesis_config-optional)\n.\n\n### [](/reference/frame-macros/#palletinherent)\n#\\[pallet::inherent\\]\n\nThe [`#[pallet::inherent]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#inherent-palletinherent-optional)\n macro allows the pallet to provide data in an unsigned inherent transaction.\n\nThe macro is defined as a trait implementation with bound <T: Config,> of trait ProvideInherent for type Pallet.\n\nFor example:\n\n    #[pallet::inherent]\n    impl<T: Config> ProvideInherent for Pallet<T> {\n    \t// ... regular trait implementation\n    }\n\nFor more information, see the Rust documentation for [pallet::inherent](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#inherent-palletinherent-optional)\n.\n\n### [](/reference/frame-macros/#palletorigin)\n#\\[pallet::origin\\]\n\nThe [`#[pallet::origin]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#origin-palletorigin-optional)\n macro allows you to define an origin for the pallet.\n\nThe macro must be defined as a type alias, enumeration, or struct. The macro must be public.\n\nFor example:\n\n    #[pallet::origin]\n    pub struct Origin<T>(PhantomData<(T)>);\n\nFor more information, see the Rust documentation for [pallet::origin](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#origin-palletorigin-optional)\n.\n\n### [](/reference/frame-macros/#palletvalidate_unsigned)\n#\\[pallet::validate\\_unsigned\\]\n\nThe [`#[pallet::validate_unsigned]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#validate-unsigned-palletvalidate_unsigned-optional)\n macro allows the pallet to validate unsigned transactions.\n\nThe macro is defined as a trait implementation with bound <T: Config> of trait ValidateUnsigned for type Pallet.\n\nFor example:\n\n    #[pallet::validate_unsigned]\n    impl<T: Config> ValidateUnsigned for Pallet<T> {\n    \t// ... regular trait implementation\n    }\n\nFor more information, see the Rust documentation for [pallet::validate\\_unsigned](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#validate-unsigned-palletvalidate_unsigned-optional)\n.\n\n[](/reference/frame-macros/#runtime-construction-macros)\nRuntime construction macros\n------------------------------------------------------------------------------------\n\nAs an introduction to the use of macros, [Substrate runtime macros](/reference/frame-macros/#substrate-runtime-macros)\n highlighted several of the macros that are provided in the `frame_support` and `frame_system` crates. However, a few of those macros introduced in Substrate runtime macros warrant additional attention because of the role they play in constructing the runtime logic.\n\n### [](/reference/frame-macros/#construct_runtime)\nconstruct\\_runtime!\n\nThe `construct_runtime!` macro generates all of the data structures that have been declared and implemented for the pallets to be included in the runtime.\n\nFor example, the `construct_runtime!` macro extrapolates information from the pallet attribute macros to generate details such as:\n\n*   Runtime struct to represent the Substrate runtime.\n*   Call enumeration variants and metadata for each pallet included in the runtime that has callable functions.\n*   Event enumeration variants for each pallet included in the runtime that emits events.\n*   Genesis configuration struct for building storage for each pallet included in the runtime that defines storage items.\n*   Inherent data for pallets that support inherent transactions.\n*   Origin enumeration variants for pallets that identify the function caller using the default origin definition or pallet-specific custom origins.\n*   Validation for unsigned transactions for pallets that support unsigned transactions.\n\nThe `construct_runtime!` macro also implements helper traits for the data structures and types exposed, generates an index of the pallets listed in the runtime, and maps events, errors, and callable functions from the runtime back to the pallet they originate from.\n\nBy default, the `construct_runtime!` macro includes all pallet attributes for all pallets listed in the macro definition. You can override the default behavior to exclude specific parts or to only include specific parts. For example, if you don't want the runtime to expose the function calls defined in specific pallet, you can explicitly exclude them in the `construct_runtime!` macro with an entry similar to the following:\n\n    MyCustomPallet: pallet_my_custom_pallet exclude_parts { Call }\n\nIn this example, `MyCustomPallet` is the name that uniquely identifies the pallet that requires special handling and `pallet_my_custom_pallet` represents the path to the pallet. The `exclude_parts` keyword specifies that you only want to exclude certain attributes for the specified pallet. In this case, only callable functions for MyCustomPallet are excluded.\n\nSimilarly, you can override the default to explicitly include certain parts in the runtime with the `use_parts` keyword. For example, if you only want the runtime to expose a subset of attributes for a specific pallet, you can explicitly include them in the `construct_runtime!` macro with an entry similar to the following:\n\n    MyCustomPallet: pallet_my_custom_pallet use_parts { Pallet, Call, Storage, RuntimeEvent, RuntimeOrigin, Config }\n\nYou should note the the order in which pallets are listed in the `construct_runtime!` macro is significant. By default, the pallet index starts at zero for the first pallet and is incremented for each pallet thereafter. You can manually adjust the indexing in the `construct_runtime!` macro by adding an index number for a pallet. For example, you can generate all pallet attributes for the `MyCustomPallet` and set the index to eight with syntax like this:\n\n    MyCustomPallet: pallet_my_custom_pallet use_parts = 8,\n\nHowever, you should also note that the order used for defining pallets in the construct\\_runtime! macro affects the genesis storage configuration. If you have one pallet that depends on another pallet, be sure the pallet that is depended upon comes before\u2014that is, is listed before or has a lower index value\u2014than the pallet that depends on it.\n\nFor more information, see the Rust documentation for [construct\\_runtime](https://paritytech.github.io/substrate/master/frame_support/macro.construct_runtime.html)\n\n### [](/reference/frame-macros/#parameter_types)\nparameter\\_types!\n\nThe `parameter_types!` macro declares the parameter types that are to be assigned to the configuration trait for each pallet during runtime construction.\n\nThis macro converts each parameter specified into a struct type with a `get()` function that returns the specified type. Each parameter struct type also implements a `frame_support::traits::Get<I>` trait to convert the type to its specified value.\n\nFor more information, see the Rust documentation for [parameter\\_types](https://paritytech.github.io/substrate/master/frame_support/macro.parameter_types.html)\n.\n\n### [](/reference/frame-macros/#implruntimeapis)\nimpl_runtime_apis!\n\nThe `impl_runtime_apis!` macro generates the runtime API for all of the traits that are implemented by the macro. The traits implemented in this macro must first be declared in the `decl_runtime_apis` macro. The macro generates the `RuntimeApi` and `RuntimeApiImpl` structs to expose these traits as [runtime APIs](/reference/runtime-apis/)\n. The traits exposed by the macro enable outer node components to communicate with the runtime through the `RuntimeApi` type.\n\nThe macro declares the `RuntimeApi` and `RuntimeApiImpl` structs and implements various helper traits for the `RuntimeApiImpl` struct. If you define additional interfaces for the runtime to expose in the `impl_runtime_apis!` macro, they are appended to the default `RuntimeApiImpl` implementation.\n\nThe macro also generates the `RUNTIME_API_VERSIONS` constant to expose version information about all of the implemented `api` traits. This constant is used to instantiate the `apis` field of [`RuntimeVersion`](https://paritytech.github.io/substrate/master/sp_version/struct.RuntimeVersion.html)\n.\n\nFor more information, see the Rust documentation for [impl_runtime_apis](https://paritytech.github.io/substrate/master/sp_api/macro.impl_runtime_apis.html)\n.\n\n### [](/reference/frame-macros/#app_crypto)\napp\\_crypto!\n\nThe `app_crypto!` macro generates application-specific cryptographic key pairs using the specified signature algorithm.\n\nThe macro declares the following struct types:\n\n*   `Public`\n    \n    For the `Public` type, the macro implements the `sp_application_crypto::AppKey` trait to define the public key type and the `sp_application_crypto::RuntimeAppPublic` trait enable generating key pairs, signing transactions, and verifying signatures.\n    \n*   `Signature`\n    \n    For the `Signature` type, the macro implements the `core::hash::Hash` trait to specify the signature algorithm\u2014for example, SR25519 or ED25519\u2014used to hash the signature.\n    \n*   `Pair`\n    \n    For the `Pair` type, the macro implements the `sp_application_crypto::Pair` and `sp_application_crypto::AppKey` traits to generate public-private key pairs from a secret phrase or seed.\n    \n\nIn addition to the traits for these structs, the macro implements helper traits.\n\nFor more information, see the Rust documentation for [app\\_crypto](https://paritytech.github.io/substrate/master/sp_application_crypto/macro.app_crypto.html)\n.\n\n[](/reference/frame-macros/#benchmarking-macros)\nBenchmarking macros\n--------------------------------------------------------------------\n\nThe FRAME benchmarking framework defines several macros for benchmarking pallets. The following macros are used for benchmarking:\n\n*   `add_benchmark` to add pallet benchmarks to a `Vec<BenchmarkBatch>` object using the pallet crate name and generated module struct.\n*   `benchmarks` to construct the benchmark logic for testing the execution time for function calls.\n*   `benchmarks_instance` to provide the same functionality as the `benchmarks` macro for instantiable modules.\n*   `benchmarks_instance_pallet` to provide the same functionality as the `benchmarks` macro for instantiable pallets that are declared with the \\[`frame_support::pallet`\\] macro.\n*   `cb_add_benchmarks` to call `add_benchmark` as a callback for the `define_benchmarks` macro.\n*   `cb_list_benchmarks` to call `list_benchmark` as a callback for the `define_benchmarks` macro.\n*   `define_benchmarks` to define all of the benchmarked pallets for the runtime.\n*   `impl_benchmark_test_suite` to create a test suite that runs the benchmarks defined in the benchmarking module.\n*   `list_benchmark` to generate a list of benchmarks for the pallets configured in the runtime.\n*   `whitelist` to add accounts to an allow list for testing purposes.\n\n[](/reference/frame-macros/#references)\nReferences\n--------------------------------------------------\n\n*   [The Rust Programming Language](https://doc.rust-lang.org/book/ch19-06-macros.html)\n    \n*   [The Little Book of Rust Macros](https://danielkeep.github.io/tlborm/book)\n    \n\n**Last edit:** October 6, 2023\n\n[\u2190 Previous](/reference/frame-pallets/)\n[Next \u2192](/reference/account-data-structures/)\n\nON THIS PAGE\n\n[Macro basics](#macro-basics)\n[FRAME support and system macros](#frame-support-and-system-macros)\n[Macros for composing pallets](#macros-for-composing-pallets)\n[Runtime construction macros](#runtime-construction-macros)\n[Benchmarking macros](#benchmarking-macros)\n[References](#references)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\nReference\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nReference\n=========\n\nThis section contains links to the Rust API documentation and technical reference materials for Substrate and FRAME tools and libraries.\n\n*   [Rust API](/reference/rust-api/)\n     highlights entry points into the Rust API documentation that is generated directly from the Substrate source code.\n*   [Glossary](/reference/glossary/)\n     defines and explains concepts and terminology that are specific to blockchain technology or the Substrate ecosystem.\n*   [Command-line tools](/reference/command-line-tools/)\n     provides reference information for the most commonly-used command-line interface (CLI) tools.\n*   [Runtime APIs](/reference/runtime-apis/)\n     highlights the application programming interfaces that the runtime provides to support communication with outer node services.\n*   [FRAME pallets](/reference/frame-pallets/)\n     lists all of the pre-built pallets that you can include in your runtime.\n*   [FRAME macros](/reference/frame-macros/)\n     describes the all of the FRAME macros you can use to build custom pallets.\n*   [Account data structures](/reference/account-data-structures/)\n     describes account-related data structures and how account properties are used to manage the account lifecycle in the runtime logic.\n*   [Type encoding (SCALE)](/reference/scale-codec/)\n     describes the encoding scheme used in Substrate to minimize the data transferred over the network.\n*   [How-to reference guides](/reference/how-to-guides/)\n     lists the _How-to_ quick reference guides that provide abbreviated instructions for accomplishing specific tasks. The _How-to_ guides assume that you are already familiar with Substrate and programming in Rust.\n*   [XCM reference](/reference/xcm-reference/)\n     provides basic reference information for the cross-consensus message format, including descriptions of XCM instructions, registers, origins, and errors.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/tutorials/build-a-parachain/transfer-assets-with-xcm/)\n[Next \u2192](/reference/rust-api/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/glossary/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nGlossary\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/glossary.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nGlossary\n========\n\nThis glossary defines and explains concepts and terminology that are specific to blockchain technology or the Substrate ecosystem.\n\n[](/reference/glossary/#adaptive-quorum-biasing-aqb)\nadaptive quorum biasing (AQB)\n----------------------------------------------------------------------------------\n\nProvides a mechanism for adjusting the passing threshold for a referendum based on voter turnout. Adaptive quorum biasing allows for more flexible governance by removing the requirement to have an arbitrary quorum for voting purposes, which create undesirable governance mechanics. Adaptive quorum biasing is implemented in the [Democracy pallet](/reference/frame-pallets/#democracy)\n. The Democracy pallet provides the interfaces for on-chain bodies such as a [collective](/reference/glossary/#council)\n or individual token holder\u2014to call referenda with positive, negative, or neutral biases.\n\nWith a **positive turnout bias**, the passing threshold _decreases_ as more votes are cast, so that a higher turnout increases the likelihood of a referendum passing. With a **negative turnout bias**, the passing threshold _increases_ as more votes are cast. Negative turnout bias is also sometimes called a \"default carries\" position because if there's an apathetic voting body, the referendum passes by default. A **neutral turnout bias** specifies a simple majority passing threshold.\n\n[](/reference/glossary/#aggregation)\naggregation\n------------------------------------------------\n\nUsed in the context of [FRAME](/reference/glossary/#frame)\n, _aggregation_ or _[pallet](/reference/glossary/#pallet)\n aggregation_ is the process of combining analogous types from multiple runtime modules into a single type. Pallet aggregation allows each module's analogous types to be represented. The call containing the aggregated types is sometimes referred to as an _outer call_ or a call to an _outer object_. Currently, there are six data types that can be aggregated:\n\n*   `Call` for published functions that can be called with a set of arguments.\n*   `Error` for messages that indicate why a function invocation (`Call`) failed.\n*   `Event` for pallet-emitted events that describe state changes.\n*   `Log` for extensible header items.\n*   `Metadata` for information that allows inspection of the above.\n*   `Origin` for the source of a function invocation (`Call`).\n\n[](/reference/glossary/#approval-voting)\napproval voting\n--------------------------------------------------------\n\nVoting system where voters can vote for as many candidates as desired. The candidate with the highest overall number of votes wins. With approval voting, it is worth noting the following:\n\n*   Voting for all candidates is the same as voting for none.\n*   It is possible to vote against a single candidate by voting for all other candidates.\n\nApproval voting is used by the [FRAME Elections Phragmen pallet](/reference/frame-pallets/#elections-phragmen)\n as a governing [Council](/reference/glossary/#council)\n on a number of Substrate-based chains.\n\n[](/reference/glossary/#author)\nauthor\n--------------------------------------\n\nDescribes the [node](/reference/glossary/#node)\n that is responsible for the creation of a [block](/reference/glossary/#block)\n. Block authors are also referred to as _block producers_. In a proof-of-work blockchain, these nodes are called _miners_.\n\n[](/reference/glossary/#authority)\nauthority\n--------------------------------------------\n\nThe [nodes](/reference/glossary/#node)\n that act as a collective to manage [consensus](/reference/glossary/#consensus)\n on a [blockchain](/reference/glossary/#blockchain)\n network. In a [proof-of-stake](/reference/glossary/#nominated-proof-of-stake-npos)\n blockchain\u2014for example, a blockchain that uses the [Staking pallet](/reference/frame-pallets/#staking)\n from [FRAME](/reference/glossary/#frame)\n\u2014authorities are determined through a token-weighted nomination and voting system.\n\nThe terms _authorities_ and _[validators](/reference/glossary/#validator)\n_ sometimes seem to refer the same thing. However, _validators_ is a broader term that can include other aspects of chain maintenance such as parachain validation. In general, authorities are a (non-strict) subset of validators and many validators are authorities.\n\n[](/reference/glossary/#authority-round-aura)\nauthority round (Aura)\n--------------------------------------------------------------------\n\nDeterministic [consensus](/reference/glossary/#consensus)\n protocol where [block](/reference/glossary/#block)\n production is limited to a rotating list of [authorities](/reference/glossary/#authority)\n that take turns creating blocks. With authority round (Aura) consensus, the majority of online authorities are assumed to be honest.\n\nLearn more by reading [the official wiki article](https://openethereum.github.io/Aura)\n for the Aura consensus algorithm.\n\nThe Aura protocol is often used in combination with GRANDPA as a [hybrid consensus](/reference/glossary/#hybrid-consensus)\n protocol where [Aura](/reference/glossary/#aura)\n is used for block production and short-term [probabilistic finality](/reference/glossary/#probabilistic-finality)\n, with [deterministic finality](/reference/glossary/#deterministic-finality)\n provided by [GRANDPA](/reference/glossary/#grandpa)\n.\n\n[](/reference/glossary/#blind-assignment-of-blockchain-extension-babe)\nblind assignment of blockchain extension (BABE)\n----------------------------------------------------------------------------------------------------------------------\n\nA [block authoring](/reference/glossary/#author)\n protocol similar to [Aura](/reference/glossary/#aura)\n. However, with the blind assignment of blockchain extension (BABE) protocol, [authorities](/reference/glossary/#authority)\n win [slots](/reference/glossary/#slot)\n based on a verifiable random function (VRF) as opposed to the round-robin selection method. The winning authority can select a chain and submit a new block for it.\n\nLearn more about BABE by referring to its [official Web3 Foundation research document](https://research.web3.foundation/Polkadot/protocols/block-production/Babe)\n.\n\n[](/reference/glossary/#block)\nblock\n------------------------------------\n\nA block is a single element of a blockchain that contains an ordered set of instructions\u2014often in the form of transactions\u2014that might result in a state change.\n\nEach block is identified by a [cryptographic digest](/reference/glossary/#cryptographic-primitives)\n\u2014a hash\u2014and includes a pointer back to the hash of its parent block. Every block has a [header](/reference/glossary/#header)\n and a body that contains the executed instructions that made it into the block within certain parameters. Blocks are most often visualized as a vertical stack with each block referencing its parent block until there are conflicts that must be resolved using a [fork-choice rule](/learn/consensus/#fork-choice-rules)\n and an optional [finality](/reference/glossary/#finality)\n mechanism.\n\n[](/reference/glossary/#block-height)\nblock height\n--------------------------------------------------\n\nBecause blocks are often visualized as a vertical stack, block height is used to describe the distance a specific block is away from the first block. The block height for any particular block in a blockchain indicates how many blocks preceded that block.\n\nSimilarly, the terms _top_ or _tip_ are used to describe the most recently-added block in a chain.\n\n[](/reference/glossary/#block-number)\nblock number\n--------------------------------------------------\n\nSimilar to block height, a block number is used to describe the distance a specific block is away from the first block. The block number for any particular block in a blockchain indicates how many blocks preceded that block.\n\n[](/reference/glossary/#blockchain)\nblockchain\n----------------------------------------------\n\nDescribes a distributed network of computers that uses [cryptography](/reference/glossary/#cryptographic-primitives)\n to allow a group of participants to trustlessly come to [consensus](/reference/glossary/#consensus)\n on the [state](/reference/glossary/#state)\n of a system as it evolves over time. The computers that compose the blockchain network are called [nodes](/reference/glossary/#node)\n.\n\n[](/reference/glossary/#byzantine-fault-tolerance-bft)\nbyzantine fault tolerance (BFT)\n--------------------------------------------------------------------------------------\n\nDefines the ability of a distributed computer network to remain operational if a certain proportion of its [nodes](/reference/glossary/#node)\n or [authorities](/reference/glossary/#authority)\n are defective or behaving maliciously. Typically, a distributed network is considered byzantine fault tolerant if it can remain functional with up to one-third of nodes assumed to defective, offline, actively malicious, and acting as part of a coordinated attack.\n\n### [](/reference/glossary/#byzantine-failure)\nbyzantine failure\n\nThe loss of a network service due to node failures that exceed the proportion of nodes required to reach consensus.\n\n### [](/reference/glossary/#practical-byzantine-fault-tolerance-pbft)\npractical byzantine fault tolerance (pBFT)\n\nAn early approach to byzantine fault tolerance. pBFT systems tolerate byzantine behavior from up to one-third of participants. The communication overhead for such systems is `O(n\u00b2)`, where `n` is the number of nodes (participants) in the system.\n\n[](/reference/glossary/#call)\ncall\n----------------------------------\n\nIn a general context, a call describes the act of invoking a function to be executed. In the context of pallets that contain functions to be dispatched to the runtime, `Call` is an enumeration data type that describes the functions that can be dispatched with one variant per pallet. The object that a `Call` represents is a [dispatch](/reference/glossary/#dispatch)\n data structure or a dispatchable.\n\n[](/reference/glossary/#collator)\ncollator\n------------------------------------------\n\nAn [author](/reference/glossary/#author)\n of a [parachain](/reference/glossary/#parachain)\n network. They are not [authorities](/reference/glossary/#authority)\n in themselves, as they require a [relay chain](/reference/glossary/#relay-chain)\n to coordinate [consensus](/reference/glossary/#consensus)\n. More details are found on the [Polkadot Wiki on collators](https://wiki.polkadot.network/docs/learn-collator)\n.\n\n[](/reference/glossary/#consensus)\nconsensus\n--------------------------------------------\n\nIn the context of a [blockchain](/reference/glossary/#blockchain)\n, consensus is the process nodes use to agree on the canonical [fork](/reference/glossary/#fork)\n of a chain. Consensus is comprised of [authorship](/reference/glossary/#author)\n, [finality](/reference/glossary/#finality)\n, and [fork-choice rule](/learn/consensus/#fork-choice-rules)\n.\n\nIn the Substrate ecosystem, these three components are separated from one another, and the term consensus often refers specifically to authorship. In the context of a Substrate [node](/reference/glossary/#node)\n, the term **consensus engine** describes the node subsystem that is responsible for consensus tasks.\n\nSee also [hybrid consensus](/reference/glossary/#hybrid-consensus)\n.\n\n[](/reference/glossary/#consensus-algorithm)\nconsensus algorithm\n----------------------------------------------------------------\n\nAn algorithm that ensures that a set of [actors](/reference/glossary/#authority)\n\u2014who don't necessarily trust each other\u2014can reach agreement about state as the result of some computation. Most consensus algorithms assume that up to one-third of the actors or nodes can be [byzantine fault tolerant](/reference/glossary/#byzantine-fault-tolerance-bft)\n.\n\nConsensus algorithms are generately concerned with ensuring two properties:\n\n*   **safety** indicating that all honest nodes eventually agreed on the state of the chain.\n*   **liveness** indicating the ability for the chain to keep making progress.\n\nFor detailed information about the consensus strategies of the [Polkadot network](/reference/glossary/#polkadot-network)\n, see the [Polkadot Consensus](https://polkadot.network/polkadot-consensus-part-1-introduction/)\n blog series.\n\nSee also [hybrid consensus](/reference/glossary/#hybrid-consensus)\n.\n\n[](/reference/glossary/#cryptographic-primitives)\ncryptographic primitives\n--------------------------------------------------------------------------\n\nA general term used to describe fundamental cryptographic concepts such as signature schemes and hashing algorithms. Cryptographic primitives are essential to many aspects of the Substrate ecosystem. For example:\n\n*   Hashing algorithms produce [blocks](/reference/glossary/#block)\n     of hashed data and each block uses the hash generated by the hashing algorithm to reference its parent block.\n*   Hashing is used to encode [state](/reference/glossary/#state)\n     as a [trie](/reference/glossary/#trie-patricia-merkle-tree)\n     data structure to facilitate efficient verification.\n*   Digital signature schemes are used to secure different [consensus](/reference/glossary/#consensus)\n     models such as [authorities](/reference/glossary/#authority)\n    .\n*   Cryptographic schemes identify and authenticate the [accounts](/learn/accounts-addresses-keys/)\n     used to perform [transactions](/reference/glossary/#transaction)\n     in the Substrate runtime.\n\n[](/reference/glossary/#council)\ncouncil\n----------------------------------------\n\nMost often used to refer to an instance of the [Collective pallet](/reference/frame-pallets/#collective)\n on Substrate-based networks such as [Kusama](/reference/glossary/#kusama)\n or [Polkadot](/reference/glossary/#polkadot)\n if the Collective pallet is part of the [FRAME](/reference/glossary/#frame)\n\\-based [runtime](/reference/glossary/#runtime)\n for the network. A council primarily serves to optimize and balance the more inclusive referendum system.\n\n[](/reference/glossary/#database-backend)\ndatabase backend\n----------------------------------------------------------\n\nThe means by which the [state](/reference/glossary/#state)\n of a [blockchain](/reference/glossary/#blockchain)\n network is persisted between invocations of the [blockchain node](/reference/glossary/#node)\n application. For information about how the database backend is implemented and used by Substrate-based chains, see [Runtime storage](/build/runtime-storage/)\n.\n\n[](/reference/glossary/#dev-phrase)\ndev phrase\n----------------------------------------------\n\nA [mnemonic phrase](https://en.wikipedia.org/wiki/Mnemonic#For_numerical_sequences_and_mathematical_operations)\n that is intentionally made public. All of the well-known development accounts\u2014Alice, Bob, Charlie, Dave, Eve, and Ferdie\u2014are generated from the same secret phrase. The secret phrase is: `bottom drive obey lake curtain smoke basket hold race lonely fit walk`\n\nMany tools in the Substrate ecosystem, such as [`subkey`](/reference/command-line-tools/subkey/)\n, allow you to implicitly specify an account using a derivation path such as `//Alice`.\n\n[](/reference/glossary/#digest)\ndigest\n--------------------------------------\n\nAn extensible field of the [block header](/reference/glossary/#header)\n that encodes information needed by several actors in a blockchain network including:\n\n*   [Light clients](/reference/glossary/#light-client)\n     for chain synchronization.\n*   Consensus engines for block verification.\n*   The runtime itself in the case of pre-runtime digests.\n\n[](/reference/glossary/#dispatch)\ndispatch\n------------------------------------------\n\nThe execution of a function with a predefined set of arguments. In the context of [runtime](/reference/glossary/#runtime)\n development with [FRAME](/reference/glossary/#frame)\n, a dispatch takes pure data\u2014the [`Call`](/reference/glossary/#call)\n type\u2014and uses that data to execute a published function in a runtime module ([pallet](/reference/glossary/#pallet)\n) with predefined arguments. The published functions take one additional parameter, known as [`origin`](/reference/glossary/#origin)\n, that allows the function to securely determine the provenance of its execution.\n\n[](/reference/glossary/#equivocating)\nequivocating\n--------------------------------------------------\n\nA type of erroneous or malicious behavior that involves backing multiple mutually-exclusive options within the [consensus](/reference/glossary/#consensus)\n mechanism.\n\n[](/reference/glossary/#ethash)\nethash\n--------------------------------------\n\nA function used by some [proof-of-work](/reference/glossary/#proof-of-work)\n [consensus](/reference/glossary/#consensus)\n systems, such as the Ethereum blockchain. It was developed by [a team led by Tim Hughes](https://github.com/ethereum/ethash/graphs/contributors)\n.\n\n[](/reference/glossary/#events)\nevents\n--------------------------------------\n\nA means of recording, for the benefit of the offchain world, that some particular [state](/reference/glossary/#state)\n transition happened. In the context of [FRAME](/reference/glossary/#frame)\n, events are a composable data types that each [pallet](/reference/glossary/#pallet)\n can individually define. Events in FRAME are implemented as a set of transient storage items that are inspected immediately after a block has executed and reset during block-initialization.\n\n[](/reference/glossary/#executor)\nexecutor\n------------------------------------------\n\nA means of executing a function call in a given [runtime](/reference/glossary/#runtime)\n with a set of dependencies. There are two orchestration engines in Substrate, _WebAssembly_ and _native_.\n\n*   The _native executor_ uses a natively compiled runtime embedded in the [node](/reference/glossary/#node)\n     to execute calls. This is a performance optimization that up-to-date nodes can take advantage of.\n*   The _WebAssembly executor_ uses a [Wasm](/reference/glossary/#webassembly-wasm)\n     binary and a Wasm interpreter to execute calls. The binary is guaranteed to be up-to-date regardless of the version of the blockchain [node](/reference/glossary/#node)\n     because it is persisted in the [state](/reference/glossary/#state)\n     of the Substrate-based chain.\n\n[](/reference/glossary/#extrinsic)\nextrinsic\n--------------------------------------------\n\nData that is external to the blockchain and included in a [block](/reference/glossary/#block)\n. Typical Substrate chains have extrinsics which contain a [`Call`](/reference/glossary/#call)\n value. In general, there are two types of extrinsics:\n\n*   signed or unsigned [transactions](/reference/glossary/#transaction)\n    .\n*   inherent data that is inserted by a [block author](/reference/glossary/#author)\n    .\n\n[](/reference/glossary/#existential-deposit)\nexistential deposit\n----------------------------------------------------------------\n\nThe minimum balance an account is allowed to have in the [Balances pallet](/reference/frame-pallets/#balances)\n. Accounts cannot be created with a balance less than the existential deposit amount. If an account balance drops below this amount, the Balances pallet uses [a FRAME System API](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.dec_ref)\n to drop its references to that account. If all of the references to an account are dropped, the account can be [reaped](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.allow_death)\n.\n\n[](/reference/glossary/#finality)\nfinality\n------------------------------------------\n\nThe part of [consensus](/reference/glossary/#consensus)\n that makes the ongoing progress of the blockchain irreversible. After a [block](/reference/glossary/#block)\n is finalized, all of the [state](/reference/glossary/#state)\n changes it encapsulates are irreversible without a hard fork. The consensus algorithm _must_ guarantee that finalized blocks never need reverting. However, different consensus algorithms can define different finalization methods.\n\nIn a consensus protocol that uses **deterministic finality**, each block is guaranteed to be the canonical block for that chain when the block is included. Deterministic finality is desirable in situations where the full chain is not available, such as in the case of [light clients](/reference/glossary/#light-client)\n. [GRANDPA](/reference/glossary/#grandpa)\n is the deterministic finality protocol that is used by the [Polkadot Network](/reference/glossary/#polkadot-network)\n.\n\nIn a consensus protocol that uses **probabilistic finality**, finality is expressed in terms of a probability, denoted by `p`, that a proposed block, denoted by `B`, will remain in the canonical chain. As more blocks are produced on top of `B`, `p` approaches 1.\n\nIn a consensus protocol that uses **instant finality**, finality is guaranteed immediately upon block production. This type of non-probabilistic consensus tends to use [practical byzantine fault tolerance (pBFT)](/reference/glossary/#practical-byzantine-fault-tolerance-pbft)\n and have expensive communication requirements.\n\n[](/reference/glossary/#fork)\nfork\n----------------------------------\n\nIndicates that there are divergent paths a blockchain might take. If two or more [blocks](/reference/glossary/#block)\n have the same parent but different state, the blockchain cannot continue to progress until the differences are resolved. An unresolved fork would split the blockchain into two separate chains. By resolving divergent forks, you can ensure that only one canonical chain exists.\n\n[](/reference/glossary/#flaming-fir)\nFlaming Fir\n------------------------------------------------\n\nA Substrate-based [blockchain](/reference/glossary/#blockchain)\n test network that exists for developing and testing the Substrate blockchain development framework. For more information about accessing Substrate networks and flaming fir, see the [Polkadot wiki](https://wiki.polkadot.network/docs/maintain-networks#flaming-fir)\n.\n\n[](/reference/glossary/#frame)\nFRAME\n------------------------------------\n\nAn acronym for the _Framework for Runtime Aggregation of Modularized Entities_ that enables developers to create blockchain [runtime](/reference/glossary/#runtime)\n environments from a modular set of components called [pallets](/reference/glossary/#pallet)\n.\n\nRuntime developers interact with FRAME using [macros](/reference/glossary/#macro)\n such as the following:\n\n*   `#[pallet::event]`\n*   `#[pallet::error]`\n*   `#[pallet::storage]`\n*   `#[frame_support::pallet]`\n\nThe macros make it easy to define custom pallets and compose pallets to create a working runtime using the [`construct_runtime!`](/reference/frame-macros/#construct_runtime)\n macro to deploy a Substrate-based blockchain.\n\nThe convention used in [the Substrate codebase](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame)\n is to preface core FRAME modules with `frame_` and the optional pallets with `pallet_*`. For example, the preceding macros are all defined in the [`frame_support`](/reference/frame-pallets/#support-library)\n module and all FRAME-based runtimes _must_ include the [`frame_system`](/reference/frame-pallets/#system-library)\n module. After the `frame_support::construct_runtime` macro has been used to create a runtime that includes the `frame_system` module, optional pallets such as the [Balances](/reference/frame-pallets/#balances)\n pallet can be used to extend the core capabilities of the runtime.\n\n[](/reference/glossary/#full-node)\nfull node\n--------------------------------------------\n\nA [node](/reference/glossary/#node)\n that is able to synchronize a blockchain in a secure manner through execution and verification of all logic. Full nodes stand in contrast to [light clients](/reference/glossary/#light-client)\n.\n\n[](/reference/glossary/#genesis-configuration)\ngenesis configuration\n--------------------------------------------------------------------\n\nA mechanism for specifying the initial [state](/reference/glossary/#state)\n of a [blockchain](/reference/glossary/#blockchain)\n. By convention, this initial state or first block is commonly referred to as the genesis state or genesis block. The genesis configuration for Substrate-based chains is accomplished by way of a [chain specification](/build/chain-spec/)\n file. The chain specification file makes it easy to use a single Substrate codebase as the foundation for multiple independently-configured chains.\n\n[](/reference/glossary/#grandpa)\nGRANDPA\n----------------------------------------\n\nA [deterministic finality](/reference/glossary/#deterministic-finality)\n mechanism for [blockchains](/reference/glossary/#blockchain)\n that is implemented in the [Rust](https://www.rust-lang.org/)\n programming language. The [formal specification](https://github.com/w3f/consensus/blob/master/pdf/grandpa-old.pdf)\n is maintained by the [Web3 Foundation](https://web3.foundation/)\n.\n\n[](/reference/glossary/#header)\nheader\n--------------------------------------\n\nThe structure that aggregates the information used to summarize a [block](/reference/glossary/#block)\n. A header consists primarily of [cryptographic](/reference/glossary/#cryptographic-primitives)\n information that is used by [light clients](/reference/glossary/#light-client)\n to get a minimally-secure but very efficient synchronization of the chain.\n\n[](/reference/glossary/#hybrid-consensus)\nhybrid consensus\n----------------------------------------------------------\n\nA blockchain consensus protocol that consists of independent or loosely-coupled mechanisms for [block production](/reference/glossary/#author)\n and [finality](/reference/glossary/#finality)\n. Hybrid consensus allows the chain to grow as fast as probabilistic consensus protocols, such as [Aura](/reference/glossary/#aura-aka-authority-round)\n, while maintaining the same level of security as [deterministic finality](/reference/glossary/#deterministic-finality)\n consensus protocols, such as [GRANDPA](/reference/glossary/#grandpa)\n. In general, block production algorithms tend to be faster than finality mechanisms. Making block production separate from block finalization gives Substrate developers greater control of their chain's performance.\n\n[](/reference/glossary/#inherent-transactions)\ninherent transactions\n--------------------------------------------------------------------\n\nInherent transactions\u2014sometimes referred to as inherents\u2014are a special type of unsigned transaction. This type of transaction enables a block authoring node to insert information that doesn't require validation directly to a block. Only the block authoring node that calls the inherent transaction function can insert data into its block. In general, validators assume the data inserted using an inherent transaction is valid and reasonable even if it can't be deterministically verified.\n\n[](/reference/glossary/#json-rpc)\nJSON-RPC\n------------------------------------------\n\nA stateless, lightweight remote procedure call protocol that is encoded in JSON. JSON-RPC provides a standard way to call functions on a remote system by using JavaScript Object Notation. For Substrate, this protocol is implemented thrinough the [Parity JSON-RPC](https://github.com/paritytech/jsonrpc)\n crate.\n\n[](/reference/glossary/#keystore)\nkeystore\n------------------------------------------\n\nA subsystem in Substrate for managing keys for the purpose of producing new blocks.\n\n[](/reference/glossary/#kusama)\nKusama\n--------------------------------------\n\n[Kusama](https://kusama.network/)\n is a Substrate-based [blockchain](/reference/glossary/#blockchain)\n that implements a design similar to the [Polkadot network](/reference/glossary/#polkadot-network)\n. Kusama is a [canary](https://en.wiktionary.org/wiki/canary_in_a_coal_mine)\n network and is referred to as [Polkadot's \"wild cousin\"](https://polkadot.network/kusama-polkadot-comparing-the-cousins/)\n. As a canary network, Kusama is expected to be more stable than a test network like [Westend](/reference/glossary/#westend)\n, but not as stable as a production network like [Polkadot](/reference/glossary/#polkadot)\n.\n\nAs a canary network, Kusama is [controlled by its network participants](/reference/frame-pallets/#democracy)\n and is intended to be stable enough to encourage meaningful experimentation.\n\n[](/reference/glossary/#libp2p)\nlibp2p\n--------------------------------------\n\nA peer-to-peer networking stack that allows use of many transport mechanisms, including WebSockets (usable in a web browser). Substrate uses the [Rust implementation](https://github.com/libp2p/rust-libp2p)\n of the `libp2p` networking stack.\n\n[](/reference/glossary/#light-client)\nlight client\n--------------------------------------------------\n\nA type of blockchain [node](/reference/glossary/#node)\n that does not store the [chain state](/reference/glossary/#state)\n or produce blocks. A light client is capable of verifying [cryptographic primitives](/reference/glossary/#cryptographic-primitives)\n and exposes a [remote procedure call (RPC)](https://en.wikipedia.org/wiki/Remote_procedure_call)\n server that allows blockchain users to interact with the blockchain network.\n\n[](/reference/glossary/#macro)\nmacro\n------------------------------------\n\nA programming language feature that enables developers to write a sequence of instructions that can be named and executed together. The [FRAME](/reference/glossary/#frame)\n development environment provides several [macros](/reference/frame-macros/)\n for [Rust](https://doc.rust-lang.org/1.7.0/book/macros.html)\n that you can use to compose a [runtime](/reference/glossary/#runtime)\n.\n\n[](/reference/glossary/#metadata)\nmetadata\n------------------------------------------\n\nData that provides information about one or more aspects of a system. The metadata that exposes information about a Substrate [blockchain](/reference/glossary/#blockchain)\n enables you to interact with that system.\n\n[](/reference/glossary/#node)\nnode\n----------------------------------\n\nA running instance of a blockchain client. Each node is part of the [peer-to-peer](https://en.wikipedia.org/wiki/Peer-to-peer)\n network that allows blockchain participants to interact with one another. Substrate nodes can fill a number of roles in a blockchain network. For example, the nodes that produce blocks fulfill the [validator](/reference/glossary/#validator)\n role for the blockchain. Nodes that run [light-clients](/reference/glossary/#light-client)\n facilitate scalable interactions in resource-constrained environments like [user interfaces](https://github.com/paritytech/substrate-connect)\n or embedded devices.\n\n[](/reference/glossary/#nominated-proof-of-stake-npos)\nnominated proof-of-stake (NPoS)\n--------------------------------------------------------------------------------------\n\nA method for determining [validators](/reference/glossary/#validator)\n or _[authorities](/reference/glossary/#authority)\n_ based on a willingness to commit their stake to the proper functioning of one or more block producing nodes.\n\n[](/reference/glossary/#oracle)\noracle\n--------------------------------------\n\nIn a blockchain network, an oracle is a mechanism for connecting the blockchain to a non-blockchain data source. Oracles enable the blockchain to access and act upon information from existing data sources and incorporate data from non-blockchain systems and services.\n\n[](/reference/glossary/#origin)\norigin\n--------------------------------------\n\nA [FRAME](/reference/glossary/#frame)\n primitive that identifies the source of a [dispatched](/reference/glossary/#dispatch)\n function call into the [runtime](/reference/glossary/#runtime)\n. The FRAME `system` module defines three built-in [origins](/build/origins/#raw-origins)\n. As a [pallet](/reference/glossary/#pallet)\n developer, you can also define custom origins, such as those defined by the [Collective pallet](https://paritytech.github.io/substrate/master/pallet_collective/enum.RawOrigin.html)\n.\n\n[](/reference/glossary/#pallet)\npallet\n--------------------------------------\n\nA module that can be used to extend the capabilities of a [FRAME](/reference/glossary/#frame)\n\\-based [runtime](/reference/glossary/#runtime)\n. Pallets bundle domain-specific logic with runtime primitives like [events](/reference/glossary/#event)\n, and [storage items](/reference/glossary/#storage-items)\n.\n\n[](/reference/glossary/#parachain)\nparachain\n--------------------------------------------\n\nA parachain is a [blockchain](/reference/glossary/#blockchain)\n that derives shared infrastructure and security from a _[relay chain](/reference/glossary/#relay-chain)\n_. You can learn more about parachains on the [Polkadot Wiki](https://wiki.polkadot.network/docs/en/learn-parachains)\n.\n\n[](/reference/glossary/#polkadot-network)\nPolkadot network\n----------------------------------------------------------\n\nThe [Polkadot network](https://polkadot.network/)\n is a [blockchain](/reference/glossary/#blockchain)\n that serves as the central hub of a heterogeneous blockchain network. It serves the role of the [relay chain](/reference/glossary/#relay-chain)\n and supports other chains\u2014the [parachains](/reference/glossary/#parachain)\n\u2014by providing shared infrastructure and security.\n\n[](/reference/glossary/#proof-of-finality)\nproof-of-finality\n------------------------------------------------------------\n\nData that can be used to prove that a particular block is finalized.\n\n[](/reference/glossary/#proof-of-work)\nproof-of-work\n----------------------------------------------------\n\nA [consensus](/reference/glossary/#consensus)\n mechanism that deters attacks by requiring work on the part of network participants. For example, some proof-of-work systems require participants to use the [Ethash](/reference/glossary/#ethash)\n function to calculate a hash as a proof of completed work.\n\n[](/reference/glossary/#relay-chain)\nrelay chain\n------------------------------------------------\n\nThe central hub in a heterogenous network of multiple blockchains. Relay chains are [blockchains](/reference/glossary/#blockchain)\n that provide shared infrastructure and security to the other blockchains\u2014the [parachains](/reference/glossary/#parachain)\n\u2014in the network. In addition to providing [consensus](/reference/glossary/#consensus)\n capabilities, relay chains also allow parachains to communicate and exchange digital assets without needing to trust one another.\n\n[](/reference/glossary/#remote-procedure-call-rpc)\nremote procedure call (RPC)\n------------------------------------------------------------------------------\n\nA mechanism for interacting with a computer program. Remote procedure calls enable developers to query the remote computer programs or invoke program logic with parameters they supply. Substrate nodes expose an RPC server on HTTP and WebSocket endpoints.\n\n[](/reference/glossary/#rhododendron)\nrhododendron\n--------------------------------------------------\n\nAn [instant finality](/reference/glossary/#instant-finality)\n, [byzantine fault tolerant (BFT)](/reference/glossary/#byzantine-fault-tolerance-bft)\n [consensus](/reference/glossary/#consensus)\n algorithm. One of a number of adaptions of [pBFT](/reference/glossary/#practical-byzantine-fault-tolerance-pbft)\n for blockchains. Refer to its [implementation on GitHub](https://github.com/paritytech/rhododendron)\n.\n\n[](/reference/glossary/#rococo)\nrococo\n--------------------------------------\n\nA [parachain](/reference/glossary/#parachain)\n test network for the Polkadot network. The Rococco network is a Substrate-based [blockchain](/reference/glossary/#blockchain)\n that is an evolving testbed for the capabilities of heterogeneous blockchain networks.\n\n[](/reference/glossary/#runtime)\nruntime\n----------------------------------------\n\nThe block execution logic of a blockchain. The runtime provides the [state transition function](/reference/glossary/#state-transition-function-stf)\n for a node. In Substrate, the runtime is stored as a [WebAssembly](/reference/glossary/#webassembly-wasm)\n binary in the [chain state](/reference/glossary/#state)\n.\n\n[](/reference/glossary/#slot)\nslot\n----------------------------------\n\nA fixed, equal interval of time used by consensus engines such as [Aura](/reference/glossary/#aura-aka-authority-round)\n and [BABE](/reference/glossary/#blind-assignment-of-blockchain-extension-babe)\n. In each slot, a subset of [authorities](/reference/glossary/#authority)\n is permitted\u2014or obliged\u2014to [author](/reference/glossary/#author)\n a [block](/reference/glossary/#block)\n.\n\n[](/reference/glossary/#sovereign-account)\nsovereign account\n------------------------------------------------------------\n\nThe unique account identifier for each chain in the relay chain ecosystem. The sovereign account for each chain is a root-level that can only be accessed using the Sudo pallet or through governance. The account identifier is calculated by concatenating the Blake2 hash of a specific text string and the registered parachain identifier.\n\nFor the relay chain, the parachain account identifier is calculated as the concatenation of (blake2(para+ParachainID) with the hash truncated to the correct length. For example, the account identifier for the parachain with the parachain identifier of 1012 on the relay chain is: String to hex para: 0x70617261 Encoded parachain identifier 1012: f4030000\n\n0x70617261f4030000000000000000000000000000000000000000000000000000 ccount address: 5Ec4AhPc9b6e965pNRSsn8tjTzuKaKambivxcL7Gz9Gne9YB\n\nFor other parachains, the parachain account identifier is calculated as the concatenation of (blake2(sibl+ParachainID) with the hash truncated to the correct length. For example, the account identifier for the parachain with the parachain identifier of 1012 on the relay chain is: String to hex sibl: 0x7369626c Encoded parachain identifier 1012: f4030000\n\n0x7369626cf4030000000000000000000000000000000000000000000000000000 Account address: 5Eg2fntREKHYGgoxvRPxtnEYiUadHjdsfNaPsHdmrsJMVugs\n\nThe sovereign account is most often used to sign XCM messages that are sent to either the relay chain or other chains in the ecosystem.\n\n[](/reference/glossary/#ss58-address-format)\nSS58 address format\n----------------------------------------------------------------\n\nThe SS58 address format is a public key address based on the Bitcoin [`Base-58-check`](https://en.bitcoin.it/wiki/Base58Check_encoding)\n encoding. Each Substrate SS58 address uses a `base-58` encoded value to identify a specific account on a specific Substrate-based chain. These are represented by a `base-58` encoded value to identify a specific account on a specific Substrate chain. The [canonical `ss58-registry`](https://github.com/paritytech/ss58-registry)\n provide additional details about the address format used by different Substrate-based chains, including the network prefix and website used for different networks.\n\n[](/reference/glossary/#stake-weighted-voting)\nstake-weighted voting\n--------------------------------------------------------------------\n\nA democratic voting system that uses a one-vote-per-token method for tallying votes rather than a one-vote-per-head method.\n\n[](/reference/glossary/#state)\nstate\n------------------------------------\n\nCryptographically-secure data that persists between blocks and can be used to create new blocks as part of the state transition function. In Substrate-based blockchains, state is stored in a [trie](/reference/glossary/#trie-patricia-merkle-tree)\n data structure that supports the efficient creation of incremental digests. This trie is exposed to the [runtime](/reference/glossary/#runtime)\n as [a simple key/value map](/learn/state-transitions-and-storage/)\n where both keys and values can be arbitrary byte arrays.\n\n[](/reference/glossary/#state-transition-function-stf)\nstate transition function (STF)\n--------------------------------------------------------------------------------------\n\nThe logic of a [blockchain](/reference/glossary/#blockchain)\n that determines how the state changes when a [block](/reference/glossary/#block)\n is processed. In Substrate, the state transition function is effectively equivalent to the [runtime](/reference/glossary/#runtime)\n.\n\n[](/reference/glossary/#storage-item)\nstorage item\n--------------------------------------------------\n\n[FRAME](/reference/glossary/#frame)\n primitives that provide type-safe data persistence capabilities to the [runtime](/reference/glossary/#runtime)\n. Learn more about storage items in this article about [runtime storage](/build/runtime-storage/)\n.\n\n[](/reference/glossary/#substrate)\nSubstrate\n--------------------------------------------\n\nA flexible framework for building modular, efficient, and upgradeable [blockchains](/reference/glossary/#blockchain)\n. Substrate is written in the [Rust](https://www.rust-lang.org/)\n programming language and is maintained by [Parity Technologies](https://www.parity.io/)\n.\n\n[](/reference/glossary/#transaction)\ntransaction\n------------------------------------------------\n\nA type of [extrinsic](/reference/glossary/#extrinsic)\n that includes a [signature](/learn/transaction-types/)\n that can be used to verify the account authorizing it inherently or via [signed extensions](/reference/transaction-format/#signed-extension)\n.\n\n[](/reference/glossary/#transaction-era)\ntransaction era\n--------------------------------------------------------\n\nA definable period\u2014expressed as a range of [block](/reference/glossary/#block)\n numbers\u2014during which a transaction can be included in a block. Transaction eras are used to protect against transaction replay attacks in the event that an account is reaped and its replay-protecting nonce is reset to zero.\n\n[](/reference/glossary/#transaction-pool)\ntransaction pool\n----------------------------------------------------------\n\nA collection of transactions that are not yet included in [blocks](/reference/glossary/#block)\n but have been determined to be valid.\n\nA _tagged transaction pool_ is a transaction pool implementation that allows the [runtime](/reference/glossary/#runtime)\n to specify whether a given transaction is valid, how it should be prioritized, and how it relates to other transactions in the pool in terms of dependency and mutual-exclusivity. The tagged transaction pool implementation is designed to be extensible and general enough to express both [unspent transaction output (UTXO)](https://github.com/danforbes/danforbes/blob/master/writings/utxo.md)\n and account-based transaction models.\n\n[](/reference/glossary/#trie-patricia-merkle-tree)\ntrie (Patricia Merkle Tree)\n------------------------------------------------------------------------------\n\nA data structure that is used to represent sets of key-value pairs.\n\nThe Patricia Merkle trie data structure enables the items in the data set to be stored and retrieved using a cryptographic hash. Because incremental changes to the data set result in a new hash, retrieving data is efficient even if the data set is very large. With this data structure, you can also prove whether the data set includes any particular key-value pair without the access to the entire data set.\n\n[](/reference/glossary/#validator)\nvalidator\n--------------------------------------------\n\nA semi-trusted\u2014or untrusted but well-incentivized\u2014actor that helps maintain a [blockchain](/reference/glossary/#blockchain)\n network. In Substrate, validators broadly correspond to the [authorities](/reference/glossary/#authority)\n running the [consensus](/reference/glossary/#consensus)\n system. In [Polkadot](/reference/glossary/#polkadot-network)\n, validators also manage other duties such as guaranteeing data availability and validating [parachain](/reference/glossary/#parachain)\n candidate [blocks](/reference/glossary/#block)\n.\n\n[](/reference/glossary/#webassembly-wasm)\nWebAssembly (Wasm)\n------------------------------------------------------------\n\nAn execution architecture that allows for the efficient, platform-neutral expression of deterministic, machine-executable logic. [WebAssembly](https://webassembly.org/)\n can be compiled from many languages, including the [Rust](http://rust-lang.org/)\n programming language. Substrate-based chains use a WebAssembly binary to provide portable [runtimes](/reference/glossary/#runtime)\n that can be included as part of the chain's [state](/reference/glossary/#state)\n.\n\n[](/reference/glossary/#weight)\nweight\n--------------------------------------\n\nA convention used in Substrate-based blockchains to measure and manage the time it takes to validate a block. Substrate defines one unit of weight as one picosecond of execution time on reference hardware.\n\nThe maximum block weight should be equivalent to one-third of the target block time with an allocation of:\n\n*   One third for block construction\n*   One third for network propagation\n*   One third for import and verification\n\nBy defining weights, you can make trade-off decisions between the number of transactions per second and the hardware required to maintain the target block time as appropriate for your use case. Because weights are defined in the runtime, you can tune them using runtime updates to keep up with hardware and software improvements.\n\n[](/reference/glossary/#westend)\nWestend\n----------------------------------------\n\nWestend is a Parity-maintained, Substrate-based [blockchain](/reference/glossary/#blockchain)\n that serves as a test network for the [Polkadot network](/reference/glossary/#polkadot-network)\n.\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/reference/rust-api/)\n[Next \u2192](/reference/command-line-tools/)\n\nON THIS PAGE\n\n[adaptive quorum biasing (AQB)](#adaptive-quorum-biasing-aqb)\n[aggregation](#aggregation)\n[approval voting](#approval-voting)\n[author](#author)\n[authority](#authority)\n[authority round (Aura)](#authority-round-aura)\n[blind assignment of blockchain extension (BABE)](#blind-assignment-of-blockchain-extension-babe)\n[block](#block)\n[block height](#block-height)\n[block number](#block-number)\n[blockchain](#blockchain)\n[byzantine fault tolerance (BFT)](#byzantine-fault-tolerance-bft)\n[call](#call)\n[collator](#collator)\n[consensus](#consensus)\n[consensus algorithm](#consensus-algorithm)\n[cryptographic primitives](#cryptographic-primitives)\n[council](#council)\n[database backend](#database-backend)\n[dev phrase](#dev-phrase)\n[digest](#digest)\n[dispatch](#dispatch)\n[equivocating](#equivocating)\n[ethash](#ethash)\n[events](#events)\n[executor](#executor)\n[extrinsic](#extrinsic)\n[existential deposit](#existential-deposit)\n[finality](#finality)\n[fork](#fork)\n[Flaming Fir](#flaming-fir)\n[FRAME](#frame)\n[full node](#full-node)\n[genesis configuration](#genesis-configuration)\n[GRANDPA](#grandpa)\n[header](#header)\n[hybrid consensus](#hybrid-consensus)\n[inherent transactions](#inherent-transactions)\n[JSON-RPC](#json-rpc)\n[keystore](#keystore)\n[Kusama](#kusama)\n[libp2p](#libp2p)\n[light client](#light-client)\n[macro](#macro)\n[metadata](#metadata)\n[node](#node)\n[nominated proof-of-stake (NPoS)](#nominated-proof-of-stake-npos)\n[oracle](#oracle)\n[origin](#origin)\n[pallet](#pallet)\n[parachain](#parachain)\n[Polkadot network](#polkadot-network)\n[proof-of-finality](#proof-of-finality)\n[proof-of-work](#proof-of-work)\n[relay chain](#relay-chain)\n[remote procedure call (RPC)](#remote-procedure-call-rpc)\n[rhododendron](#rhododendron)\n[rococo](#rococo)\n[runtime](#runtime)\n[slot](#slot)\n[sovereign account](#sovereign-account)\n[SS58 address format](#ss58-address-format)\n[stake-weighted voting](#stake-weighted-voting)\n[state](#state)\n[state transition function (STF)](#state-transition-function-stf)\n[storage item](#storage-item)\n[Substrate](#substrate)\n[transaction](#transaction)\n[transaction era](#transaction-era)\n[transaction pool](#transaction-pool)\n[trie (Patricia Merkle Tree)](#trie-patricia-merkle-tree)\n[validator](#validator)\n[WebAssembly (Wasm)](#webassembly-wasm)\n[weight](#weight)\n[Westend](#westend)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/runtime-apis/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nRuntime apis\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/runtime-apis.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRuntime APIs\n============\n\nAs discussed in [Architecture](/learn/architecture/)\n, Substrate nodes consist of outer node services and a runtime and this separation of responsibilities is an important concept for designing Substrate-based chains and building upgradeable logic. However, the outer node services and the runtime must communicate with each other to complete many critical operations, including reading and writing data and performing state transitions. The outer node services communicate with the runtime by calling runtime application programming interfaces to perform specific tasks. By default, the Substrate runtime provides the following traits for outer node services to call:\n\n*   [`AccountNonceApi`](https://paritytech.github.io/substrate/master/frame_system_rpc_runtime_api/trait.AccountNonceApi.html)\n    \n*   [`AuraApi`](https://paritytech.github.io/substrate/master/sp_consensus_aura/trait.AuraApi.html)\n    \n*   [`Benchmark`](https://paritytech.github.io/substrate/master/frame_benchmarking/trait.Benchmark.html)\n    \n*   [`BlockBuilder`](https://paritytech.github.io/substrate/master/sp_block_builder/trait.BlockBuilder.html)\n    \n*   [`GrandpaApi`](https://paritytech.github.io/substrate/master/sp_consensus_grandpa/trait.GrandpaApi.html)\n    \n*   [`NominationPoolsApi`](https://paritytech.github.io/substrate/master/pallet_nomination_pools_runtime_api/trait.NominationPoolsApi.html)\n    \n*   [`OffchainWorkerApi`](https://paritytech.github.io/substrate/master/sp_offchain/trait.OffchainWorkerApi.html)\n    \n*   [`SessionKeys`](https://paritytech.github.io/substrate/master/sp_session/trait.SessionKeys.html)\n    \n*   [`TaggedTransactionQueue`](https://paritytech.github.io/substrate/master/sp_transaction_pool/runtime_api/trait.TaggedTransactionQueue.html)\n    \n*   [`TransactionPaymentApi`](https://paritytech.github.io/substrate/master/pallet_transaction_payment_rpc_runtime_api/trait.TransactionPaymentApi.html)\n    \n\n[](/reference/runtime-apis/#accountnonceapi)\nAccountNonceApi\n------------------------------------------------------------\n\nUse the `AccountNonceApi` to get the nonce for a specified account identifier. The nonce for each account is incremented each time that account is used to complete a transaction. Therefore, the nonce is also sometimes referred to as a transaction index.\n\nThis API provides the following methods:\n\n*   `account_nonce` to get the current account nonce for a specified AccountId.\n*   `account_nonce_with_context` to get the current account nonce for a specified AccountId and execution context.\n\n[](/reference/runtime-apis/#auraapi)\nAuraApi\n--------------------------------------------\n\nUse the `AuraApi` to manage block authoring with the slot-based consensus that uses a round-robin rotation of authorities. Although most consensus-related tasks are handled by outer node services, the runtime must provide this API for consensus-related tasks that are part of the state transition logic.\n\nThis API provides the following methods for authority-based round-robin scheduling ([Aura](/reference/glossary/#aura)\n):\n\n*   `slot_duration` to get the slot duration for Aura consensus.\n*   `slot_duration_with_context` to get the slot duration for Aura consensus within a specified execution context.\n*   `authorities` to get the authorities set for Aura consensus.\n*   `authorities_with_context` to get the authorities set for Aura consensus within a specified execution context.\n\n[](/reference/runtime-apis/#benchmark)\nBenchmark\n------------------------------------------------\n\nUse the `Benchmark` API to provide the information required for [benchmarking](/test/benchmark/)\n function execution in a FRAME runtime.\n\nThis API provides the following methods:\n\n*   `benchmark_metadata` to get the benchmark metadata available for this runtime.\n*   `benchmark_metadata_with_context` to get the benchmark metadata available for this runtime within a specified execution context.\n*   `dispatch_benchmark` to dispatch the specified benchmark.\n*   `dispatch_benchmark_with_context` to dispatch the specified benchmark within a specified execution context.\n\n[](/reference/runtime-apis/#blockbuilder)\nBlockBuilder\n------------------------------------------------------\n\nUse the `BlockBuilder` API to provide the functionality required for building and finalizing a block. The runtime is responsible for checking transaction validity and executing the transactions to construct blocks. For the outer node, transactions are an opaque vector array (Vec).\n\nThis API provides the following methods:\n\n*   `apply_extrinsic` to include the specified extrinsic in the current block. The method also returns a result that indicates whether the transaction was included in the block or not.\n*   `apply_extrinsic_with_context` to include the specified extrinsic in the current block and specified execution context. The method also returns a result that indicates whether the transaction was included in the block or not.\n*   `finalize_block` to finish construction of the current block.\n*   `finalize_block_with_context` to finish construction of the current block within the specified execution context.\n*   `inherent_extrinsics` to include inherent extrinsic transactions in the current block. Inherent transaction types vary from chain to chain.\n*   `inherent_extrinsics_with_context` to include inherent extrinsic transactions in the current block and specified execution context. Inherent transaction types vary from chain to chain.\n*   `check_inherents` to check that the inherent transactions are valid.\n*   `check_inherents_with_context` to check that the inherent transactions are valid within the specified execution contex.\n\n[](/reference/runtime-apis/#grandpaapi)\nGrandpaApi\n--------------------------------------------------\n\nUse the `GrandpaApi` to integrate authority-set changes from the GRANDPA finalization protocol into the runtime. The GRANDPA finalization protocol signals changes to the authority sets by specifying a delay of some number of blocks. The changes ar then automatically applied in the runtime after the specified number of blocks have been finalized.\n\nThis API provides the following methods:\n\n*   `grandpa_authorities` to get the current authorities and weights for GRANDPA finalization.\n*   `grandpa_authorities_with_context` to get the current authorities and weights for GRANDPA finalization in the specified execution context.\n*   `current_set_id` to get the current GRANDPA authority set identifier.\n*   `current_set_id_with_context` to get the current GRANDPA authority set identifier in the specified execution context.\n\nThe `GrandpaApi` also provides methods for submitting transactions to report evidence of misbehavior and related proof of key ownership. For information about these methods, see [`GrandpaApi`](https://paritytech.github.io/substrate/master/sp_consensus_grandpa/trait.GrandpaApi.html)\n.\n\n[](/reference/runtime-apis/#nominationpoolsapi)\nNominationPoolsApi\n------------------------------------------------------------------\n\nUse the `NominationPoolsApi` to get information about about nomination pools and nomination pool members.\n\nThis API provides the following methods:\n\n*   `pending_rewards` to get the pending rewards for the nomination pool member with the specified AccountId.\n*   `pending_rewards_with_context` to get the pending rewards for the nomination pool member with the specified AccountId within the specified execution context.\n\n[](/reference/runtime-apis/#offchainworkerapi)\nOffchainWorkerApi\n----------------------------------------------------------------\n\nUse the `OffchainWorkerApi` to start [offchain worker operations](/learn/offchain-operations/)\n.\n\nThis API provides the following methods:\n\n*   `offchain_worker` to start the off-chain task for a specified block header.\n*   `offchain_worker_with_context` to start the off-chain task for a specified block header and execution context.\n\n[](/reference/runtime-apis/#sessionkeys)\nSessionKeys\n----------------------------------------------------\n\nUse the `SessionKeys` API to generate and decode [session keys](/learn/accounts-addresses-keys/)\n ([https://paritytech.github.io/substrate/master/sp\\_session/trait.SessionKeys.html](https://paritytech.github.io/substrate/master/sp_session/trait.SessionKeys.html)\n)\n\nThis API provides the following methods:\n\n*   `generate_session_keys` to generate a set of session keys. If you generate the keys using a specified seed, the seed must to be a valid `utf8` string. You should store the generated keys in the keystore exposed by the runtime externalities. The method returns the public keys as concatenated SCALE-encoded values.\n*   `generate_session_keys_with_context` to generate a set of session keys within the specified execution context. If you generate the keys using a specified seed, the seed must to be a valid `utf8` string. You should store the generated keys in the keystore exposed by the runtime externalities. The method returns the public keys as concatenated SCALE-encoded values.\n*   `decode_session_keys` to decode the specified public session keys. The method returns the list of raw public keys and the key type.\n*   `decode_session_keys_with_context` to decode the specified public session keys within the specified execution context. The method returns the list of raw public keys and the key type.\n\n[](/reference/runtime-apis/#taggedtransactionqueue)\nTaggedTransactionQueue\n--------------------------------------------------------------------------\n\nUse the `TaggedTransactionQueue` API to validate transactions in the transaction queue.\n\nThis API provides the following methods:\n\n*   `validate_transaction` to verify the specified transaction is a valid transaction given the state specified by the `block_hash` parameter.\n*   `validate_transaction_with_context` to verify the specified transaction is a valid transaction given the state specified by the `block_hash` parameter within the specified execution context.\n\n[](/reference/runtime-apis/#transactionpaymentapi)\nTransactionPaymentApi\n------------------------------------------------------------------------\n\nUse the `TransactionPaymentApi` to query the runtime for information about transactions and transaction fees.\n\nThis API provides the following methods:\n\n*   `query_info` to return information about a specified transaction dispatched to the runtime.\n*   `query_info_with_context` to return information about a specified transaction dispatched to the runtime within the specified execution context.\n*   `query_fee_details` to return information about the transaction fees for a specified transaction.\n*   `query_fee_details_with_context` to return information about the transaction fees for a specified transaction within the specified execution context.\n\n[](/reference/runtime-apis/#where-to-go-next)\nWhere to go next\n--------------------------------------------------------------\n\n*   [Runtime development](/learn/runtime-development/)\n    \n*   [FRAME macros](/reference/frame-macros/)\n    \n*   [impl_runtime_apis](https://paritytech.github.io/substrate/master/sp_api/macro.impl_runtime_apis.html)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/reference/command-line-tools/tx-wrapper/)\n[Next \u2192](/reference/frame-pallets/)\n\nON THIS PAGE\n\n[AccountNonceApi](#accountnonceapi)\n[AuraApi](#auraapi)\n[Benchmark](#benchmark)\n[BlockBuilder](#blockbuilder)\n[GrandpaApi](#grandpaapi)\n[NominationPoolsApi](#nominationpoolsapi)\n[OffchainWorkerApi](#offchainworkerapi)\n[SessionKeys](#sessionkeys)\n[TaggedTransactionQueue](#taggedtransactionqueue)\n[TransactionPaymentApi](#transactionpaymentapi)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/scale-codec/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nScale codec\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/scale-codec.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nType encoding (SCALE)\n=====================\n\nSubstrate uses a lightweight and efficient encoding and decoding program to optimize how data is sent and received over the network. The program used to serialize and deserialize data is called the SCALE codec, with SCALE being an acronym for simple concatenated aggregate little-endian.\n\nThe SCALE codec is a critical component for communication between the runtime and the outer node.\n\nIt is designed for high-performance, copy-free encoding and decoding of data in resource-constrained execution environments like the Substrate [WebAssembly runtime](/learn/runtime-development/)\n.\n\nThe SCALE codec is not self-describing in any way. It assumes the decoding context has all type knowledge about the encoded data. Front-end libraries maintained by Parity use the [`parity-scale-codec`](https://github.com/paritytech/parity-scale-codec)\n crate\u2014which is a Rust implementation of the SCALE codec\u2014to encode and decode interactions between RPCs and the runtime.\n\nSCALE codec is advantageous for Substrate and blockchain systems because:\n\n*   It is lightweight relative to generic serialization frameworks like [serde](https://serde.rs/)\n    , which add significant boilerplate that can bloat the size of the binary.\n*   It does not use Rust `libstd` making it compatible with `no_std` environments that compile to Wasm, such as the Substrate runtime.\n*   It is built to have great support in Rust for deriving codec logic for new types using: `#[derive(Encode, Decode)]`.\n\nIt's important to define the encoding scheme used in Substrate rather than reuse an existing Rust codec library because this codec needs to be re-implemented on other platforms and languages that want to support interoperability among Substrate blockchains.\n\nThe following table shows how the Rust implementation of the Parity SCALE codec encodes different types.\n\n**SCALE codec examples of different types**\n\n| Type | Description | Example SCALE decoded value | SCALE encoded value |\n| --- | --- | --- | --- |\n| Fixed-width integers | Basic integers are encoded using a fixed-width little-endian (LE) format. | `signed 8-bit integer 69` | `0x45` |\n|     |     | `unsigned 16-bit integer 42` | `0x2a00` |\n|     |     | `unsigned 32-bit integer 16777215` | `0xffffff00` |\n| Compact/general integers[1](/reference/scale-codec/#fn-1) | A \"compact\" or general integer encoding is sufficient for encoding large integers (up to 2\\*\\*536) and is more efficient at encoding most values than the fixed-width version. (Though for single-byte values, the fixed-width integer is never worse.) | `unsigned integer 0` | `0x00` |\n|     |     | `unsigned integer 1` | `0x04` |\n|     |     | `unsigned integer 42` | `0xa8` |\n|     |     | `unsigned integer 69` | `0x1501` |\n|     |     | `unsigned integer 65535` | `0xfeff0300` |\n|     |     | `BigInt(100000000000000)` | `0x0b00407a10f35a` |\n| Boolean | Boolean values are encoded using the least significant bit of a single byte. | `false` | `0x00` |\n|     |     | `true` | `0x01` |\n| Results [2](/reference/scale-codec/#fn-2) | Results are commonly used enumerations which indicate whether certain operations were successful or unsuccessful. | `Ok(42)` | `0x002a` |\n|     |     | `Err(false)` | `0x0100` |\n| Options | One or zero values of a particular type. | `Some` | `0x01` followed by the encoded value |\n|     |     | `None` | `0x00` followed by the encoded value |\n| Vectors (lists, series, sets) | A collection of same-typed values is encoded, prefixed with a _compact_ encoding of the number of items, followed by each item's encoding concatenated in turn. | Vector of unsigned 16-bit integers: `[4, 8, 15, 16, 23, 42]` | `0x18040008000f00100017002a00` |\n| Strings | Strings are Vectors of bytes (`Vec<u8>`) containing a valid UTF8 sequence. |     |     |\n| Tuples | A fixed-size series of values, each with a possibly different but predetermined and fixed type. This is simply the concatenation of each encoded value. | Tuple of compact unsigned integer and boolean: `(3, false)` | `0x0c00` |\n| Structs | For structures, the values are named, but that is irrelevant for the encoding (names are ignored - only order matters). All containers store elements consecutively. The order of the elements is not fixed, depends on the container, and cannot be relied on at decoding. This implicitly means that decoding some byte-array into a specified structure that enforces an order and then re-encoding it could result in a different byte array than the original that was decoded. | A `SortedVecAsc<u8>` structure that always has byte-elements in ascending order: `SortedVecAsc::from([3, 5, 2, 8])` | `[3, 2, 5, 8]` |\n| Enumerations (tagged-unions) | A fixed number of variants, each mutually exclusive and potentially implying a further value or series of values. Encoded as the first byte identifying the index of the variant that the value is. Any further bytes are used to encode any data that the variant implies. Thus, no more than 256 variants are supported. | `Int(42)` and `Bool(true)` where `enum IntOrBool { Int(u8), Bool(bool),}` | `0x002a` and `0x0101` |\n\nSCALE Codec has been implemented in other languages, including:\n\n*   AssemblyScript: [`LimeChain/as-scale-codec`](https://github.com/LimeChain/as-scale-codec)\n    \n*   C: [`MatthewDarnell/cScale`](https://github.com/MatthewDarnell/cScale)\n    \n*   C++: [`soramitsu/scale-codec-cpp`](https://github.com/soramitsu/scale-codec-cpp)\n    \n*   JavaScript: [`polkadot-js/api`](https://github.com/polkadot-js/api)\n    \n*   Dart: [`leonardocustodio/polkadart`](https://github.com/leonardocustodio/polkadart)\n    \n*   Haskell: [`airalab/hs-web3`](https://github.com/airalab/hs-web3/tree/master/packages/scale)\n    \n*   Golang: [`itering/scale.go`](https://github.com/itering/scale.go)\n    \n*   Java: [`emeraldpay/polkaj`](https://github.com/emeraldpay/polkaj)\n    \n*   JavaScript: [`polkadot-js/api`](https://github.com/polkadot-js/api)\n    \n*   Python: [`polkascan/py-scale-codec`](https://github.com/polkascan/py-scale-codec)\n    \n*   Ruby: [`wuminzhe/scale_rb`](https://github.com/wuminzhe/scale_rb)\n    \n*   TypeScript: [`parity-scale-codec-ts`](https://github.com/paritytech/parity-scale-codec-ts)\n    , [`scale-ts`](https://github.com/unstoppablejs/unstoppablejs/tree/main/packages/scale-ts#scale-ts)\n    , [`soramitsu/scale-codec-js-library`](https://github.com/soramitsu/scale-codec-js-library)\n    , [`subsquid/scale-codec`](https://github.com/subsquid/squid-sdk/tree/master/substrate/scale-codec)\n    \n\n* * *\n\n1.  Compact/general integers are encoded with the two least significant bits denoting the mode:\n    \n    *   `0b00`: single-byte mode; upper six bits are the LE encoding of the value (valid only for values of 0-63).\n    *   `0b01`: two-byte mode: upper six bits and the following byte is the LE encoding of the value (valid only for values `64-(2**14-1)`).\n    *   `0b10`: four-byte mode: upper six bits and the following three bytes are the LE encoding of the value (valid only for values `(2**14)-(2**30-1)`).\n    *   `0b11`: Big-integer mode: The upper six bits are the number of bytes following, plus four. The value is contained, LE encoded, in the bytes following. The final (most significant) byte must be non-zero. Valid only for values `(2**30)-(2**536-1)`.\n    \n    [\u21a9](/reference/scale-codec/#fnref-1)\n    \n2.  Results are encoded as:\n    \n    *   `0x00` if the operation was successful, followed by the encoded value.\n    *   `0x01` if the operation was unsuccessful, followed by the encoded error.\n    \n    [\u21a9](/reference/scale-codec/#fnref-2)\n    \n\n**Last edit:** January 22, 2024\n\n[\u2190 Previous](/reference/account-data-structures/)\n[Next \u2192](/reference/address-formats/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/transaction-format/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nTransaction format\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/transaction-format.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTransaction formats\n===================\n\nThis article describes in detail the data structure of signed and unsigned transactions in Substrate. This is particularly useful for understanding how the transaction pool checks incoming transactions. Parachain builders will find this useful for customizing how their transactions are formatted as well as writing client applications that need to adhere to a chosen format.\n\nExtrinsics normally contain a signature, some data to describe if the extrinsic has passed some validity checks and a reference to the pallet and call that it is intended for. This format provides a way for applications to ensure the requirements for an extrinsic are met and correctly constructed.\n\n*   Unchecked: signed transactions that require some validation check before they can be accepted in the transaction pool. Any unchecked extrinsic contains the signature for the data being sent plus some extra data.\n*   Checked: inherent extrinsics which by definition don't require signature verification. Instead, they carry information on where the extrinsic comes from and some extra data.\n*   Opaque: used for cases when an extrinsic hasn't yet been committed to a format but can still be decoded.\n\nExtra data can be any additional information that would be useful to attach to a transaction or inherent. For example, the nonce of the transaction, the tip for the block author, or how long the extrinsic is valid for. This information is provided by a [specialized extensions](/reference/transaction-format/#signed-extensions)\n that help determine the validity and ordering of extrinsics before they get included in a block.\n\nA signed transaction might be constructed like so:\n\n    node_runtime::UncheckedExtrinsic::new_signed(\n    \t\tfunction.clone(),                                      // some call\n    \t\tsp_runtime::AccountId32::from(sender.public()).into(), // some sending account\n    \t\tnode_runtime::Signature::Sr25519(signature.clone()),   // the account's signature\n    \t\textra.clone(),                                         // the signed extensions\n    \t)\n\n[](/reference/transaction-format/#how-transactions-are-constructed)\nHow transactions are constructed\n----------------------------------------------------------------------------------------------------\n\nSubstrate defines its transaction formats generically to allow developers to implement custom ways to define valid transactions. In a runtime built with FRAME however (assuming transaction version 4), a transaction must be constructed by submitting the following encoded data:\n\n`<signing account ID> + <signature> + <additional data>`\n\nWhen submitting a signed transaction, the signature is constructed by signing:\n\n*   The actual call, composed of:\n    \n    *   The index of the pallet.\n    *   The index of the function call in the pallet.\n    *   The parameters required by the function call being targeted.\n*   Some extra information, verified by the signed extensions of the transaction:\n    \n    *   What's the era for this transaction, i.e. how long should this call last in the transaction pool before it gets discarded?\n    *   The nonce, i.e. how many prior transactions have occurred from this account? This helps protect against replay attacks or accidental double-submissions.\n    *   The tip amount paid to the block producer to help incentive it to include this transaction in the block.\n\nThen, some additional data that's not part of what gets signed is required, which includes:\n\n*   The spec version and the transaction version. This ensures the transaction is being submitted to a compatible runtime.\n*   The genesis hash. This ensures that the transaction is valid for the correct chain.\n*   The block hash. This corresponds to the hash of the checkpoint block, which enables the signature to verify that the transaction doesn't execute on the wrong fork, by checking against the block number provided by the era information.\n\nThe SCALE encoded data is then signed (i.e. (`call`, `extra`, `additional`)) and the signature, extra data and call data is attached in the correct order and SCALE encoded, ready to send off to a node that will verify the signed payload. If the payload to be signed is longer than 256 bytes, it is hashed just prior to being signed, to ensure that the size of the signed data does not grow beyond a certain size.\n\nThis process can be broken down into the following steps:\n\n1.  Construct the unsigned payload.\n2.  Create a signing payload.\n3.  Sign the payload.\n4.  Serialize the signed payload.\n5.  Submit the serialized transaction.\n\nAn extrinsic is encoded into the following sequence of bytes just prior to being hex encoded:\n\n`[ 1 ] + [ 2 ] + [ 3 ] + [ 4 ]`\n\nwhere:\n\n*   `[1]` contains the compact encoded length in bytes of all of the following data. Learn how compact encoding works using [SCALE](/reference/scale-codec/)\n    .\n*   `[2]` is a `u8` containing 1 byte to indicate whether the transaction is signed or unsigned (1 bit), and the encoded transaction version ID (7 bits).\n*   `[3]` if a signature is present, this field contains an account ID, an SR25519 signature and some extra data. If unsigned this field contains 0 bytes.\n*   `[4]` is the encoded call data. This comprises of 1 byte denoting the pallet to call into, 1 byte denoting the call to make in that pallet, and then as many bytes as needed to encode the arguments expected by that call.\n\nThe way applications know how to construct a transaction correctly is provided by the [metadata interface](/build/application-development/#metadata-system)\n. An application will know how to correctly encode a transaction by using the metadata types and transaction format. If a call doesn't need to be signed, then the first bit in `[2]` will be 0 and so an application will know not to try decoding a signature.\n\n**Polkadot JS Apps example:**\n\nHere we demonstrate a detailed, manual extrinsic construction and submission of a balance transfer from Bob to Dave: Bob sends `42 UNIT`s to Dave.\n\n1.  Start a [node template](https://github.com/substrate-developer-hub/substrate-node-template)\n     in `--dev` mode (see the [quick start](/quick-start/)\n     guide for how to set this up)\n2.  Navigate to [https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/extrinsics](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/extrinsics)\n    \n3.  Set `Bob` as sender and select `balances` pallet and the `transfer(dest, value)` call\n4.  Set `MultiAddress` to `Id` and the `AccountID` to `Dave` for the `dest`\n5.  Set `value` to `42000000000000` (this is `42 UNIT` as defined in the [chain spec](/build/chain-spec/)\n     of the node template)\n6.  Click `Submit Transaction` button (lower right) and **un-check** _sign and submit_ to generate a signed transaction with the default `nonce = 0` and `Lifetime = 64` for inspection\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1354.3638275499475' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Bob to Dave `transfer` 42 unit](https://docs.substrate.io/static/797f5b7390858035fd743a2a30170382/05829/apps-extrinsic-transfer-bob-to-dave-42.png)\n\n*   Encoded call data: `0x050300306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc200b00a014e33226`\n*   Encoded call hash: `0x26c333c22ec93ac431ee348168530b7d77e85d766f130af60890c0fd6ab20d5b`\n*   Resulting signed transaction call hash: `0x450284008eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48018eeaeb6a3496444c08b5c3e10e0c5f94776774591504ef4ef26e3873799831285a1a7cbd8ba2babe6fba94ea3585bf20e46c80ce7baeb25b149529ece931478c45020c00050000306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc200b00a014e33226`\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1332.492113564669' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Bob to Dave `transfer` 42 unit signed hash](https://docs.substrate.io/static/fd67f87cd9b836d094a369d7dfeee532/72c54/apps-extrinsic-transfer-bob-to-dave-42-signed-hash.png)\n\nHere you can _Copy_ the `Signed transaction` data to submit via RPC directly, or for inspection on the `Developer` -> `Extrinsics` -> `Decode` section. We will use this window now to submit the transaction and _watch_ the result.\n\n1.  Close the `authorize transaction` card\n2.  Click `Submit Transaction` button (lower right) and keep _sign and submit_ checked\n3.  Navigate to the `Developer` -> `RPC Calls` tab\n\nIn the RPC tab, you should see the result of your `author_submitAndWatchExtrinsic` call as something similar to:\n\n    {\n      dispatchInfo: {\n        weight: 159,200,000\n        class: Normal\n        paysFee: Yes\n      }\n      events: [\\\n        {\\\n          phase: {\\\n            ApplyExtrinsic: 1\\\n          }\\\n          event: {\\\n            method: Withdraw\\\n            section: balances\\\n            index: 0x0508\\\n            data: {\\\n              who: 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\\\n              amount: 125,000,147\\\n            }\\\n          }\\\n          topics: []\\\n        }\\\n        {\\\n          phase: {\\\n            ApplyExtrinsic: 1\\\n          }\\\n          event: {\\\n            method: NewAccount\\\n            section: system\\\n            index: 0x0003\\\n            data: {\\\n              account: 5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy\\\n            }\\\n          }\\\n          topics: []\\\n        }\\\n        {\\\n          phase: {\\\n            ApplyExtrinsic: 1\\\n          }\\\n          event: {\\\n            method: Endowed\\\n            section: balances\\\n            index: 0x0500\\\n            data: {\\\n              account: 5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy\\\n              freeBalance: 42,000,000,000,000\\\n            }\\\n          }\\\n          topics: []\\\n        }\\\n        {\\\n          phase: {\\\n            ApplyExtrinsic: 1\\\n          }\\\n          event: {\\\n            method: Transfer\\\n            section: balances\\\n            index: 0x0502\\\n            data: {\\\n              from: 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\\\n              to: 5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy\\\n              amount: 42,000,000,000,000\\\n            }\\\n          }\\\n          topics: []\\\n        }\\\n        {\\\n          phase: {\\\n            ApplyExtrinsic: 1\\\n          }\\\n          event: {\\\n            method: ExtrinsicSuccess\\\n            section: system\\\n            index: 0x0000\\\n            data: {\\\n              dispatchInfo: {\\\n                weight: 159,200,000\\\n                class: Normal\\\n                paysFee: Yes\\\n              }\\\n            }\\\n          }\\\n          topics: []\\\n        }\\\n      ]\n      status: {\n        InBlock: 0x501c8f15883bb2b686fb5ea1ca35e99dace8bd6216bfc571a31d7088aea000f7\n      }\n    }\n\n1.  Navigate to the `Network` -> `Explorer` tab\n2.  Open the `balances.Transfer` extrinsic details by clicking the `<block number>-<extrinsic number>` in the top right of the card\n3.  Inspect the on-chain details of your transaction\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='701' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Bob to Dave `transfer` 42 unit result](https://docs.substrate.io/static/a47448217da515aa1caf0fe6a195bbae/3af6a/apps-extrinsic-transfer-bob-to-dave-42-result.png)\n\nClick the `#/extrinsics/decode/0x....` link to open the decoded details of the above `Signed transaction` data and notice it is identical to what we submitted. Thus before or after submitting an extrinsic, this tool can be used to decode and introspect transaction call data.\n\n[](/reference/transaction-format/#signed-extensions)\nSigned extensions\n----------------------------------------------------------------------\n\nSubstrate provides the concept of **signed extensions** to extend an extrinsic with additional data, provided by the [`SignedExtension`](https://paritytech.github.io/substrate/master/sp_runtime/traits/trait.SignedExtension.html)\n trait.\n\nThe transaction queue regularly calls signed extensions to keep checking that a transaction is valid before it gets put in the ready queue. This is a useful safeguard for verifying that transactions won't fail in a block. They are commonly used to enforce validation logic to protect the transaction pool from spam and replay attacks.\n\nIn FRAME, a signed extension can hold any of the following types by default:\n\n*   `AccountId`: to encode the sender's identity.\n*   `Call`: to encode the pallet call to be dispatched. This data is used to calculate transaction fees.\n*   `AdditionalSigned`: to handle any additional data to go into the signed payload. This makes it possible to attach any custom logic prior to dispatching a transaction.\n*   `Pre`: to encode the information that can be passed from before a call is dispatch to after it gets dispatched.\n\nFRAME's [system pallet](https://paritytech.github.io/substrate/master/frame_system/)\n provides a set of [useful `SignedExtensions`](https://paritytech.github.io/substrate/master/frame_system/index.html#signed-extensions)\n out of the box.\n\n### [](/reference/transaction-format/#practical-examples)\nPractical examples\n\nAn important signed extension for validating transactions is `CheckSpecVersion`.  \nIt provides a way for the sender to provide the spec version as a signed payload attached to the transaction. Since the spec version is already known in the runtime, the signed extension can perform a simple check to verify that the spec versions match. If they don't, the transaction fail before it gets put in the transaction pool.\n\nOther examples include the signed extensions used to calculate transaction priority. These are:\n\n*   `CheckWeight`: sets the value for priority to `0` for all dispatch classes.\n*   `ChargeTransactionPayment`: calculates the overall priority, modifying the priority value accordingly.\n\nThe priority depends on the dispatch class and the amount of tip-per-weight or tip-per-length (whatever is more limiting) the sender is willing to pay. Transactions without a tip use a minimal tip value of `1` for priority calculations to make sure that not all transactions end up having a priority of `0`. The consequence of this is that _smaller_ transactions are preferred over _larger_ ones.\n\n[](/reference/transaction-format/#where-to-go-next)\nWhere to go next\n--------------------------------------------------------------------\n\nNow that you have seen how transactions are constructed, you might want to review how they progress from the transaction pool to the runtime and get added to blocks or how to use tools that enable you to submit transactions offline or using a REST API.\n\n*   [Transaction lifecycle](/learn/transaction-lifecycle/)\n    \n*   [Transactions, weights, and fees](/build/tx-weights-fees/)\n    \n*   [tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n     for offline transactions\n*   [sidecar](/reference/command-line-tools/sidecar/)\n     for REST-based transactions\n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/reference/address-formats/)\n[Next \u2192](/reference/xcm-reference/)\n\nON THIS PAGE\n\n[How transactions are constructed](#how-transactions-are-constructed)\n[Signed extensions](#signed-extensions)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/rust-api/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nRust api\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/rust-api.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nRust API\n========\n\nThe Rust documentation is the single source of truth for the Substrate code base. However, if you aren't sure what you are looking for\u2014for example, a specific crate, trait, or data structure\u2014it can be tricky to navigate or to know the best place to start.\n\nAs discussed in [Architecture and Rust libraries](/learn/architecture/)\n, Substrate libraries use a naming convention to indicate whether a library is part of the Substrate core client (`sc_*`), FRAME and the runtime (`frame_*` and `pallet_*`), or a Substrate primitive (`sp_*`).\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1145' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Core node libraries for the outer node and runtime](https://docs.substrate.io/static/dae77f7ece855ad265b5c93651f4881b/c337e/libraries.png)\n\nIf you don't have a specific crate in mind, use the following links as entry points to explore the core Rust libraries.\n\n[](/reference/rust-api/#substrate-core-client-libraries)\nSubstrate core client libraries\n----------------------------------------------------------------------------------------\n\nUse the following links to explore Substrate libraries that are part of the Substrate core client (`sc_*`).\n\n*   [`sc_authority_discovery`](https://paritytech.github.io/substrate/master/sc_authority_discovery/index.html)\n    \n*   [`sc_block_builder`](https://paritytech.github.io/substrate/master/sc_block_builder/index.html)\n    \n*   [`sc_chain_spec`](https://paritytech.github.io/substrate/master/sc_chain_spec/index.html)\n    \n*   [`sc_cli`](https://paritytech.github.io/substrate/master/sc_cli/index.html)\n    \n*   [`sc_client_api`](https://paritytech.github.io/substrate/master/sc_client_api/index.html)\n    \n*   [`sc_client_db`](https://paritytech.github.io/substrate/master/sc_client_db/index.html)\n    \n*   [`sc_consensus`](https://paritytech.github.io/substrate/master/sc_consensus/index.html)\n    \n*   [`sc_network`](https://paritytech.github.io/substrate/master/sc_network/index.html)\n    \n*   [`sc_rpc`](https://paritytech.github.io/substrate/master/sc_rpc/index.html)\n    \n*   [`sc_service`](https://paritytech.github.io/substrate/master/sc_service/index.html)\n    \n*   [`sc_state_db`](https://paritytech.github.io/substrate/master/sc_state_db/index.html)\n    \n*   [`sc_transaction_pool`](https://paritytech.github.io/substrate/master/sc_transaction_pool/index.html)\n    \n\n[](/reference/rust-api/#frame-libraries)\nFRAME libraries\n--------------------------------------------------------\n\nUse the following links to explore the core FRAME libraries that are used in the Substrate runtime (`frame_*` and `pallet_*`.\n\n*   [`frame_benchmarking`](https://paritytech.github.io/substrate/master/frame_benchmarking/index.html)\n    \n*   [`frame_executive`](https://paritytech.github.io/substrate/master/frame_executive/index.html)\n    \n*   [`frame_remote_externalities`](https://paritytech.github.io/substrate/master/frame_remote_externalities/index.html)\n    \n*   [`frame_support`](https://paritytech.github.io/substrate/master/frame_support/index.html)\n    \n*   [`frame_system`](https://paritytech.github.io/substrate/master/frame_system/index.html)\n    \n*   [`pallet_assets`](https://paritytech.github.io/substrate/master/pallet_assets/index.html)\n    \n*   [`pallet_balances`](https://paritytech.github.io/substrate/master/pallet_balances/index.html)\n    \n*   [`pallet_collective`](https://paritytech.github.io/substrate/master/pallet_collective/index.html)\n    \n*   [`pallet_identity`](https://paritytech.github.io/substrate/master/pallet_identity/index.html)\n    \n*   [`pallet_membership`](https://paritytech.github.io/substrate/master/pallet_membership/index.html)\n    \n*   [`pallet_proxy`](https://paritytech.github.io/substrate/master/pallet_proxy/index.html)\n    \n\n[](/reference/rust-api/#substrate-primitive-libraries)\nSubstrate primitive libraries\n------------------------------------------------------------------------------------\n\nUse the following links to explore Substrate primitive libraries (`sp_*`).\n\n*   [`sp_api`](https://paritytech.github.io/substrate/master/sp_api/index.html)\n    \n*   [`sp_blockchain`](https://paritytech.github.io/substrate/master/sp_blockchain/index.html)\n    \n*   [`sp_core`](https://paritytech.github.io/substrate/master/sp_core/index.html)\n    \n*   [`sp_io`](https://paritytech.github.io/substrate/master/sp_io/index.html)\n    \n*   [`sp_runtime`](https://paritytech.github.io/substrate/master/sp_runtime/index.html)\n    \n*   [`sp_state_machine`](https://paritytech.github.io/substrate/master/sp_state_machine/index.html)\n    \n*   [`sp_storage`](https://paritytech.github.io/substrate/master/sp_storage/index.html)\n    \n\n[](/reference/rust-api/#other-libraries)\nOther libraries\n--------------------------------------------------------\n\nUse the following links to explore other libraries.\n\n*   [`kitchensink_runtime`](https://paritytech.github.io/substrate/master/kitchensink_runtime)\n    \n*   [`node_primitives`](https://paritytech.github.io/substrate/master/node_primitives/index.html)\n    \n*   [`node_rpc`](https://paritytech.github.io/substrate/master/node_rpc/index.html)\n    \n*   [`node_template`](https://paritytech.github.io/substrate/master/node_template/index.html)\n    \n*   [`node_template_runtime`](https://paritytech.github.io/substrate/master/node_template_runtime/index.html)\n    \n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/reference/)\n[Next \u2192](/reference/glossary/)\n\nON THIS PAGE\n\n[Substrate core client libraries](#substrate-core-client-libraries)\n[FRAME libraries](#frame-libraries)\n[Substrate primitive libraries](#substrate-primitive-libraries)\n[Other libraries](#other-libraries)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/test/check-runtime/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Test](/test/)\nCheck runtime\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/test/check-runtime.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nCheck runtime\n=============\n\nThe `try-runtime` command-line tool enables you to query a snapshot of runtime storage using an [in-memory-externalities](https://paritytech.github.io/substrate/master/sp_state_machine/struct.TestExternalities.html)\n data structure to store state. By using the in-memory storage, you can write tests for a specified runtime state so that you can test against real chain state _before_ going to production.\n\nIn its simplest form, you can use `try-runtime` to test the runtime state by doing the following:\n\n1.  Connect to a remote node.\n2.  Call a specific runtime API.\n3.  Retrieve state from the node at a specific block.\n4.  Write tests for the data retrieved.\n\n[](/test/check-runtime/#motivation)\nMotivation\n----------------------------------------------\n\nThe initial motivation for `try-runtime` came from the need to test runtime changes against state from a real chain. Prior [`TestExternalities`](https://paritytech.github.io/substrate/master/sp_state_machine/struct.TestExternalities.html)\n and [`BasicExternalities`](https://paritytech.github.io/substrate/master/sp_state_machine/struct.BasicExternalities.html)\n existed for writing unit and integrated tests with mock data, but lacked the ability to test against a chain's actual state. The `try-runtime` tool extends `TestExternalities` and `BasicExternalities` by retrieving state using the following RPC endpoints for the node:\n\n*   `rpc_get_storage`\n*   `rpc_get_keys_paged`\n\n(see [`remote externalities lib`](https://paritytech.github.io/substrate/master/src/frame_remote_externalities/lib.rs.html)\n for more details;)\n\nAfter using the key-value database to retrieve state, try-runtime inserts the data into `TestExternalities`.\n\n[](/test/check-runtime/#how-it-works)\nHow it works\n--------------------------------------------------\n\nThe `try-runtime` tool has its own implementation of externalities called [`remote_externalities`](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/remote-externalities/src/lib.rs)\n which is just a wrapper around `TestExternalities` that uses a generic [key-value store](/learn/state-transitions-and-storage/)\n where data is [type encoded](/reference/scale-codec/)\n.\n\nThe diagram below illustrates the way externalities sits outside a compiled runtime as a means to capture the storage of that runtime.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='900' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Storage externalities](https://docs.substrate.io/static/7c4718160bcf99bb155d69f92e5d1500/9bec7/try-runtime-ext-1.png)\n\nWith `remote_externalities`, you can capture some chain state and run tests on it. Essentially, `RemoteExternalities` will populate a `TestExternalities` with a real chain's data.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='900' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Testing with externalities](https://docs.substrate.io/static/c3c33470a79c89794b5bb2d1e9dbba55/9bec7/try-runtime-ext-2.png)\n\nTo query state, `try-runtime` uses the RPC methods provided by [`StateApiClient`](https://paritytech.github.io/substrate/master/sc_rpc/state/trait.StateApiClient.html)\n. In particular:\n\n*   [`storage`](https://paritytech.github.io/substrate/master/sc_rpc/state/trait.StateApiClient.html#method.storage)\n     This method returns the storage value for the key that represents the block you specify.\n*   [`storage_key_paged`](https://paritytech.github.io/substrate/master/sc_rpc/state/trait.StateApiClient.html#method.storage_keys_paged)\n     This method returns the keys that match a prefix you specify with pagination support.\n\n[](/test/check-runtime/#usage)\nUsage\n------------------------------------\n\nThe most common use case for `try-runtime` is to help you prepare for storage migration and runtime upgrades.\n\nBecause the RPC calls that query storage are computationally expensive, there are a number of command-line options you should set for a running node before you use the `try-runtime` command. To prepare a node for `try-runtime` testing, set the following options:\n\n*   Set `--rpc-max-payload 1000` to ensure large RPC queries can work.\n*   Set `--rpc-cors all` to ensure WebSocket connections can come through.\n\nYou can combine `try-runtime` with [`fork-off-substrate`](https://github.com/maxsam4/fork-off-substrate)\n to test your chain before production. Use `try-runtime` to test your chain's migration and its pre and post states. Then, use `fork-off-substrate` if you want to check that block production continues after the migration.\n\n### [](/test/check-runtime/#runtime-upgrade-hooks)\nRuntime upgrade hooks\n\nBy default, runtime upgrade hooks\u2014which can be defined inside of the runtime or inside pallets\u2014specify what should happen when there's been a runtime upgrade. That is, the default `on_runtime_upgrade` method only describes runtime state _after_ the upgrade. However, it is possible to use methods provided by `try-runtime` to inspect and compare the runtime state _before_ and _after_ a runtime upgrade for testing purposes.\n\nIf you enable the `try-runtime` feature for the runtime, you can define `pre-upgrade` and `post-upgrade` hooks for the runtime as follows:\n\n    #[cfg(feature = \"try-runtime\")]\n    fn pre_upgrade() -> Result<Vec<u8>, &'static str> {\n    \t\tOk(Vec::new())\n    }\n    \n    #[cfg(feature = \"try-runtime\")]\n    fn post_upgrade(_state: Vec<u8>) -> Result<(), &'static str> {\n    \t\tOk(())\n    }\n\nWith these function, you can use the `pre_upgrade` hook to retrieve the runtime state and return it as a Vec result. You can the pass the Vec as input parameter to the `post_upgrade` hook.\n\n[](/test/check-runtime/#command-line-examples)\nCommand-line examples\n--------------------------------------------------------------------\n\nTo use `try-runtime` from the command line, run your node with the `--features=try-runtime` flag. For example:\n\n    cargo run --release --features=try-runtime try-runtime\n\nYou can use the following subcommands with `try-runtime`:\n\n*   `on-runtime-upgrade`: Executes `tryRuntime_on_runtime_upgrade` against the given runtime state.\n*   `offchain-worker`: Executes `offchainWorkerApi_offchain_worker` against the given runtime state.\n*   `execute-block`: Executes `core_execute_block` using the given block and the runtime state of the parent block.\n*   `follow-chain`: Follows a given chain's finalized blocks and applies to all its extrinsics. This allows the behavior of a new runtime to be inspected over a long period of time, with real transactions coming as input.\n\nTo view usage information for a specific `try-runtime` subcommand, specify the subcommand and the `--help` flag. For example, to see usage information for `try-runtime on-runtime-upgrade`, you can run the following command:\n\n    cargo run --release --features=try-runtime try-runtime on-runtime-upgrade --help\n\nFor example, you can run `try-runtime` with the `on-runtime-upgrade` subcommand for a chain running locally with a command like this:\n\n    cargo run --release --features=try-runtime try-runtime on-runtime-upgrade live ws://localhost:9944\n\nYou can use `try-runtime` to re-execute code from the `ElectionProviderMultiPhase` offchain worker on `localhost:9944` with a command like this:\n\n    cargo run -- --release \\\n       --features=try-runtime \\\n       try-runtime \\\n       --execution Wasm \\\n       --wasm-execution Compiled \\\n       offchain-worker \\\n       --header-at 0x491d09f313c707b5096650d76600f063b09835fd820e2916d3f8b0f5b45bec30 \\\n       live \\\n       -b 0x491d09f313c707b5096650d76600f063b09835fd820e2916d3f8b0f5b45bec30 \\\n       -m ElectionProviderMultiPhase \\\n       --uri wss://localhost:9944\n\nYou can run the migrations of the local runtime on the state of SomeChain with a command like this:\n\n    RUST_LOG=runtime=trace,try-runtime::cli=trace,executor=trace \\\n       cargo run try-runtime \\\n       --execution Native \\\n       --chain somechain-dev \\\n       on-runtime-upgrade \\\n       live \\\n       --uri wss://rpc.polkadot.io\n\nYou can run try-runtime against the state for a specific block number with a command like this:\n\n    RUST_LOG=runtime=trace,try-runtime::cli=trace,executor=trace \\\n       cargo run try-runtime \\\n       --execution Native \\\n       --chain dev \\\n       --no-spec-name-check \\\n       on-runtime-upgrade \\\n       live \\\n       --uri wss://rpc.polkadot.io \\\n       --at <block-hash>\n\nNotice that this command requires the `--no-spec-name-check` command-line option.\n\n[](/test/check-runtime/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------\n\n*   [Storage keys](/build/runtime-storage/#storage-value-keys)\n    \n*   [`OnRuntimeUpgrade`](https://paritytech.github.io/substrate/master/frame_support/traits/trait.OnRuntimeUpgrade.html)\n    \n*   [`try-runtime-upgrade`](https://paritytech.github.io/substrate/master/frame_executive/struct.Executive.html#method.try_runtime_upgrade)\n    \n*   [Staking pallet](https://paritytech.github.io/substrate/master/pallet_staking/index.html)\n    \n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/test/simulate-parachains/)\n[Next \u2192](/deploy/)\n\nON THIS PAGE\n\n[Motivation](#motivation)\n[How it works](#how-it-works)\n[Usage](#usage)\n[Command-line examples](#command-line-examples)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/test/benchmark/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Test](/test/)\nBenchmark\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/test/benchmark.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nBenchmark\n=========\n\nSubstrate and FRAME provide a flexible framework for developing custom logic for your blockchain. This flexibility enables you to design complex and interactive pallets and implement sophisticated runtime logic. However, determining the appropriate [weight](/reference/glossary/#weight)\n to assign to the functions in your pallets can be a difficult task. Benchmarking enables you to measure the time it takes to execute different functions in the runtime and under different conditions. If you use benchmarking to assign accurate weights to function calls, you can prevent your blockchain from being overloaded and unable to produce blocks or vulnerable to denial of service (DoS) attacks by malicious actors.\n\n[](/test/benchmark/#why-benchmark-a-pallet)\nWhy benchmark a pallet\n------------------------------------------------------------------\n\nIt is important to understand the computational resources required to execute different functions\u2014including runtime functions like `on_initialize` and `verify_unsigned`\u2014to keep the runtime safe and to enable the runtime to include or exclude transactions based on the resources available.\n\nThe ability to include or exclude transactions based on available resources ensures that the runtime can continue to produce and import blocks without service interruptions. For example, if you have a function call that requires particularly intensive computation, executing the call might exceed the maximum time allowed for producing or importing a block, disrupting the block handling process or stopping blockchain progress altogether. Benchmarking helps you validate that the execution time required for different functions is within reasonable boundaries.\n\nSimilarly, a malicious user might attempt to disrupt network service by repeatedly executing a function call that requires intensive computation or that doesn't accurately reflect the computation it requires. If the cost for executing a function call doesn't accurately reflect the computation involved, there's no incentive to deter a malicious user from attacking the network. Because benchmarking helps you evaluate the weight associated with executing transactions, it also helps you to determine appropriate transaction fees. Based on your benchmarks, you can set fees that represent the resources consumed by executing specific calls on the blockchain.\n\n[](/test/benchmark/#developing-a-linear-model)\nDeveloping a linear model\n------------------------------------------------------------------------\n\nAt a high level, benchmarking requires you to perform the following steps:\n\n*   Write custom benchmarking logic that executes a specific code path for a function.\n*   Execute the benchmark logic in the WebAssembly execution environment on a specific set of hardware and with a specific runtime configuration.\n*   Execute the benchmark logic across a controlled range of possible values that might affect the execution time a function requires.\n*   Execute the benchmark multiple times for each component in a function to isolate and remove outliers.\n\nFrom the results generated by executing the benchmark logic, the benchmarking tool creates a linear model of the function across all of its components. The linear model for a function enables you to estimate how long it takes to execute a specific code path and to make informed decisions without actually spending any significant resources at runtime. Benchmarking assumes all transactions have linear complexity because higher complexity functions are considered to be dangerous to the runtime as the weight of these functions may explode as the runtime state or input becomes too complex.\n\n[](/test/benchmark/#benchmarking-and-weight)\nBenchmarking and weight\n--------------------------------------------------------------------\n\nAs discussed in [Transactions, weights, and fees](/build/tx-weights-fees/)\n, Substrate-based chains use the concept of **weight** to represent the time it takes to execute the transactions in a block. The time required to execute any particular call in a transaction depends on a several factors, including the following:\n\n*   Computational complexity.\n*   Storage complexity.\n*   Database read and write operations required.\n*   Hardware used.\n\nTo calculate an appropriate weight for a transaction, you can use benchmark parameters to measure the time it takes to execute the function calls on different hardware, using different variable values, and repeated multiple times. You can then use the results of the benchmarking tests to establish an approximate worst case weight to represent the resources required to execute each function call and each code path. Fees are then based on the worst case weight. If the actual call performs better than the worst case, the weight is adjusted and any excess fees can be returned.\n\nBecause weight is a generic unit of measurement based on computation time for a specific physical machine, the weight of any function can change based on the specific hardware used for benchmarking.\n\nBy modeling the expected weight of each runtime function, the blockchain is able to calculate how many transactions or system level calls it can execute within a certain period of time.\n\nWithin FRAME, each function call that can be dispatched must have a `#[weight]` annotation that can return the expected weight for the worst case scenario execution of that function given its inputs. The benchmarking framework automatically generates a file with those formulas for you.\n\n[](/test/benchmark/#benchmarking-tools)\nBenchmarking tools\n----------------------------------------------------------\n\nThe [benchmarking framework](https://paritytech.github.io/substrate/master/frame_benchmarking/index.html)\n provides tools that help you add, test, run, and analyze benchmarks for the functions in the runtime. The benchmarking tools that help you determine the time it takes to execute function calls include the following:\n\n*   [Benchmark macros](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/src/lib.rs)\n     to help you write, test, and add runtime benchmarks.\n*   [Linear regression analysis functions](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/src/analysis.rs)\n     for processing benchmark data.\n*   [Command-line interface (CLI)](/hhttps://github.com/paritytech/polkadot-sdk/tree/master/substrate/utils/frame/benchmarking-cli/)\n     to enable you to execute benchmarks on your node.\n\nThe end-to-end benchmarking pipeline is disabled by default when compiling a node. If you want to run benchmarks, you need to compile a node with the `runtime-benchmarks` Rust feature flag.\n\n[](/test/benchmark/#writing-benchmarks)\nWriting benchmarks\n----------------------------------------------------------\n\nWriting a runtime benchmark is similar to writing a unit test for your pallet. Like unit tests, benchmarks must execute specific logical paths in your code. In unit tests, you check the code for specific success and failure results. For benchmarks, you want to execute the **most computationally intensive** path.\n\nIn writing benchmarks, you should consider the specific conditions\u2014such as storage or runtime state\u2014that might affect the complexity of the function. For example, if triggering more iterations in a `for` loop increases the number of database read and write operations, you should set up a benchmark that triggers this condition to get a more accurate representation of how the function would perform.\n\nIf a function executes different code paths depending on user input or other conditions, you might not know which path is the most computationally intensive. To help you see where complexity in the code might become unmanageable, you should create a benchmark for each possible execution path. The benchmarks can help you identify places in the code where you might want to enforce boundaries\u2014for example, by limiting the number of elements in a vector or limiting the number of iterations in a `for` loop\u2014to control how users interact with your pallet.\n\nYou can find examples of end-to-end benchmarks in all of the prebuilt [FRAME pallets](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame)\n.\n\n[](/test/benchmark/#testing-benchmarks)\nTesting benchmarks\n----------------------------------------------------------\n\nYou can test benchmarks using the same mock runtime that you created for unit testing your pallet. The benchmarking macro you use in your `benchmarking.rs` module automatically generates test functions for you. For example:\n\n    fn test_benchmark_[benchmark_name]<T>::() -> Result<(), &'static str>\n\nYou can add the benchmark functions to a unit test and ensure that the result of the function is `Ok(())`.\n\n### [](/test/benchmark/#verify-blocks)\nVerify blocks\n\nIn general, you only need to check that a benchmark returned `Ok(())` because that result indicates that the function was executed successfully. However, you can optionally include a `verify` block with your benchmarks if you want to verify any final conditions, such as the final state of your runtime. The additional `verify` blocks don't affect the results of your final benchmarking process.\n\n### [](/test/benchmark/#run-the-unit-tests-with-benchmarks)\nRun the unit tests with benchmarks\n\nTo run the benchmarking tests, you need to specify the package to test and enable the `runtime-benchmarks` feature. For example, you can test the benchmarks for the Balances pallet by running the following command:\n\n    cargo test --package pallet-balances --features runtime-benchmarks\n\n[](/test/benchmark/#adding-benchmarks)\nAdding benchmarks\n--------------------------------------------------------\n\nThe benchmarks included with each pallet are not automatically added to your node. To execute these benchmarks, you need to implement the `frame_benchmarking::Benchmark` trait. You can see an example of how to do this in the [Substrate node](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/node/runtime/src/lib.rs)\n.\n\nAssuming there are already some benchmarks set up on your node, you just need to add the pallet to the `define_benchmarks!` macro:\n\n    #[cfg(feature = \"runtime-benchmarks\")]\n    mod benches {\n    \tdefine_benchmarks!(\n    \t\t[frame_benchmarking, BaselineBench::<Runtime>]\n    \t\t[pallet_assets, Assets]\n    \t\t[pallet_babe, Babe]\n        ...\n        [pallet_mycustom, MyCustom]\n        ...\n\nAfter you have added your pallet, compile your node binary with the `runtime-benchmarks` feature flag. For example:\n\n    cd bin/node/cli\n    cargo build --profile=production --features runtime-benchmarks\n\nThe `production` profile applies various compiler optimizations.  \nThese optimizations slow down the compilation process _a lot_.  \nIf you are just testing things out and don't need final numbers, use the `--release` command-line option instead of the `production` profile.\n\n[](/test/benchmark/#running-benchmarks)\nRunning benchmarks\n----------------------------------------------------------\n\nAfter you have compiled a node binary with benchmarks enabled, you need to execute the benchmarks. If you used the `production` profile to compile the node, you can list the available benchmarks by running the following command:\n\n    ./target/production/node-template benchmark pallet --list\n\n### [](/test/benchmark/#benchmark-all-functions-in-all-pallets)\nBenchmark all functions in all pallets\n\nTo execute all benchmarks for the runtime, you can run a command similar to the following:\n\n    ./target/production/node-template benchmark pallet \\\n        --chain dev \\\n        --execution=wasm \\\n        --wasm-execution=compiled \\\n        --pallet \"*\" \\\n        --extrinsic \"*\" \\\n        --steps 50 \\\n        --repeat 20 \\\n        --output pallets/all-weight.rs\n\nThis command creates an output file\u2014in this case, a file named `all-weight.rs`\u2014that implements the `WeightInfo` trait for your runtime.\n\n### [](/test/benchmark/#benchmark-a-specific-functions-in-a-pallet)\nBenchmark a specific functions in a pallet\n\nTo execute the benchmark for a specific function in a specific pallet, you can run a command similar to the following:\n\n    ./target/production/node-template benchmark pallet \\\n        --chain dev \\\n        --execution=wasm \\\n        --wasm-execution=compiled \\\n        --pallet pallet_balances \\\n        --extrinsic transfer \\\n        --steps 50 \\\n        --repeat 20 \\\n        --output pallets/transfer-weight.rs\n\nThis command creates an output file for the selected pallet\u2014for example, `transfer-weight.rs`\u2014that implements the `WeightInfo` trait for the `pallet_balances` pallet.\n\n### [](/test/benchmark/#use-a-template-to-format-benchmarks)\nUse a template to format benchmarks\n\nThe benchmarking command-line interface uses a Handlebars template to format the final output file. You can optionally pass the `--template` command-line option to specify a custom template instead of the default. Within the template, you have access to all the data provided by the `TemplateData` struct in the benchmarking command-line interface.\n\nThere are some custom Handlebars helpers included with the output generation:\n\n*   `underscore`: Add an underscore to every 3rd character from the right of a string. Primarily to be used for delimiting large numbers.\n*   `join`: Join an array of strings into a space-separated string for the template. Primarily to be used for joining all the arguments passed to the CLI.\n\nTo get a full list of `benchmark` subcommands, run:\n\n    ./target/production/node-template benchmark --help\n\nTo get a full list of available options for the `benchmark pallet` subcommand, run:\n\n    ./target/production/node-template benchmark pallet --help\n\n[](/test/benchmark/#where-to-go-next)\nWhere to go next\n------------------------------------------------------\n\n*   [frame-benchmarking README](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md)\n    \n*   [Substrate Seminar: Benchmarking Your Substrate Pallet](https://www.youtube.com/watch?v=Qa6sTyUqgek)\n    \n*   [How-to: Add benchmarks](/reference/how-to-guides/weights/add-benchmarks/)\n    \n*   [Command reference: node-template benchmark](/reference/command-line-tools/node-template/#benchmark)\n    \n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/test/debug/)\n[Next \u2192](/test/simulate-parachains/)\n\nON THIS PAGE\n\n[Why benchmark a pallet](#why-benchmark-a-pallet)\n[Developing a linear model](#developing-a-linear-model)\n[Benchmarking and weight](#benchmarking-and-weight)\n[Benchmarking tools](#benchmarking-tools)\n[Writing benchmarks](#writing-benchmarks)\n[Testing benchmarks](#testing-benchmarks)\n[Adding benchmarks](#adding-benchmarks)\n[Running benchmarks](#running-benchmarks)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/xcm-reference/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nXcm reference\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/xcm-reference.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nXCM reference\n=============\n\n**\u26a0\ufe0f WARNING:** This page contains potentially outdated information. Reading it might still be useful, yet we suggest taking it with a grain of salt.\n\nPlease refer to the [\\`polkadot-sdk-docs\\` crate](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/xcm/index.html)\n for the most up-to-date documentation on this topic.\n\nThis section provides reference information for the cross-consensus message (XCM) format.\n\n[](/reference/xcm-reference/#instructions)\nInstructions\n-------------------------------------------------------\n\nAs you learned in [Cross-consensus communication](/learn/xcm-communication/)\n, the XCM executor is a program that executes an ordered set of instructions in a virtual machine running on the recipient consensus system. It's worth noting that some instructions are dependent on other instructions. The order in which instructions are listed in the `Instruction` enumeration reflects some of these dependencies. For example, an asset must be added to the holding register before it can be deposited somewhere else. In general, you also use a similar order for instructions when you construct a message to be sent to the receiving system. However, for your convenience, this reference section lists the instructions in alphabetic order instead of the order in which they are defined.\n\n### [](/reference/xcm-reference/#buyexecution)\nBuyExecution\n\nPays for the execution of the current message by removing assets from the holding register. You must specify the `fees` parameter to identify the asset to remove from the holding register to pay execution fees. You can also specify a `weight_limit` for the maximum fee to be purchased. If the `weight_limit` you specify is lower than the estimated weight of the message, the XCM executor stops execution with the `TooExpensive` error.\n\n| Parameter | Description |\n| --- | --- |\n| `fees` | Specifies the assets to be removed from the holding register to pay transaction fees. |\n| `weight_limit` | Specifies the maximum weight to be purchased to pay execution fees. If you don't specify a limit, the weight is treated as unlimited up to the maximum you specify to be removed from the holding register. |\n\nThe following example illustrates the settings for a BuyExecution instruction:\n\n    {\n      BuyExecution: {\n        fees: {\n          id: {\n            Concrete: {\n              parents: 0\n              interior: Here\n            }\n          }\n          fun: {\n            Fungible: 1,000,000\n          }\n        }\n        weightLimit: {\n          Limited: 1,000,000\n        }\n      }\n    }\n\nThe following example illustrates using the instruction in a Rust program:\n\n    BuyExecution { fees, weight_limit } => {\n        if let Some(weight) = Option::<u64>::from(weight_limit) {\n            // pay for `weight` using up to `fees` of the holding register.\n            let max_fee =\n                self.holding.try_take(fees.into()).map_err(|_| XcmError::NotHoldingFees)?;\n            let unspent = self.trader.buy_weight(weight, max_fee)?;\n            self.holding.subsume_assets(unspent);\n        }\n        Ok(())\n    },\n\n### [](/reference/xcm-reference/#claimasset)\nClaimAsset\n\nCreates assets that are being held on behalf of the location identified in the origin register. You must specify the `assets` parameter to identify the assets to be claimed. The asset you specify must match exactly with the assets available to be claimed by the origin with the given `ticket`. You must specify the `ticket` using the `MultiLocation` type. The claim ticket for the asset is an abstract identifier to help locate the asset to be claimed.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the assets to be claimed. |\n| `ticket` | Specifies a location to help identify the asset to be claimed. |\n\n### [](/reference/xcm-reference/#clearerror)\nClearError\n\nClears the error register. You can use this instruction to manually clear the last error from the error register.\n\n### [](/reference/xcm-reference/#clearorigin)\nClearOrigin\n\nClears the origin register. You can use this instruction to ensure that later instructions cannot take over the authority of the original origin. For example, if you have instructions that are being relayed from an untrusted source, as is often the case with ReserveAssetDeposited, you can use ClearOrigin to prevent the original origin from being used to execute the instruction.\n\nThe following example appends the ReserveAssetDeposited and ClearOrigin instructions to an existing message:\n\n    let mut message = vec![ReserveAssetDeposited(assets), ClearOrigin];\n    message.extend(xcm.0.into_iter());\n\n### [](/reference/xcm-reference/#depositasset)\nDepositAsset\n\nSubtracts the specified asset from the holding register and deposits on-chain equivalent assets under the ownership of the specified `beneficiary`. You must specify the `assets` to remove using the `MultiAssetFilter` type.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the asset to remove from the holding register. |\n| `max_assets` | Specifies the maximum number of unique assets or asset instances to remove from the holding register. Only the first `max_assets` number of unique assets or asset instances that match the `assets` specified are removed, prioritized under standard asset ordering. If there are any additional unique assets or asset instances, they will remain in the holding register. |\n| `beneficiary` | Specifies the new owner of the assets. |\n\nThe following example illustrates a simple message that includes a DepositAsset instruction:\n\n    ParaA::execute_with(|| {\n            let message = Xcm(vec![\\\n                WithdrawAsset((Here, send_amount).into()),\\\n                buy_execution((Here, send_amount)),\\\n                DepositAsset { assets: All.into(), max_assets: 1, beneficiary: Parachain(2).into() },\\\n            ]);\n            // Send withdraw and deposit\n            assert_ok!(ParachainPalletXcm::send_xcm(Here, Parent, message.clone()));\n        });\n\n### [](/reference/xcm-reference/#depositreserveasset)\nDepositReserveAsset\n\nRemoves the assets from the holding register and deposits on-chain equivalent assets into the sovereign account under the ownership of the destination. This instruction also sends a follow-up message to destination of the ReserveAssetDeposited instruction with the given effects.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the asset to remove from the holding register. |\n| `max_assets` | Specifies the maximum number of unique assets or asset instances to remove from the holding register. Only the first `max_assets` number of unique assets or asset instances that match the `assets` specified are removed, prioritized under standard asset ordering. If there are any additional unique assets or asset instances, they will remain in the holding register. |\n| `destination` | Specifies the location whose sovereign account will own the assets and thus the effective beneficiary for the assets and the notification target for the reserve asset deposit message. |\n| `xcm` | Specifies additional instructions to execute on the `destination` location following the ReserveAssetDeposited instruction. |\n\n### [](/reference/xcm-reference/#descendorigin)\nDescendOrigin\n\nChanges the origin to some interior location within the context of the current value in the origin register.\n\n| Parameter | Description |\n| --- | --- |\n| `interior` | Specifies an interior location to place in the origin register. |\n\n### [](/reference/xcm-reference/#exchangeasset)\nExchangeAsset\n\nReduces assets in the holding register up to the amount specified by the `give` parameter and increases assets in the holding register with a minimum amount of alternative assets specified by the receive parameter.\n\n| Parameter | Description |\n| --- | --- |\n| `give` | Specifies the assets to be removed from the holding register. |\n| `receive` | Specifies the assets to be increased in the holding register. Any fungible assets specified for the `receive` parameter can be increased by an amount greater than expressed, but the holding register can't accrue assets not stated in receive. |\n\n### [](/reference/xcm-reference/#hrmpchannelaccepted)\nHrmpChannelAccepted\n\nSends a notification message that an open channel request has been accepted by the recipient. After sending this notification, the channel is opened when the relay chain session changes. This message should originate directly on the relay chains and is intended to be sent by the relay chain to a parachain.\n\n| Parameter | Description |\n| --- | --- |\n| `recipient` | Specifies the parachain identifier for the recipient parachain that has accepted the previous open-channel request. |\n\n### [](/reference/xcm-reference/#hrmpchannelclosing)\nHrmpChannelClosing\n\nSends a message to notify a recipient that the sender who initiated the request to open a channel has decided to close the channel. After sending this notification, the channel is closed when the relay chain session changes. This message should originate directly on the relay chains and is intended to be sent by the relay chain to a parachain.\n\n| Parameter | Description |\n| --- | --- |\n| `initiator` | Specifies the parachain identifier for the parachain that initiated the channel close operation. |\n| `sender` | Specifies the parachain identifier of the sender side of the channel being closed. |\n| `recipient` | Specifies the parachain identifier of the receiver side of the channel being closed. |\n\n### [](/reference/xcm-reference/#hrmpnewchannelopenrequest)\nHrmpNewChannelOpenRequest\n\nSends a request from a parachain to the relay chain to open a new channel for communication with another parachain. Messages passed using the HRMP transport protocol are always routed through a relay chain. This message should originate directly on the relay chains and is intended to be sent by the relay chain to a parachain.\n\n| Parameter | Description |\n| --- | --- |\n| `sender` | Specifies the sender in the to-be opened channel. Also, the initiator of the channel opening. |\n| `max_message_size` | Specifies the maximum size of a message proposed by the sender. |\n| `max_capacity` | Specifies the maximum number of messages that can be queued in the channel. |\n\n### [](/reference/xcm-reference/#initiatereservewithdraw)\nInitiateReserveWithdraw\n\nReduces the value of the holding register by the assets and sends XCM instructions beginning with WithdrawAsset to a reserve location.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the assets to remove from the holding register. |\n| `reserve` | Specifies a valid location that acts as a reserve for all specified assets. The sovereign account of this consensus system on the reserve location will have appropriate assets withdrawn and effects will be executed on them. There will typically be only one valid location on any given asset/chain combination. |\n| `xcm` | Specifies additional instructions to execute on the assets after they are withdrawn on the `reserve` location. |\n\n### [](/reference/xcm-reference/#initiateteleport)\nInitiateTeleport\n\nRemoves the assets from the holding register and sends a message beginning with ReceiveTeleportedAsset instruction to a specified destination location.\n\nNOTE: The destination location MUST respect the origin for the instruction as a valid teleportation origin for all assets. If it does not, then the assets may be lost.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the assets to remove from the holding register. |\n| `destination` | Specifies a valid location that respects teleports coming from this location. |\n| `xcm` | Specifies additional instructions to execute on the `destination` location following the ReceiveTeleportedAsset instruction. |\n\n### [](/reference/xcm-reference/#queryholding)\nQueryHolding\n\nSends a QueryResponse message with the assets value equal to the holding contents, or a portion thereof.\n\n| Parameter | Description |\n| --- | --- |\n| `query_id` | Specifies the identifier for the query that is used for the `query_id` field of the QueryResponse message. |\n| `destination` | Specifies the location to where the QueryResponse message should be sent. |\n| `assets` | Specifies a filter for the assets that should be reported back. |\n| `max_response_weight` | Specifies the value to be used for the `max_weight` field of the QueryResponse message. |\n\nThe following example illustrates a QueryHolding instruction that returns a QueryResponse with the identifier `query_id_set`:\n\n    ParaA::execute_with(|| {\n    \tlet message = Xcm(vec![\\\n    \t\t\tQueryHolding {\\\n    \t\t\t\tquery_id: query_id_set,\\\n    \t\t\t\tdest: Parachain(1).into(),\\\n    \t\t\t\tassets: All.into(),\\\n    \t\t\t\tmax_response_weight: 1_000_000_000,\\\n    \t\t\t},\\\n    \t]);\n    });\n\n### [](/reference/xcm-reference/#queryresponse)\nQueryResponse\n\nProvides expected information from the origin.\n\n| Parameter | Description |\n| --- | --- |\n| `query_id` | Specifies the identifier for the query that resulted in this message being sent. |\n\n| `response`: Expresses the content of the message that resulted from the query instruction. | `max_weight` | Specifies the maximum weight that handling this response should take. If proper execution requires more weight than you specify, an error is returned. If the execution requires less than you specify, the difference might be added to the surplus weight register at run time.\n\nThe `Response` type is used to express information content in the `QueryResponse` XCM instruction. Depending on the query, it can represent the following different data types:\n\n*   Null\n*   Assets { assets: MultiAssets }\n*   ExecutionResult { result: Result<(), (u32, Error)> }\n*   Version { version: Compact }\n\nThe following example illustrates checking that a `QueryResponse` message was received and the information in the response is a newly deposited asset:\n\n    ParaA::execute_with(|| {\n    \tassert_eq!(\n    \t\t\tparachain::MsgQueue::received_dmp(),\n    \t\t\tvec![Xcm(vec![QueryResponse {\\\n    \t\t\t\t\tquery_id: query_id_set,\\\n    \t\t\t\t\tresponse: Response::Assets(MultiAssets::new()),\\\n    \t\t\t\t\tmax_weight: 1_000_000_000,\\\n    \t\t\t}])],\n    \t);\n    });\n\n### [](/reference/xcm-reference/#receiveteleportedasset)\nReceiveTeleportedAsset\n\nAccrues assets into the holding register equivalent to the assets removed from the current origin. The origin must be trusted to have removed the assets as a consequence of sending this message.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the assets that have been removed from the origin. |\n\n### [](/reference/xcm-reference/#refundsurplus)\nRefundSurplus\n\nIncreases the refunded weight register to the value of the surplus weight register. This instruction enables fees previously paid using the BuyExecution instruction to be moved into holding register to match the amount added to the refunded weight register.\n\n### [](/reference/xcm-reference/#reporterror)\nReportError\n\nReports the contents of the error register to the specified `destination` using XCM. A QueryResponse message of type ExecutionOutcome is sent to the `destination` with the given `query_id` and the outcome of the XCM.\n\n| Parameter | Description |\n| --- | --- |\n| `query_id` | Specifies the value to use for the `query_id` field of the QueryResponse message. |\n| `destination` | Specifies the location to where the QueryResponse message should be sent. |\n| `max_response_weight` | Specifies the value to be used for the `max_weight` field of the QueryResponse message. |\n\n### [](/reference/xcm-reference/#reserveassetdeposited)\nReserveAssetDeposited\n\nAdds derivative assets to the holding register to represent the assets received from the value in the origin register. The origin must be trusted to act as a reserve for the assets.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the assets that have been received into the sovereign account of the local consensus system on from \u2020he origin. |\n\n### [](/reference/xcm-reference/#setappendix)\nSetAppendix\n\nSets the appendix register. The appendix register provides any code that should run after the current program completes execution. After the current program ends successfully, or after an error where the Error Handler is empty, the appendix register is cleared and its contents are used to replace the programme register. The estimated weight of this instruction must include the estimated weight of the `appendix` code. At run-time,the surplus weight register should be increased by the estimated weight of the appendix prior to being changed.\n\n| Parameter | Description |\n| --- | --- |\n| `appendix` | : Xcm: The value to which to set the Appendix Register. |\n\n### [](/reference/xcm-reference/#seterrorhandler)\nSetErrorHandler\n\nSets the error handler register. The error handler register provides any code that should run if the program encounters an error. After a program encounters an error, this register is cleared and its contents are used to replace the programme register. The estimated weight of this instruction must include the estimated weight of the `error_handler` code. At run-time, the surplus weight register should be increased by the estimated weight of the error handler prior to being changed.\n\n| Parameter | Description |\n| --- | --- |\n| `error_handler` | Specifies the value to set in the error handler register. |\n\n### [](/reference/xcm-reference/#subscribeversion)\nSubscribeVersion\n\nSends a QueryResponse message to Origin specifying XCM version in the response field. Any upgrades to the local consensus that result in a later version of XCM being supported should elicit a similar response.\n\n| Parameter | Description |\n| --- | --- |\n| `query_id` | Specifies the value to be used for the `query_id` field of the QueryResponse message. |\n| `max_response_weight` | Specifies the value to be used for the `max_weight` field of the QueryResponse message. |\n\n### [](/reference/xcm-reference/#transact)\nTransact\n\nDispatches the encoded call using the dispatch-origin for the call as expressed by the context you specify using the `origin_type` parameter.\n\n| Parameter | Description |\n| --- | --- |\n| `origin_type` | Specifies a context for expressing the message origin as a dispatch origin. |\n| `max_weight` | Specifies the maximum amount of weight to expend while dispatching the encoded call. If the dispatch requires more weight than you specify, execution stops and an error is returned. If the dispatch requires less than you specify, the difference might be added to the surplus weight register at run time. |\n| `call` | Specifies the encoded transaction to execute on the receiving system. |\n\n### [](/reference/xcm-reference/#transferasset)\nTransferAsset\n\nWithdraws assets from the ownership of Origin and deposit equivalent assets under the ownership of beneficiary.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the asset to be transferred. |\n| `beneficiary` | Specifies the new owner for the assets. |\n\n### [](/reference/xcm-reference/#transferreserveasset)\nTransferReserveAsset\n\nWithdraws assets from the ownership of the current origin and deposits equivalent assets under the ownership of the sovereign account for the destination. This instruction also sends an additional message with ReserveAssetDeposited and any instructions specified with the `xcm` parameter to the specified destination.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the asset to be transferred. |\n| `destination` | Specifies the location whose sovereign account will own the assets and thus the effective beneficiary for the assets and the notification target for the reserve asset deposit message. |\n| `xcm` | Specifies the instructions that should follow the ReserveAssetDeposited instruction, which is sent onwards to destination. |\n\nThe following example illustrates using the TransferReserveAsset instruction that contains a message with two additional instructions:\n\n    let mut message = Xcm(vec![TransferReserveAsset {\\\n        assets,\\\n        dest,\\\n        xcm: Xcm(vec![\\\n            BuyExecution { fees, weight_limit: Unlimited },\\\n            DepositAsset { assets: Wild(All), max_assets, beneficiary },\\\n        ]),\\\n    }]);\n\n### [](/reference/xcm-reference/#trap)\nTrap\n\nThrows an error of type Trap.\n\n| Parameter | Description |\n| --- | --- |\n| `id` | Specifies the value to be used for the parameter of the thrown error. |\n\n### [](/reference/xcm-reference/#unsubscribeversion)\nUnsubscribeVersion\n\nCancels the effect of a previous SubscribeVersion instruction from Origin.\n\n### [](/reference/xcm-reference/#withdrawasset)\nWithdrawAsset\n\nRemoves the specified assets from the sending account on the local consensus system and adds them to the value in the holding register.\n\n| Parameter | Description |\n| --- | --- |\n| `assets` | Specifies the asset to remove from the sender. The asset must be owned by the must be owned by the account in the origin register. |\n\n[](/reference/xcm-reference/#registers)\nRegisters\n-------------------------------------------------\n\nMost XCVM registers can't be modified directly. They are set to specific values to start and are only be manipulated by specific instructions, under certain circumstances, or according to certain rules. The XCVM includes the following registers:\n\n| Register | Description |\n| --- | --- |\n| Origin | Stores the location for the authority the current program is running under. |\n| Holding | Stores the number of assets that exist under the control of the XCVM but have no on-chain representation. |\n| Surplus weight | Stores the overestimation of weight previously calculated. |\n| Refunded weight | Stores the portion of surplus weight that has been refunded. |\n| Programme | Stores the set of XCM instructions currently executing. This register holds the complete message\u2014the program\u2014in cross-consensus virtual machine. |\n| Programme counter | Stores the instruction index for currently executing instruction. The value is incremented by one at the end of every successfully executed instruction. The register is reset to zero when the Programme register changes. |\n| Error | Stores information about the last known error during program execution. |\n| Error handler | Stores code that should run if there's an error. |\n| Appendix | Stores code that should run after the current program ends. |\n\n[](/reference/xcm-reference/#origins)\nOrigins\n---------------------------------------------\n\nIn some cases, you might want to manipulate the origin stored in the origin register to grant more or fewer permissions for performing specific operations or executing specific XCM instructions. You can use the following origin types to manipulate how the origin for XCM instructions is interpreted.\n\n| Origin type | Description |\n| --- | --- |\n| Native | Use the native dispatch origin representation for the sender in the local runtime framework. For most chains, this is the `Parachain` or `Relay` origin if coming from a chain. |\n| SovereignAccount | Use the sovereign account of the sender. For most chains, this is the `Signed` origin. |\n| Superuser | Use the superuser account. Normal account can't use this origin and in many cases it isn't available for any account to use. For most chains, this is the `Root` origin. |\n| Xcm | Use the XCM native origin and the `MultiLocation` encoded directly in the dispatch origin unchanged. For most chains, this is the `pallet_xcm::Origin::Xcm` type. |\n\nThe implications of using different origins depend on the code you are calling. Depending on your chain logic and permissions, you might not be able to generate the origin you want to use. For example, most users can't generate the Superuser origin, but it's possible for the chain logic to do so.\n\nThe following example illustrates specifying the origin type in a Transact instruction:\n\n    Transact {\n    \torigin_type: OriginKind::SovereignAccount,\n    \trequire_weight_at_most: weight,\n    \tcall: call.encode().into(),\n    },\n\nFor additional examples of converting origins, see the [origin\\_conversion](https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/xcm/xcm-builder/src/origin_conversion.rs)\n module.\n\n[](/reference/xcm-reference/#errors)\nErrors\n-------------------------------------------\n\nIf the program executing XCM instructions encounters a problem, it stops execution and identifies the type of problem encountered with one of the following errors:\n\n| Error type | Description |\n| --- | --- |\n| `Overflow = 0` | An instruction caused an arithmetic overflow. |\n| `Unimplemented = 1` | The instruction is intentionally unsupported. |\n| `UntrustedReserveLocation = 2` | The origin register doesn't contain a valid value for a reserve transfer notification. |\n| `UntrustedTeleportLocation = 3` | The origin register doesn't contain a valid value for a teleport notification. |\n| `MultiLocationFull = 4` | The `MultiLocation` value too large to descend further. |\n| `MultiLocationNotInvertible = 5` | The `MultiLocation` value ascends more parents than the known number of ancestors of the local location. |\n| `BadOrigin = 6` | The origin register doesn't contain a valid value for executing the instruction. |\n| `InvalidLocation = 7` | The location parameter is not a valid value for the instruction. |\n| `AssetNotFound = 8` | The specified asset can't be found or isn't valid in the location specified for the instruction. |\n| `FailedToTransactAsset = 9` | An asset transaction\u2014for example, an instruction to withdraw or deposit an asset\u2014failed. In most cases, this type of error is caused by problems with type conversions. |\n| `NotWithdrawable = 10` | The specified asset can't be withdrawn, potentially due to lack of ownership, asset availability, or permissions. |\n| `LocationCannotHold = 11` | The specified asset can't be deposited under the ownership of a particular location. |\n| `ExceedsMaxMessageSize = 12` | There was an attempt to send a message that exceeded the maximum message size supported by the transport protocol. |\n| `DestinationUnsupported = 13` | There was an attempt to send a message that can't be translated into a format supported by the destination. |\n| `Transport = 14` | The destination is routable, but there's an issue with the transport mechanism. |\n| `Unroutable = 15` | The destination is known to be unroutable. |\n| `UnknownClaim = 16` | The claim specified for the ClaimAsset instruction isn't recognized or can't be found. |\n| `FailedToDecode = 17` | The function specified for the Transact instruction can't be decoded. |\n| `TooMuchWeightRequired = 18` | The function specified for the Transact instruction might exceed the weight limit allowed. |\n| `NotHoldingFees = 19` | The holding register doesn't contain any payable fees for the BuyExecution instruction to use. |\n| `TooExpensive = 20` | The fees declared to purchase weight in the BuyExecution instruction are insufficient. |\n| `Trap(u64) = 21` | Used by the Trap instruction to force an error intentionally. Its code is included. |\n| `ExpectationFalse = 22` | Used by ExpectAsset, ExpectError, and ExpectOrigin if the expectation was not true. |\n\nConcrete identifiers uniquely identify a single asset through its location in a consensus system relative to the context where an instruction is executed.\n\n**Last edit:** March 1, 2024\n\n[\u2190 Previous](/reference/transaction-format/)\n[Next \u2192](/reference/how-to-guides/)\n\nON THIS PAGE\n\n[Instructions](#instructions)\n[Registers](#registers)\n[Origins](#origins)\n[Errors](#errors)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/test/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nTest\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/test/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTest\n====\n\nRegardless of the type of chain you ultimately want to build, you are likely to start with a local development environment for unit testing and debugging. As your project progresses, you'll want to evaluate the performance of different operations under different conditions to establish benchmarks around the execution time and storage requirements used by the functions in your chain.\n\nIf you are building a parachain, you'll also want to simulate the operation of one or more parachains in a local network before you attempt to deploy on a test network like Rococo or a live production network like Kusama or Polkadot where real-world economics are in play.\n\nIn a local development network, you have full control over your node. You can start and stop the node. You can modify, recompile, and upgrade the runtime at your discretion. You can write to and clear stored state as often as you like. You can use predefined accounts and pallets to try things out. But testing is the key to making your chain accessible to a wider audience and economically viable in the network.\n\nThe topics in this section highlight tools and techniques for testing your blockchain logic to help you move from local development to deployment on a live test network and ultimately into production as part of the Polkadot ecosystem.\n\n*   [Unit test](/test/unit-testing/)\n     explains how you can use the Rust testing framework and a mock runtime environment to execute unit tests that validate individual functions or modules of code.\n*   [Debug](/test/debug/)\n     describes how you can use the Rust logging functions to debug your runtime.\n*   [Benchmark](/test/benchmark/)\n     explains the role of benchmarks, how you can use the benchmarking framework to evaluate the performance of the function calls in your code and to adjust transaction weight to accurately reflect execution time.\n*   [Simulate parachains](/test/simulate-parachains/)\n     steps through how you can set up a local test network to simulate a relay chain network with validators, parachain collator nodes, and XCM messaging.\n*   [Check runtime](/test/check-runtime/)\n     explains how you can use the `try-runtime` command-line tool for testing runtime state against a production snapshot of the chain state.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/build/troubleshoot-your-code/)\n[Next \u2192](/test/unit-testing/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/test/debug/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Test](/test/)\nDebug\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/test/debug.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nDebug\n=====\n\nDebugging is a necessity in all walks of software development, and blockchain is no exception. Most of the same tools used for general purpose Rust debugging also apply to Substrate.\n\n[](/test/debug/#logging-utilities)\nLogging utilities\n----------------------------------------------------\n\nYou can use Rust's logging API to debug your runtimes. This comes with a number of macros, including [`debug`](https://docs.rs/log/0.4.14/log/macro.debug.html)\n and [`info`](https://docs.rs/log/0.4.14/log/macro.info.html)\n.\n\nFor example, after updating your pallet's `Cargo.toml` file with the [`log` crate](https://crates.io/crates/log)\n just use `log::info!` to log to your console:\n\n    pub fn do_something(origin) -> DispatchResult {\n    \n    \tlet who = ensure_signed(origin)?;\n    \tlet my_val: u32 = 777;\n    \n    \tSomething::put(my_val);\n    \n    \tlog::info!(\"called by {:?}\", who);\n    \n    \tSelf::deposit_event(RawEvent::SomethingStored(my_val, who));\n    \tOk(())\n    }\n\n[](/test/debug/#printable-trait)\nPrintable trait\n------------------------------------------------\n\nThe Printable trait is meant to be a way to print from the runtime in `no_std` and in `std`. The `print` function works with any type that implements the [`Printable` trait](https://paritytech.github.io/substrate/master/sp_runtime/traits/trait.Printable.html)\n. Substrate implements this trait for some types (`u8`, `u32`, `u64`, `usize`, `&[u8]`, `&str`) by default. You can also implement it for your own custom types. Here is an example of implementing it for a pallet's `Error` type using the node-template as the example codebase.\n\n    use sp_runtime::traits::Printable;\n    use sp_runtime::print;\n\n    #[frame_support::pallet]\n    pub mod pallet {\n    \t// The pallet's errors\n    \t#[pallet::error]\n    \tpub enum Error<T> {\n    \t\t/// Value was None\n    \t\tNoneValue,\n    \t\t/// Value reached maximum and cannot be incremented further\n    \t\tStorageOverflow,\n    \t}\n    \n    \timpl<T: Config> Printable for Error<T> {\n    \t\tfn print(&self) {\n    \t\t\tmatch self {\n    \t\t\t\tError::NoneValue => \"Invalid Value\".print(),\n    \t\t\t\tError::StorageOverflow => \"Value Exceeded and Overflowed\".print(),\n    \t\t\t\t_ => \"Invalid Error Case\".print(),\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n\n    /// takes no parameters, attempts to increment storage value, and possibly throws an error\n    pub fn cause_error(origin) -> dispatch::DispatchResult {\n    \t// Check it was signed and get the signer. See also: ensure_root and ensure_none\n    \tlet _who = ensure_signed(origin)?;\n    \n    \tprint!(\"My Test Message\");\n    \n    \tmatch Something::get() {\n    \t\tNone => {\n    \t\t\tprint(Error::<T>::NoneValue);\n    \t\t\tErr(Error::<T>::NoneValue)?\n    \t\t}\n    \t\tSome(old) => {\n    \t\t\tlet new = old.checked_add(1).ok_or(\n    \t\t\t\t{\n    \t\t\t\t\tprint(Error::<T>::StorageOverflow);\n    \t\t\t\t\tError::<T>::StorageOverflow\n    \t\t\t\t})?;\n    \t\t\tSomething::put(new);\n    \t\t\tOk(())\n    \t\t},\n    \t}\n    }\n\nRun the node binary with the RUST\\_LOG environment variable to print the values.\n\n    RUST_LOG=runtime=debug ./target/release/node-template --dev\n\nThe values are printed in the terminal or the standard output every time that the runtime function gets called.\n\n    2020-01-01 tokio-blocking-driver DEBUG runtime  My Test Message  <-- str implements Printable by default\n    2020-01-01 tokio-blocking-driver DEBUG runtime  Invalid Value    <-- the custom string from NoneValue\n    2020-01-01 tokio-blocking-driver DEBUG runtime  DispatchError\n    2020-01-01 tokio-blocking-driver DEBUG runtime  8\n    2020-01-01 tokio-blocking-driver DEBUG runtime  0                <-- index value from the Error enum definition\n    2020-01-01 tokio-blocking-driver DEBUG runtime  NoneValue        <-- str which holds the name of the ident of the error\n\nKeep in mind that adding print functions to the runtime increases the size of the Rust and Wasm binaries with debug code not needed in production.\n\n[](/test/debug/#substrates-own-print-function)\nSubstrate's own print function\n-----------------------------------------------------------------------------\n\nFor legacy use cases, Substrate provides extra tools for `Print` debugging (or tracing). You can use the [`print` function](https://paritytech.github.io/substrate/master/sp_runtime/fn.print.html)\n to log the status of the runtime execution.\n\n    use sp_runtime::print;\n    \n    // --snip--\n    pub fn do_something(origin) -> DispatchResult {\n    \tprint!(\"Execute do_something\");\n    \n    \tlet who = ensure_signed(origin)?;\n    \tlet my_val: u32 = 777;\n    \n    \tSomething::put(my_val);\n    \n    \tprint!(\"After storing my_val\");\n    \n    \tSelf::deposit_event(RawEvent::SomethingStored(my_val, who));\n    \tOk(())\n    }\n    // --snip--\n\nStart the chain using the `RUST_LOG` environment variable to see the print logs.\n\n    RUST_LOG=runtime=debug ./target/release/node-template --dev\n\nThe values are printed in the terminal or the standard output if the Error gets triggered.\n\n    2020-01-01 00:00:00 tokio-blocking-driver DEBUG runtime  Execute do_something\n    2020-01-01 00:00:00 tokio-blocking-driver DEBUG runtime  After storing my_val\n\n[](/test/debug/#if-std)\nIf std\n------------------------------\n\nThe legacy `print` function allows you to print and have an implementation of the `Printable` trait. However, in some legacy cases you may want to do more than print, or not bother with Substrate-specific traits just for debugging purposes. The [`if_std!` macro](https://paritytech.github.io/substrate/master/sp_std/macro.if_std.html)\n is useful for this situation.\n\nOne caveat of using this macro is that the code inside will only execute when you are actually running the native version of the runtime.\n\n    use sp_std::if_std; // Import into scope the if_std! macro.\n\nThe `println!` statement should be inside of the `if_std` macro.\n\n    #[pallet::call]\n    impl<T: Config<I>, I: 'static> Pallet<T, I> {\n    \t\t// --snip--\n    \t\tpub fn do_something(origin) -> DispatchResult {\n    \n    \t\t\tlet who = ensure_signed(origin)?;\n    \t\t\tlet my_val: u32 = 777;\n    \n    \t\t\tSomething::put(my_val);\n    \n    \t\t\tif_std! {\n    \t\t\t\t// This code is only being compiled and executed when the `std` feature is enabled.\n    \t\t\t\tprintln!(\"Hello native world!\");\n    \t\t\t\tprintln!(\"My value is: {:#?}\", my_val);\n    \t\t\t\tprintln!(\"The caller account is: {:#?}\", who);\n    \t\t\t}\n    \n    \t\t\tSelf::deposit_event(RawEvent::SomethingStored(my_val, who));\n    \t\t\tOk(())\n    \t\t}\n    \t\t// --snip--\n    }\n\nThe values are printed in the terminal or the standard output every time that the runtime function gets called.\n\n    $\t\t2020-01-01 00:00:00 Substrate Node\n    \t\t2020-01-01 00:00:00   version x.y.z-x86_64-linux-gnu\n    \t\t2020-01-01 00:00:00   by Anonymous, 2017, 2020\n    \t\t2020-01-01 00:00:00 Chain specification: Development\n    \t\t2020-01-01 00:00:00 Node name: my-node-007\n    \t\t2020-01-01 00:00:00 Roles: AUTHORITY\n    \t\t2020-01-01 00:00:00 Imported 999 (0x3d7a\u2026ab6e)\n    \t\t# --snip--\n    ->\t\tHello native world!\n    ->\t\tMy value is: 777\n    ->\t\tThe caller account is: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d (5GrwvaEF...)\n    \t\t# --snip--\n    \t\t2020-01-01 00:00:00 Imported 1000 (0x3d7a\u2026ab6e)\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/test/unit-testing/)\n[Next \u2192](/test/benchmark/)\n\nON THIS PAGE\n\n[Logging utilities](#logging-utilities)\n[Printable trait](#printable-trait)\n[Substrate's own print function](#substrates-own-print-function)\n[If std](#if-std)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/test/simulate-parachains/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Test](/test/)\nSimulate parachains\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/test/simulate-parachains.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nSimulate parachains in a test network\n=====================================\n\nYou can use the `zombienet` command-line tool to set up a local test network to simulate a relay chain with validators and parachain collator nodes. You can configure the test network to include multiple validators and parachains with multiple collators.\n\nThis tutorial illustrates how to set up a basic test network with the following configuration:\n\n*   Four validators\n*   Two parachains\n*   One collator per parachain\n*   One message passing channel that enables the parachains to exchange messages\n\n[](/test/simulate-parachains/#prepare-a-working-folder-with-the-binaries)\nPrepare a working folder with the binaries\n--------------------------------------------------------------------------------------------------------------------\n\nThe `zombienet` command-line interface relies on a configuration file to specify the characteristics of the test network, including the name and location of the binaries, Docker image, or Kubernetes deployment to use.\n\nThis tutorial illustrates how to configure a test network that uses the native relay chain and collator binaries, so the first step in setting up your test network is to prepare a working folder with the binaries you'll need.\n\nTo prepare a working folder with the binaries for the test network:\n\n1.  Open a new terminal shell on your computer, if needed.\n2.  Change to your home directory and create a new folder to hold the binaries required to generate a test network.\n    \n    For example:\n    \n        mkdir binaries\n    \n    If you\u2019re setting up the test network on Linux, you can download the Polkadot binary from [Releases](https://github.com/paritytech/polkadot/releases)\n     into your working folder. If you\u2019re setting up the test network on macOS or want to compile the binary yourself, continue to the next step.\n    \n3.  Clone the Polkadot repository by running a command similar to the following:\n    \n        git clone https://github.com/paritytech/polkadot-sdk\n    \n4.  Change to the root of the `polkadot` directory by running the following command:\n    \n        cd polkadot\n    \n5.  Checkout the latest release of Polkadot.\n    \n    Release branches use the naming convention `release-v<n.n.n>`. For example, the release branch used in this tutorial is `release-v1.0.0` which is in master branch. You can check out a more recent release branch instead of using `git checkout release-v1.1.0`. You can find information about recent releases and what's included in each release on the [Releases](https://github.com/paritytech/polkadot/releases)\n     tab.\n    \n6.  Compile the relay chain node by running the following command:\n    \n        cargo build --release\n    \n7.  Copy the Polkadot binary into your working `binaries` folder by running a command similar to the following:\n    \n        cp ./target/release/polkadot ../binaries/polkadot-v1.0.0\n    \n    As this example illustrates, it's generally a good practice to append the version of `polkadot` to the binary name to keep the files in the `binaries` folder organized.\n    \n8.  Change to your home directory.\n\n### [](/test/simulate-parachains/#add-the-parachain-binary)\nAdd the parachain binary\n\nYour working folder now has the binary for the relay chain, but you also need the binary for the parachain collator nodes. You can add the parachain collator binary to your working folder by cloning the `substrate-parachain-template` repository. By default, compiling the `substrate-parachain-template` creates a parachain collator binary that is configured with the `paraId` 1000. You can use this `paraId` for the first parachain in the test network.\n\nTo add the parachain collator binary to the working folder:\n\n1.  Clone the `substrate-parachain-template` repository by running the following command:\n    \n        git clone https://github.com/substrate-developer-hub/substrate-parachain-template\n    \n2.  Change to the root of the parachain template directory by running the following command:\n    \n        cd substrate-parachain-template\n    \n3.  Check out the release branch that matches the release branch you used to configure the relay chain.\n    \n    For example:\n    \n        git checkout polkadot-v1.0.0\n    \n4.  Compile the parachain template collator by running the following command:\n    \n        cargo build --release\n    \n    You now have a parachain collator binary for paraId 1000.\n    \n5.  Copy the parachain binary into your working `binaries` folder by running a command similar to the following:\n    \n        cp ./target/release/parachain-template-node ../binaries/parachain-template-node-v1.0.0\n    \n    In this example, your working directory is`$HOME/binaries` or `~/binaries` so you must navigate up a directory level from your current `substrate-parachain-template` root directory. As this example illustrates, it's generally a good practice to append the version to the binary name to keep the files in the `binaries` folder organized.\n    \n\n[](/test/simulate-parachains/#configure-the-test-network-settings)\nConfigure the test network settings\n------------------------------------------------------------------------------------------------------\n\nNow that you have the binaries you need in a working folder, you are ready to configure the settings for the test network that Zombienet will use.\n\nTo download and configure Zombienet:\n\n1.  Download the appropriate [Zombienet executable](https://github.com/paritytech/zombienet/releases)\n     for the Linux or macOS operating system.\n    \n    Depending on your security settings, you might need to explicitly allow access to the executable.\n    \n    If you want the executable to be available system-wide, run commands similar to the following after downloading the executable:\n    \n        chmod +x zombienet-macos\n        cp zombienet-macos /usr/local/bin\n    \n2.  Verify that Zombienet is installed correctly by running the following command:\n    \n        ./zombienet-macos --help\n    \n    If command-line help is displayed, the Zombienet is ready to configure.\n    \n3.  Create a configuration file for Zombienet by running the following command:\n    \n        touch config.toml\n    \n    You are going to use the configuration file to specify the following information:\n    \n    *   Location of the binaries for the test network.\n    *   The relay chain specification\u2014`rococo-local`\u2014to use.\n    *   Information about the four relay chain validators.\n    *   Identifiers for parachains included in the test network.\n    *   Information about the collators for each parachains.\n    *   WebSocket endpoint ports to use to connect to each node.\n    \n    For example:\n    \n        [relaychain]\n        \n        default_command = \"../binaries/polkadot-v1.0.0\"\n        default_args = [ \"-lparachain=debug\" ]\n        \n        chain = \"rococo-local\"\n        \n          [[relaychain.nodes]]\n          name = \"alice\"\n        \n          [[relaychain.nodes]]\n          name = \"bob\"\n        \n          [[relaychain.nodes]]\n          name = \"charlie\"\n        \n          [[relaychain.nodes]]\n          name = \"dave\"\n        \n        [[parachains]]\n        id = 1000\n        cumulus_based = true\n        \n          [parachains.collator]\n          name = \"parachain-A-1000-collator01\"\n          command = \"../binaries/parachain-template-node-v1.0.0\"\n        \n        [[parachains]]\n        id = 1001\n        cumulus_based = true\n        \n          [parachains.collator]\n          name = \"parachain-B-1001-collator01\"\n          command = \"../binaries/parachain-template-node-v1.0.0\"\n    \n4.  Save your changes and close the file.\n5.  Start the test network using this configuration file by running a command similar to the following:\n    \n        ./zombienet-macos spawn config.toml -p native\n    \n    The command displays information about the test network nodes being started.\n    \n    Take note of the relay chain and parachain node endpoints. For example, the direct link to the relay chain endpoints should look similar to the following:\n    \n    *   alice: [https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52190#/explorer](https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52190#/explorer)\n        \n    *   bob: [https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52194#/explorer](https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52194#/explorer)\n        \n    *   charlie: [https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52198#/explorer](https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52198#/explorer)\n        \n    *   dave: [https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52202#/explorer](https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52202#/explorer)\n        \n    \n    The direct link to the parachain collator endpoints should look similar to the following:\n    \n    *   parachain-1000-collator: [https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52206#/explorer](https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52206#/explorer)\n        \n    *   parachain-1001-collator: [https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52210#/explorer](https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:52210#/explorer)\n        \n    \n    After all of the nodes are running, you can interact with your nodes by opening the [Polkadot/Substrate Portal](https://polkadot.js.org/apps)\n     and connecting to any of the node endpoints.\n    \n\n[](/test/simulate-parachains/#open-a-message-passing-channel)\nOpen a message passing channel\n--------------------------------------------------------------------------------------------\n\nNow that you have your test network up, you can open horizontal relay message passing channels to enable communication between parachain A (1000) and parachain B (1001). Because channels are unidirectional, you need to\n\n*   Send a request to open channel from parachain A (1000) to parachain B (1001).\n*   Accept the request on parachain B (1001).\n*   Send a request to open channel from parachain B (1001) to parachain A (1000).\n*   Accept the request on parachain A (1000).\n\nZombienet simplifies opening these channels by enabling you to include basic channel settings in the configuration file for testing purposes.\n\nTo set up communication between the parachains in the test network:\n\n1.  Open the `config.toml` file in a text editor.\n2.  Add channel information similar to the following to the configuration file:\n    \n        [[hrmp_channels]]\n        sender = 1000\n        recipient = 1001\n        max_capacity = 8\n        max_message_size = 8000\n        \n        [[hrmp_channels]]\n        sender = 1001\n        recipient = 1000\n        max_capacity = 8\n        max_message_size = 8000\n    \n    Note that the values you set for **max\\_capacity** and **max_message_size** shouldn't exceed the values defined for the `hrmpChannelMaxCapacity` and `hrmpChannelMaxMessageSize` parameters for the relay chain.\n    \n    To check the configuration settings for the current relay chain using the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/)\n    :\n    \n    *   Click **Developer** and select **Chain State**.\n    *   Select **configuration**, then select **activeConfig()**.\n    *   Check the following parameter values:\n    \n        hrmpChannelMaxCapacity: 8\n        hrmpChannelMaxTotalSize: 8,192\n        hrmlChannelMaxMessageSize: 1,048,576\n    \n3.  Save your changes and close the file.\n4.  Restart Zombienet by running the following command:\n    \n        ./zombienet-macos spawn config.toml -p native\n    \n    You now have a test network with a bidirectional HRMP channel open between the parachains A (1000) and parachain B (1001).\n    \n    You can use the [Polkadot/Substrate Portal](https://polkadot.js.org/apps)\n     to connect to the parachains and send messages.\n    \n5.  Click **Developer** and select **Extrinsics**.\n6.  Select **polkadotXcm** or **xcmPallet**, then select **sent(dest, message)** to craft the XCM messages you want to send.\n    \n    You should note that XCM messages are like other transactions and require the sender to pay for the execution of the operation. All of the information required must be included in the message itself. For information about how to craft messages using XCM after you've opened HRMP channels, see [Cross-consensus communication](/learn/xcm-communication/)\n     and [Transfer assets with XCM](/tutorials/build-a-parachain/transfer-assets-with-xcm/)\n    .\n    \n\n[](/test/simulate-parachains/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------------\n\nFor a more complex preconfigured environment that uses Zombienet, download and explore the [Trappist playground](https://github.com/paritytech/trappist)\n. For more information about the properties you can set in the configuration file, see the [Network definition specification](https://paritytech.github.io/zombienet/network-definition-spec.html)\n.\n\n**Last edit:** September 22, 2023\n\n[\u2190 Previous](/test/benchmark/)\n[Next \u2192](/test/check-runtime/)\n\nON THIS PAGE\n\n[Prepare a working folder with the binaries](#prepare-a-working-folder-with-the-binaries)\n[Configure the test network settings](#configure-the-test-network-settings)\n[Open a message passing channel](#open-a-message-passing-channel)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\nTutorials\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nTutorials\n=========\n\nIf you are someone who likes to learn by doing, the Substrate tutorials are a great place to start your journey. Tutorials don't provide much background about _why_ you are performing certain steps or explain the coding details. Instead, the tutorials give you hands-on experience performing the tasks essential to building your own blockchain and focus on ensuring a successful result.\n\nIf you prefer to dig into the details of the code directly, you might want to start with the [Rust API](https://paritytech.github.io/substrate/master/sc_service/index.html)\n documentation. But if you want to start your journey with a guided tour, try out the following tutorials.\n\n[](/tutorials/#build-a-blockchain)\nBuild a blockchain\n-----------------------------------------------------\n\nThe [Build a blockchain](/tutorials/build-a-blockchain/)\n tutorials illustrate the basics for working with blockchains nodes and networks, including how to make nodes communicate with each other in a network of peers and how to collect metrics about node operations. You'll learn how to:\n\n*   Build a local node in your development environment.\n*   Simulate a two-node network using predefined accounts.\n*   Start a small network of trusted validator nodes.\n*   Monitor node operations by collecting metrics.\n*   Upgrade the runtime for a node.\n\n[](/tutorials/#build-application-logic)\nBuild application logic\n---------------------------------------------------------------\n\nThe [Build application logic](/tutorials/build-application-logic/)\n tutorials focus on how you can customize the runtime using pallets, including how to add simple and complex pallets to the runtime and how to use pallets in combination with smart contracts. You'll learn how to:\n\n*   Add a simple predefined pallet to the runtime.\n*   Create a custom pallet using macros.\n*   Specify the account to use as the originator of a function call.\n*   Add an offchain worker and submit transactions using an offchain worker.\n*   Publish a custom pallet for others to use.\n\nFor a deeper dive into how to create a custom pallet from start to finish, you might want to explore the first part of the [Collectibles workshop](/tutorials/collectibles-workshop/)\n. Future iterations are intended to include an introduction to front-end development and how to convert an application from a solo chain to a parachain project.\n\n[](/tutorials/#build-a-parachain)\nBuild a parachain\n---------------------------------------------------\n\nThe [Build a parachain](/tutorials/build-a-parachain/)\n tutorials delve into more advanced topics for moving beyond solo chain development, including how to connect your chain to other chains. You'll learn how to:\n\n*   Turn a solo chain into a parachain.\n*   Deploy a local test network and interact with multiple connected parachains.\n*   Connect your parachain to a public test network.\n*   Work with the cross-consensus messaging format.\n\n**Last edit:** October 10, 2023\n\n[\u2190 Previous](/maintain/runtime-upgrades/)\n[Next \u2192](/tutorials/build-a-blockchain/)\n\nON THIS PAGE\n\n[Build a blockchain](#build-a-blockchain)\n[Build application logic](#build-application-logic)\n[Build a parachain](#build-a-parachain)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/test/unit-testing/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    *   [Unit test](/test/unit-testing/)\n        \n    *   [Debug](/test/debug/)\n        \n    *   [Benchmark](/test/benchmark/)\n        \n    *   [Simulate parachains](/test/simulate-parachains/)\n        \n    *   [Check runtime](/test/check-runtime/)\n        \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Test](/test/)\nUnit testing\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/test/unit-testing.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nUnit test\n=========\n\nAs you build the logic for your runtime, you'll want to routinely test that the logic works as expected. You can create unit tests for the runtime using the [unit testing framework](https://doc.rust-lang.org/rust-by-example/testing/unit_testing.html)\n provided by Rust. After you create one or more unit tests, you can use the `cargo test` command to execute the test. For example, you can run all of the tests you have created for a runtime by running the following command:\n\n    cargo test\n\nFor more information about using the Rust cargo test command and testing framework, run the following command:\n\n    cargo help test\n\n[](/test/unit-testing/#test-pallet-log-in-a-mock-runtime)\nTest pallet log in a mock runtime\n-------------------------------------------------------------------------------------------\n\nIn addition to the unit testing you can do with the Rust testing framework, you can verify the logic in your runtime by constructing a mock runtime environment. The configuration type `Test` is defined as a Rust enum with implementations for each of the pallet configuration traits that are used in the mock runtime.\n\n    frame_support::construct_runtime!(\n     pub enum Test where\n      Block = Block,\n      NodeBlock = Block,\n      UncheckedExtrinsic = UncheckedExtrinsic,\n     {\n      System: frame_system::{Pallet, Call, Config, Storage, Event<T>},\n      TemplateModule: pallet_template::{Pallet, Call, Storage, Event<T>},\n     }\n    );\n    \n    impl frame_system::Config for Test {\n     // -- snip --\n     type AccountId = u64;\n    }\n\nIf `Test` implements `pallet_balances::Config`, the assignment might use `u64` for the `Balance` type. For example:\n\n    impl pallet_balances::Config for Test {\n     // -- snip --\n     type Balance = u64;\n    }\n\nBy assigning `pallet_balances::Balance` and `frame_system::AccountId` to `u64`, testing accounts and balances only requires tracking a `(AccountId: u64, Balance: u64)` mapping in the mock runtime.\n\n[](/test/unit-testing/#test-storage-in-a-mock-runtime)\nTest storage in a mock runtime\n-------------------------------------------------------------------------------------\n\nThe [`sp-io`](https://paritytech.github.io/substrate/master/sp_io/index.html)\n crate exposes a [`TestExternalities`](https://paritytech.github.io/substrate/master/sp_io/type.TestExternalities.html)\n implementation that you can use to test storage in a mock environment. It is the type alias for an in-memory, hashmap-based externalities implementation in [`substrate_state_machine`](https://paritytech.github.io/substrate/master/sp_state_machine/index.html)\n referred to as [`TestExternalities`](https://paritytech.github.io/substrate/master/sp_state_machine/struct.TestExternalities.html)\n.\n\nThe following example demonstrates defining a struct called `ExtBuilder` to build an instance of `TestExternalities`, and setting the block number to 1.\n\n    pub struct ExtBuilder;\n    \n    impl ExtBuilder {\n     pub fn build(self) -> sp_io::TestExternalities {\n      let mut t = system::GenesisConfig::default().build_storage::<TestRuntime>().unwrap();\n      let mut ext = sp_io::TestExternalities::new(t);\n      ext.execute_with(|| System::set_block_number(1));\n      ext\n     }\n    }\n\nTo create the test environment in unit tests, the build method is called to generate a `TestExternalities` using the default genesis configuration.\n\n    #[test]\n    fn fake_test_example() {\n     ExtBuilder::default().build_and_execute(|| {\n      // ...test logics...\n     });\n    }\n\nCustom implementations of [Externalities](https://paritytech.github.io/substrate/master/sp_externalities/index.html)\n allow you to construct runtime environments that provide access to features of the outer node. Another example of this can be found in the [`offchain`](https://paritytech.github.io/substrate/master/sp_core/offchain/index.html)\n module. The `offchain` module maintains its own [Externalities](https://paritytech.github.io/substrate/master/sp_core/offchain/trait.Externalities.html)\n implementation.\n\n[](/test/unit-testing/#test-events-in-a-mock-runtime)\nTest events in a mock runtime\n-----------------------------------------------------------------------------------\n\nIt can also be important to test the events that are emitted from your chain, in addition to the storage. Assuming you use the default generation of `deposit_event` with the `generate_deposit` macro, all pallet events are stored under the `system` / `events` key with some extra information as an [`EventRecord`](https://paritytech.github.io/substrate/master/frame_system/struct.EventRecord.html)\n.\n\nThese event records can be directly accessed and iterated over with `System::events()`, but there are also some helper methods defined in the system pallet to be used in tests, [`assert_last_event`](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.assert_last_event)\n and [`assert_has_event`](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.assert_has_event)\n.\n\n    fn fake_test_example() {\n     ExtBuilder::default().build_and_execute(|| {\n      System::set_block_number(1);\n      // ... test logic that emits FakeEvent1 and then FakeEvent2 ...\n      System::assert_has_event(Event::FakeEvent1{}.into())\n      System::assert_last_event(Event::FakeEvent2 { data: 7 }.into())\n      assert_eq!(System::events().len(), 2);\n     });\n    }\n\nSome things to note are:\n\n*   Events are not emitted on the genesis block, and so the block number should be set in order for this test to pass.\n*   You need to have a `.into()` after instantiating your pallet event, which turns it into a generic event.\n\n### [](/test/unit-testing/#advanced-event-testing)\nAdvanced event testing\n\nWhen testing events in a pallet, often you are only interested in the events that are emitted from your own pallet. The following helper function filters events to include only events emitted by your pallet and converts them into a custom event type. A helper function like this is usually placed in the `mock.rs` file for testing in a mock runtime.\n\n    fn only_example_events() -> Vec<super::Event<Runtime>> {\n     System::events()\n      .into_iter()\n      .map(|r| r.event)\n      .filter_map(|e| if let RuntimeEvent::TemplateModule(inner) = e { Some(inner) } else { None })\n      .collect::<Vec<_>>();\n    }\n\nAdditionally, if your test performs operations that emit events in a sequence, you might want to only see the events that have happened since the last check. The following example leverages the preceding helper function.\n\n    parameter_types! {\n     static ExamplePalletEvents: u32 = 0;\n    }\n    \n    fn example_events_since_last_call() -> Vec<super::Event<Runtime>> {\n     let events = only_example_events();\n     let already_seen = ExamplePalletEvents::get();\n     ExamplePalletEvents::set(events.len() as u32);\n     events.into_iter().skip(already_seen as usize).collect()\n    }\n\nYou can find examples of this type of event testing in the tests for the [nomination pool](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nomination-pools/src/mock.rs)\n or [staking](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/staking/src/mock.rs)\n. If you rewrite the previous event test with this new function, the resulting code looks like this:\n\n    fn fake_test_example() {\n     ExtBuilder::default().build_and_execute(|| {\n      System::set_block_number(1);\n      // ... test logic that emits FakeEvent1 ...\n      assert_eq!(\n       example_events_since_last_call(),\n       vec![Event::FakeEvent1{}]\n      );\n      // ... test logic that emits FakeEvent2 ...\n      assert_eq!(\n       example_events_since_last_call(),\n       vec![Event::FakeEvent2{}]\n      );\n     });\n    }\n\n[](/test/unit-testing/#genesis-config)\nGenesis config\n-----------------------------------------------------\n\nIn the previous examples, the `ExtBuilder::build()` method used the default genesis configuration for building the mock runtime environment. In many cases, it is convenient to set storage before testing. For example, you might want to pre-seed account balances before testing.\n\nIn the implementation of `frame_system::Config`, `AccountId` and `Balance` are both set to `u64`. You can put `(u64, u64)` pairs in the `balances` vec to seed `(AccountId, Balance)` pairs as the account balances. For example:\n\n    impl ExtBuilder {\n     pub fn build(self) -> sp_io::TestExternalities {\n      let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();\n      pallet_balances::GenesisConfig::<Test> {\n       balances: vec![\\\n        (1, 10),\\\n        (2, 20),\\\n        (3, 30),\\\n        (4, 40),\\\n        (5, 50),\\\n        (6, 60)\\\n       ],\n      }\n       .assimilate_storage(&mut t)\n       .unwrap();\n    \n      let mut ext = sp_io::TestExternalities::new(t);\n      ext.execute_with(|| System::set_block_number(1));\n      ext\n     }\n    }\n\nIn this example, account 1 has a balance of 10, account 2 has a balance of 20, and so on.\n\nThe exact structure used to define the genesis configuration of a pallet depends on the pallet `GenesisConfig` struct definition. For example, in the Balances pallet, it is defined as:\n\n    pub struct GenesisConfig<T: Config<I>, I: 'static = ()> {\n     pub balances: Vec<(T::AccountId, T::Balance)>,\n    }\n\n[](/test/unit-testing/#block-production)\nBlock production\n---------------------------------------------------------\n\nIt is useful to simulate block production to verify that expected behavior holds across block production.\n\nA simple way of doing this is by incrementing the System module's block number between `on_initialize` and `on_finalize` calls from all modules with `System::block_number()` as the sole input. Although it is important for runtime code to cache calls to storage or the system module, the test environment scaffolding should prioritize readability to facilitate future maintenance.\n\n    fn run_to_block(n: u64) {\n     while System::block_number() < n {\n      if System::block_number() > 0 {\n       ExamplePallet::on_finalize(System::block_number());\n       System::on_finalize(System::block_number());\n      }\n      System::reset_events();\n      System::set_block_number(System::block_number() + 1);\n      System::on_initialize(System::block_number());\n      ExamplePallet::on_initialize(System::block_number());\n     }\n    }\n\nThe `on_finalize` and `on_initialize` methods are only called from `ExamplePallet` if the pallet trait implements the `frame_support::traits::{OnInitialize, OnFinalize}` traits to execute the logic encoded in the runtime methods before and after each block respectively.\n\nThen call this function in the following fashion.\n\n    #[test]\n    fn my_runtime_test() {\n     with_externalities(&mut new_test_ext(), || {\n      assert_ok!(ExamplePallet::start_auction());\n      run_to_block(10);\n      assert_ok!(ExamplePallet::end_auction());\n     });\n    }\n\n[](/test/unit-testing/#where-to-go-next)\nWhere to go next\n---------------------------------------------------------\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/test/)\n[Next \u2192](/test/debug/)\n\nON THIS PAGE\n\n[Test pallet log in a mock runtime](#test-pallet-log-in-a-mock-runtime)\n[Test storage in a mock runtime](#test-storage-in-a-mock-runtime)\n[Test events in a mock runtime](#test-events-in-a-mock-runtime)\n[Genesis config](#genesis-config)\n[Block production](#block-production)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nCommand line tools\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nCommand-line tools\n==================\n\nThis section provides reference information for Substrate command-line tools.\n\n| Command entry point | Description |\n| --- | --- |\n| [archive](/reference/command-line-tools/archive/) | Index and store all blocks, state, and transaction data for a Substrate-based chain in a relational SQL database. |\n| [memory-profiler](/reference/command-line-tools/memory-profiler/) | Collect information about memory allocation and the behavior of blockchain applications over time. |\n| [node-template](/reference/command-line-tools/node-template/) | Start and manage a Substrate node preconfigured with a subset of commonly-used FRAME pallets. |\n| [polkadot-launch](https://github.com/paritytech/polkadot-launch) | Launch a local Polkadot test network. |\n| [polkadot-apps](https://polkadot.js.org/apps) | Interact with Polkadot or a Substrate node using a browser. |\n| [sidecar](/reference/command-line-tools/sidecar/) | Use a REST service to interact with blockchain nodes built using FRAME. |\n| [srtool](/reference/command-line-tools/srtool/) | Build WASM runtime in a deterministic way, allowing continuous integration pipelines and users to produce a strictly identical WASM runtime. |\n| [subkey](/reference/command-line-tools/subkey/) | Generate and manage public and private key pairs for accounts. |\n| [subxt](/reference/command-line-tools/subxt/) | Submit extrinsics to a Substrate node using RPC. |\n| [try-runtime](/reference/command-line-tools/try-runtime/) | Query a snapshot of runtime storage to retrieve state. |\n| [tx-wrapper](/reference/command-line-tools/tx-wrapper/) | Publish chain specific offline transaction generation libraries. |\n\n**Last edit:** June 25, 2022\n\n[\u2190 Previous](/reference/glossary/)\n[Next \u2192](/reference/command-line-tools/archive/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/memory-profiler/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nMemory profiler\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/memory-profiler.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nmemory-profiler\n===============\n\nMemory profiling enables you to understand the memory allocation and behavior of your blockchain applications over time in Substrate-based clients. It identifies method calls in the context of how memory was allocated, combining this information with the number of allocated objects. In addition, profiling can be used to analyze memory leaks, identify where memory consumption is happening, define temporary allocations, and investigate excessive memory fragmentation within applications.\n\nThe profiler we recommend is [koute's memory profiler](https://github.com/koute/memory-profiler)\n.\n\n[](/reference/command-line-tools/memory-profiler/#installation)\nInstallation\n----------------------------------------------------------------------------\n\nYou can download a precompiled binary release of the profiler from [releases](https://github.com/koute/memory-profiler/releases)\n. The last version we've tested is 0.6.1, but any newer one will also most likely work.\n\nHere's how you can download and unpack it from the command-line:\n\n    $ curl -L https://github.com/koute/memory-profiler/releases/download/0.6.1/memory-profiler-x86_64-unknown-linux-gnu.tgz -o memory-profiler-x86_64-unknown-linux-gnu.tgz\n    $ tar -xf memory-profiler-x86_64-unknown-linux-gnu.tgz\n\nThis will result in three files being unpacked. We're only interested in two of them:\n\n*   `libmemory_profiler.so` - this is the memory profiler itself that we will hook into Substrate\n*   `memory-profiler-cli` - this is the program we will later use to analyze the profiling data\n\nYou can also [compile the profiler from source](https://github.com/koute/memory-profiler#building)\n yourself.\n\nFirst you need to make sure to have the following installed:\n\n*   GCC toolchain\n*   Rust nightly (we've tested version `nightly-2021-06-08`)\n*   [Yarn](https://yarnpkg.com)\n     package manager (for building the GUI)\n\nThen you should be able to build the profiler like this:\n\n    $ git clone https://github.com/koute/memory-profiler\n    $ cd memory-profiler\n    $ cargo build --release -p memory-profiler\n    $ cargo build --release -p memory-profiler-cli\n\nYou'll find the binaries we need in `target/release/libmemory_profiler.so` and `target/release/memory-profiler-cli`.\n\n[](/reference/command-line-tools/memory-profiler/#start-a-node-with-profiling-from-the-command-line)\nStart a node with profiling from the command-line\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIf you're manually launching Substrate from the command-line, then hooking the profiler up to it boils down to just setting up a few extra environment variables and then launching it normally as you'd usually do.\n\nFirst, we want to enable logging, tell the profiler where it's supposed to output its logs, where it should gather its profiling data, and optionally tell it to cull temporary allocations:\n\n    $ export MEMORY_PROFILER_LOG=info\n    $ export MEMORY_PROFILER_LOGFILE=profiling_%e_%t.log\n    $ export MEMORY_PROFILER_OUTPUT=profiling_%e_%t.dat\n    \n    # Optional, depending on what exact aspect you'd like to profile\n    # and how long you're going to be profiling.\n    $ export MEMORY_PROFILER_CULL_TEMPORARY_ALLOCATIONS=1\n\nThen we can launch Substrate with the profiler attached:\n\n    $ LD_PRELOAD=/path/to/libmemory_profiler.so ./target/release/substrate\n\nSetting the `LD_PRELOAD` environment variable will instruct Linux's dynamic linker to inject the memory profiler into Substrate just before it's launched, which allows the profiler to hook into the system's memory allocation routines and track every memory allocation that Substrate's doing.\n\n[](/reference/command-line-tools/memory-profiler/#start-a-node-with-profiling-remotely)\nStart a node with profiling remotely\n----------------------------------------------------------------------------------------------------------------------------\n\nIf you're running a Substrate-based node remotely you're probably using `systemd` to manage it. Here's how you could go about setting up profiling in such a situation.\n\nWe assume you've already either downloaded a precompiled binary of the profiler or compiled it from source, and you have it in your current directory.\n\nFirst, we want to copy the memory profiler to a globally accessible location and set up a place where it can write its logs and gather the profiling data.\n\n    $ sudo mkdir -p /opt/memory-profiler/bin\n    $ sudo cp libmemory_profiler.so /opt/memory-profiler/bin/\n    $ sudo mkdir /opt/memory-profiler/logs\n    $ sudo chmod 0777 /opt/memory-profiler/logs\n\nThen we want to set up a file with all of the environment variables to configure the profiler itself:\n\n    $ echo \"MEMORY_PROFILER_OUTPUT=/opt/memory-profiler/logs/profiling_%e_%t_%p.dat\" | sudo tee /opt/memory-profiler/env\n    $ echo \"MEMORY_PROFILER_LOGFILE=/opt/memory-profiler/logs/profiling_%e_%t_%p.txt\" | sudo tee -a /opt/memory-profiler/env\n    $ echo \"MEMORY_PROFILER_LOG=info\" | sudo tee -a /opt/memory-profiler/env\n    $ echo \"MEMORY_PROFILER_CULL_TEMPORARY_ALLOCATIONS=1\" | sudo tee -a /opt/memory-profiler/env\n    $ echo \"LD_PRELOAD=/opt/memory-profiler/bin/libmemory_profiler.so\" | sudo tee -a /opt/memory-profiler/env\n\nNow you want to open your `systemd` unit file for your node and add the following in the `[Service]` section:\n\n    [Service]\n    EnvironmentFile=/opt/memory-profiler/env\n\nDo not add another `[Service]` section if one already exists; just add the `EnvironmentFile` key to it. If you already have one `EnvironmentFile` key do not replace it; just add a second one, `systemd` will apply both.\n\nNow you can reload your `systemd` daemon:\n\n    $ sudo systemctl daemon-reload\n\nAnd then restart your service to start the profiling:\n\n    $ sudo systemctl restart kusama\n\nThe profiling data will be gathered at `/opt/memory-profiler/logs`. If you want to disable the memory profiler just delete the `EnvironmentFile` key you've added to your unit file, and restart the service again.\n\n[](/reference/command-line-tools/memory-profiler/#configuring-the-profiler)\nConfiguring the profiler\n----------------------------------------------------------------------------------------------------\n\nThere are also [other environment variables you can set to configure the profiler](https://github.com/koute/memory-profiler#environment-variables-used-by-libmemory_profilerso)\n, although besides the ones we've already shown changing them shouldn't be necessary in normal circumstances.\n\nOne configuration knob that warrants extra consideration is `MEMORY_PROFILER_CULL_TEMPORARY_ALLOCATIONS`, which controls whenever the profiler will gather short lived allocations.\n\nBy default the profiler will gather **every** allocation that's made by the profiled application. That is a _lot_ of data, and can be on the order of _megabytes_ per second. This is great if you want to only profile for a short period of time, or if you specifically care about diagnosing temporary allocations, but it becomes problematic when you want to leave the profiler running for longer.\n\nThis is where the `MEMORY_PROFILER_CULL_TEMPORARY_ALLOCATIONS` option comes in. When you turn it on by setting it to `1` the profiler will omit all of the really short lived allocations and not write them out to disk. This significantly cuts down the amount of data that's generated, usually to the range of _kilobytes_ per second, which makes it possible to leave the profiling running for days at a time.\n\n[](/reference/command-line-tools/memory-profiler/#analysis)\nAnalysis\n--------------------------------------------------------------------\n\nNow that you've gathered the profiling data you can now analyze it.\n\nAssuming you have both the `memory-profiler-cli` and the `.dat` file you've gathered in the same directory you can load the GUI for it:\n\n    $ ./memory-profiler-cli server *.dat\n\nThis might take a while, depending or your exact hardware and on the amount of data you're trying to load. Eventually you should see something like this being printed out:\n\n    [2020-05-06T08:59:20Z INFO  cli_core::loader] Loaded data in 315s 820\n    [2020-05-06T08:59:20Z INFO  actix_server::builder] Starting 8 workers\n    [2020-05-06T08:59:20Z INFO  actix_server::builder] Starting server on 127.0.0.1:8080\n\nNow you can open your web browser and access the GUI at `http://localhost:8080/`.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='741' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Graphs from the web UI](https://docs.substrate.io/static/b64fd97351b25ea5beea39afd6b726bf/f5bed/mem-profiling-memory-graph.png)\n\nThere's also [a REST API](https://github.com/koute/memory-profiler#rest-api-exposed-by-memory-profiler-cli-server)\n that you can access you'd like to export the data into another format or inspect it programmatically.\n\n[](/reference/command-line-tools/memory-profiler/#miscellaneous-tips)\nMiscellaneous tips\n----------------------------------------------------------------------------------------\n\n*   It's a good idea to always check the logs generated by the profiler and see whenever there are any `WRN` or `ERR` logs present.\n*   You might see the the following error or warning in the profiler's logs depending on which Linux distribution you're running:\n    \n        The perf_event_open syscall failed for PID 0: Operation not permitted (os error 1)`\n    \n    This is generally harmless; at most this should only result in higher CPU usage when profiling. You can avoid it by doing something like this:\n    \n        $ echo \"-1\" | sudo tee /proc/sys/kernel/perf_event_paranoid\n    \n    Although please note that this might have some security implications. Take a look at `man perf_event_open` for more details.\n    \n*   During analysis the whole data file has to be loaded into memory. If you don't have enough RAM and you'll try to load up a big file the analyzer might run out of memory and crash.\n\n**Last edit:** June 24, 2022\n\n[\u2190 Previous](/reference/command-line-tools/archive/)\n[Next \u2192](/reference/command-line-tools/node-template/)\n\nON THIS PAGE\n\n[Installation](#installation)\n[Start a node with profiling from the command-line](#start-a-node-with-profiling-from-the-command-line)\n[Start a node with profiling remotely](#start-a-node-with-profiling-remotely)\n[Configuring the profiler](#configuring-the-profiler)\n[Analysis](#analysis)\n[Miscellaneous tips](#miscellaneous-tips)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/polkadot-launch/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nPolkadot launch\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/polkadot-launch.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\npolkadot-launch\n===============\n\nThe `polkadot-launch` program enables you to set up a local relay chain and parachain test network. Before you use `polkadot-launch`, you must have the binary files for a relay chain and a collator available in the `bin` folder. You can generate the relay chain and collator binary files by cloning the `rococo-v1` branch of the `polkadot` and `cumulus` projects in the same root directory as the `polkadot-launch` repository. For detailed instructions about how to clone, compile, and copy the required binary files, see the [README](https://github.com/paritytech/polkadot-launch#binary-files)\n in the `polkadot-launch` repository.\n\nThe `polkadot-launch` program also requires you to provide a configuration file that defines the properties of the test network you want to set up. The configuration file can be a JSON or a JavaScript file. You can find examples for both [JSON](https://github.com/paritytech/polkadot-launch/blob/master/config.json)\n and [JavaScript](https://github.com/paritytech/polkadot-launch/blob/master/config.js)\n configuration files in the `polkadot-launch` repository.\n\n[](/reference/command-line-tools/polkadot-launch/#before-you-begin)\nBefore you begin\n------------------------------------------------------------------------------------\n\nBefore you use `polkadot-launch` to set up a local test network, you need to prepare your environment with the required files:\n\n*   Download and compile the `polkadot` relay chain and copy `polkadot` binary to the `polkadot-launch/bin` directory.\n*   Download and compile the `polkadot-collator` and copy `polkadot-collator` binary to the `polkadot-launch/bin` directory.\n*   Prepare a configuration file with the properties for your test network.\n\nSee the documentation in in the `polkadot-launch` repository for additional informmation abot performing these steps.\n\n[](/reference/command-line-tools/polkadot-launch/#installation)\nInstallation\n----------------------------------------------------------------------------\n\nTo install the `polkadot-launch` program:\n\n1.  Open a terminal shell on your computer.\n2.  Clone the `polkadot-launch` repository by running the following command:\n    \n        git clone https://github.com/paritytech/polkadot-launch.git\n    \n3.  Change to the root directory of the `polkadot-launch` repository by running the following command:\n    \n        cd polkadot-launch\n    \n4.  Verify that you have either `yarn` or `npm` installed by running either of the following commands:\n    \n        yarn --version\n    \n    or\n    \n        npm --version\n    \n5.  Install polkadot-launch by running either of the following commands:\n    \n        yarn global add polkadot-launch\n    \n    or\n    \n        npm i polkadot-launch -g\n    \n6.  Verify the properties in your configuration file reflect the location of the relay chain and collator binaries.\n\n[](/reference/command-line-tools/polkadot-launch/#basic-command-usage)\nBasic command usage\n------------------------------------------------------------------------------------------\n\nThe basic syntax for running {`polkadot-launch`} commands is:\n\n`polkadot-launch <configuration-file> [flag]`\n\n### [](/reference/command-line-tools/polkadot-launch/#flags)\nFlags\n\nYou can use the following optional flags with the `polkadot-launch` command.\n\n| Flag | Description |\n| --- | --- |\n| \\-h, --help | Displays usage information. |\n| \\-V, --version | Displays version information. |\n\nFor additional information about using `polkadot-launch`, see the [README](https://github.com/paritytech/polkadot-launch)\n in the `polkadot-launch` repository.\n\n**Last edit:** June 21, 2022\n\n[Next \u2192](/quick-start/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Installation](#installation)\n[Basic command usage](#basic-command-usage)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/archive/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nArchive\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/archive.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\narchive\n=======\n\nThe `archive` program is used to index all blocks, state, and transaction data for a Substrate-based chain and store the indexed data in a relational SQL database. The database created by the `archive` program mirrors all data from a running Substrate blockchain. After you archive the data, you can use database tools to query and retrieve information from the SQL database about the blockchain state. For examples of queries you might want to run against a Substrate archive database, see [Useful queries](https://github.com/paritytech/substrate-archive/wiki/Useful-Queries)\n.\n\n[](/reference/command-line-tools/archive/#before-you-begin)\nBefore you begin\n----------------------------------------------------------------------------\n\nBefore you use `archive` to create a database for a Substrate-based chain, you need to prepare your environment with the required files:\n\n*   You must have PostgreSQL installed on the computer where you are running a Substrate node.\n    \n    You can download PostgreSQL packages for different platforms from the PostgreSQL [Downloads](https://www.postgresql.org/download/)\n     page.\n    \n    Depending on your platform, you might be able to install PostgreSQL using a local package manager. For example, you can install a PostgreSQL package on a macOS computer by running `brew install postgresql` in a Terminal.\n    \n*   You must have RabbitMQ or Docker Compose installed on the computer where you have PostgreSQL installed.\n    \n    Depending on your platform, the instruction and system requirements for installing RabbitMQ or Docker can vary. For information about using [RabbitMQ](https://www.rabbitmq.com/)\n     or [Docker](https://www.docker.com/)\n    , see the [Setup](https://github.com/paritytech/substrate-archive/wiki/1-Setup)\n     `substrate-archive` wiki page.\n    \n*   Your Substrate chain must use RocksDB as its backend database.\n\n[](/reference/command-line-tools/archive/#install-and-configure)\nInstall and configure\n--------------------------------------------------------------------------------------\n\nTo install the `substrate-archive-cli` program:\n\n1.  Open a terminal shell on your computer.\n2.  Clone the `substrate-archive` repository by running the following command:\n    \n        git clone https://github.com/paritytech/substrate-archive.git\n    \n3.  Change to the root directory of the `substrate-archive` repository by running the following command:\n    \n        cd substrate-archive\n    \n4.  Start the PostgreSQL database (`postgres`) and Postgre administrative process (`pgadmin`) on the Substrate node.\n    \n    If you have Docker Compose, you can start the services automatically by running the `docker-compose up -d` command.\n    \n5.  Start your Substrate node, with `pruning` set to archive.\n    \n    For example:\n    \n        ./target/release/node-template --pruning=archive\n    \n6.  Look at the current DBs: `psql -U postgres -hlocalhost -p6432`\n7.  Run `DATABASE_URL=postgres://postgres:123@localhost:6432/local_chain_db sqlx` database create in `substrate-archive/src` to create the database.\n8.  Set `CHAIN_DATA_DB=\"<your_path>\"`.\n9.  Set up your `archive.conf` file:\n    \n    *   make sure to set your base bath to primary DB\n    *   tell it where the rocksdb is. State using CHAIN_DATA_DB\n    *   secondary DB is an optimization\n    *   postgres url (set to var if in prod)\n10.  (Optional) setup up logging and debugging.\n11.  Run a node template. Make sure you run it in `--release --dev base-path=/tmp/dir --pruning=archive`\n12.  Make a transaction with your node template.\n13.  Start up the `substrate-archive` node for your target chain: `cargo run --release -- -c archive-conf.toml --chain=polkadot`\n14.  Open a web browser and log in to the Postgres administrative console.\n15.  Default URL: localhost:16543\n16.  Default user name: pgadmin4@pgadmin.org\n17.  Default password: admin\n18.  Look at the reference to start making your queries.\n\n**Last edit:** February 10, 2023\n\n[\u2190 Previous](/reference/command-line-tools/)\n[Next \u2192](/reference/command-line-tools/memory-profiler/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Install and configure](#install-and-configure)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/polkadot-apps/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nPolkadot apps\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/polkadot-apps.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\npolkadot-js\n===========\n\nThe Polkadot-JS Apps is a flexible UI for interacting with a Polkadot or Substrate based node. Go to [documentation](https://polkadot.js.org/docs)\n.\n\nThis is pre-built [user-facing application](https://github.com/polkadot-js/apps)\n, allowing access to all features available on Substrate chains.\n\nTo connect the Polkadot-JS Apps to your local node, you must go into `Settings` and change the \"endpoint to connect to\" to `Local Node (127.0.0.1:9944)`.\n\nIf you are connected to the Polkadot-JS Apps over a secure HTTPS connection, you will need to use a browser which also supports bridging to an insecure WebSocket endpoint. For example, Google Chrome supports this, but Mozilla Firefox does not.\n\n[](/reference/command-line-tools/polkadot-apps/#polkadot-js-extension)\nPolkadot-JS extension\n--------------------------------------------------------------------------------------------\n\nThe Polkadot-JS Extension is a simple proof-of-concept for managing accounts in a browser extension and allowing the signing of extrinsics using these accounts. It also provides a simple interface for interacting with extension-compliant dApps.\n\nDifferent ways to use the extension:\n\n*   [On Chrome](https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd)\n    \n*   [On Firefox](https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension)\n    \n*   [Fork on GitHub](https://github.com/polkadot-js/extension)\n    \n\n**Last edit:** October 4, 2022\n\n[\u2190 Previous](/reference/command-line-tools/node-template/)\n[Next \u2192](/reference/command-line-tools/sidecar/)\n\nON THIS PAGE\n\n[Polkadot-JS extension](#polkadot-js-extension)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/srtool/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nSrtool\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/srtool.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nsrtool\n======\n\nThe core component of the Substrate runtime toolbox (`srtool`) is a Docker container that enables you to build the Substrate WebAssembly runtime in a deterministic way. By using this tool, you can ensure that the same source code consistently reproduces an identical WebAssembly blob. You can also use the tool to inspect and audit the runtime for any Substrate-based chain and to integrate building the WebAssembly runtime into your CI/CD pipeline.\n\n[](/reference/command-line-tools/srtool/#working-with-the-docker-container)\nWorking with the Docker container\n-------------------------------------------------------------------------------------------------------------\n\nBecause `srtool` is a Docker container, you must have Docker available in your build environment to use it. However, you don't need to know anything about using Docker to build a chain using `srtool` because you can use the `srtool-cli` command-line interface to work with Docker images.\n\nThe `srtiool-cli` package is a command-line utility written in Rust that installs an executable program called `srtool` on your computer. This program simplifies your interactions with the `srtool` Docker container. Over time, the tooling around the `srtool` Docker image has expanded to include the following tools and helper programs:\n\n*   [srtool-cli](https://github.com/chevdor/srtool-cli)\n     provides a command-line interface to pull the `srtool` Docker image, get information about the image and tooling used to interact with it, and build the runtime using the `srtool` Docker container.\n*   [subwasm](https://github.com/chevdor/subwasm)\n     provides command-line options for working with the metadata and WebAssembly runtime built using `srtool`. The `subwasm` program is also used internally to perform tasks in the `srtool` image.\n*   [srtool-actions](https://github.com/chevdor/srtool-actions)\n     provides Github actions to integrate builds produced using the `srtool` image with your GitHub CI/CD pipelines.\n*   [srtool-app](https://gitlab.com/chevdor/srtool-app)\n     provides a simple graphical user interface for building the runtime using the `srtool` Docker image.\n\n[](/reference/command-line-tools/srtool/#installing-srtool-cli)\nInstalling srtool-cli\n-------------------------------------------------------------------------------------\n\nThe `srtool` command-line interface enables you to build the WebAssembly runtime using the `srtool` Docker image. You can install the `srtool` command-line interface by running the following command:\n\n    cargo install --git https://github.com/chevdor/srtool-cli\n\n### [](/reference/command-line-tools/srtool/#basic-command-usage)\nBasic command usage\n\nThe basic syntax for running `srtool` commands is:\n\n    srtool [options] [subcommand]\n\n### [](/reference/command-line-tools/srtool/#options)\nOptions\n\nYou can use the following command-line options with the `srtool` command.\n\n| Option | Description |\n| --- | --- |\n| `-h`,\u00a0`--help` | Displays usage information. |\n| `i`,\u00a0`--image`\u00a0`<image>` | Specifies an alternative image. Be sure to specify an image that is compatible with the default `paritytech/srtool` image. You should note that specifying a different image might not produce the same deterministic result that the `paritytech/srtool` image produces. |\n| `-n`,\u00a0`--no-cache` | Specifies that you don't want to use the tag value from the local cache. |\n| `-V`,\u00a0`--version` | Displays version information. |\n\n### [](/reference/command-line-tools/srtool/#subcommands)\nSubcommands\n\nYou can use the following subcommands with the `srtool` command.\n\n| Command | Description |\n| --- | --- |\n| `build` | Starts a new `srtool` container to build your runtime. |\n| `help` | Displays usage information for `srtool` or for a specified subcommand. |\n| `info` | Displays information about the `srtool` container and your repository. |\n| `pull` | Pulls the `srtool` image without running anything else. |\n| `version` | Displays version information for the `srtool` container. Use `--version` if you want version information for the `srtool-cli` executable. |\n\n### [](/reference/command-line-tools/srtool/#examples)\nExamples\n\nTo get version information for the `srtool` Docker image, run the following command:\n\n    srtool version\n\nThe command displays output similar to the following:\n\n    {\n      \"name\": \"srtool\",\n      \"version\": \"0.9.21\",\n      \"rustc\": \"1.62.0\",\n      \"subwasm\": \"0.18.0\",\n      \"tera\": \"0.2.1\",\n      \"toml\": \"0.2.1\"\n    }\n\nTo get version information for the `srtool-cli` executable, run the following command:\n\n    srtool --version\n\nThe command displays output similar to the following:\n\n    srtool-cli 0.8.0\n\n[](/reference/command-line-tools/srtool/#srtool-build)\nsrtool build\n-------------------------------------------------------------------\n\nUse the `srtool build` command to start a new `srtool` container to build the runtime for the package you specify. By default, the `srtool build` command assumes that the `Cargo.toml` file for the runtime is located in a [`runtime`](https://github.com/paritytech/polkadot-sdk/tree/master/polkadot/runtime)\n subdirectory with the name of the chain. For example, the `srtool build` command use the following locations by default:\n\n*   runtime/kusama\n*   runtime/polkadot\n*   runtime/rococo\n*   runtime/westend\n\nIf the `Cargo.toml` file for your runtime is in a different location, you can specify the path as a command-line option.\n\n### [](/reference/command-line-tools/srtool/#basic-usage)\nBasic usage\n\nThe basic syntax for running the `srtool build` command is:\n\n    srtool build [options] --package <package> [--runtime-dir <path>] [project-path]\n\n### [](/reference/command-line-tools/srtool/#arguments)\nArguments\n\nBy default, the `srtool build` runs in the current working directory. If your project isn't located in the current working directory, you can specify the path to the project location.\n\n| Argument | Description |\n| --- | --- |\n| `project-path` | Specifies the path to the blockchain project you are building the runtime for. |\n\n### [](/reference/command-line-tools/srtool/#options-1)\nOptions\n\nYou can use the following command-line options with the `srtool build` command.\n\n| Option | Description |\n| --- | --- |\n| `-a`,\u00a0`--app` | Enables a mix of standard output and JSON output during the build. This option is recommended for CI. The JSON output is provided as a single line at the end of the build. |\n| `--build-opts`\u00a0`<BUILD_OPTS>` | Enables you to pass custom options directly to the `cargo` build process. If you specify this command-line option, be aware that none of the automatic options for building Kusama or Polkadot are passed to the build process. You must explicitly set the build options you need when you use the `--build-opts` command-line option. In general, this option rarely required. This option is equivalent to setting the `BUILD_OPTS` environment variable. |\n| `--default-features`\u00a0`<default-features>` | Enables you to change the list of default features for the runtime without disabling automatic feature detection. This option is equivalent to setting the `DEFAULT_FEATURES` environment variable. This command-line option has no effect if you set `BUILD_OPTS`. |\n| `-h`,\u00a0`--help` | Displays usage information. |\n| `i`,\u00a0`--image`\u00a0`<image>` | Specifies an alternative image. Be sure to specify an image that is compatible with the default `paritytech/srtool` image. You should note that specifying a different image might not produce the same deterministic result that the `paritytech/srtool` image produces. |\n| `-j`,\u00a0`--json` | Enables JSON output. |\n| `--no-cache` | Disables all caching. If you specify this option, the `srtool` image won't access the Cargo home cache for build dependencies. In general, this option is rarely used because there are no known issues with using the cache. |\n| `-p`,\u00a0`--package`\u00a0`<package>` | Specifies the name of the runtime package you want to build. The name you specify should be the same as the name defined in the `Cargo.toml` file for the runtime,for example, kusama-runtime, polkadot-runtime, and so on. This option is equivalent to setting the `PACKAGE` environment variable. |\n| `--profile`\u00a0`<profile>` | Specifies the profile to use for building the runtime, The default profile to build a runtime is always `release`. You can override the default with this command-line option. This option is equivalent to setting the `PROFILE` environment variable. |\n| `-r`,\u00a0`--runtime-dir`\u00a0`<runtime>` | Specifies the location of the `Cargo.toml` file for the runtime. If your runtime is not in the standard location, you can use this command-line option to specify the correct location. This option is equivalent to setting the `RUNTIME_DIR` environment variable. |\n| `-V`,\u00a0`--version` | Displays version information. |\n\n### [](/reference/command-line-tools/srtool/#examples-1)\nExamples\n\nTo build the Westend runtime from the `cumulus` repository where the path to the `Cargo.toml` for the runtime is [parachains/runtimes/assets/asset-hub-westend](https://github.com/paritytech/cumulus/tree/master/parachains/runtimes/assets/asset-hub-westend)\n, you would run the following command:\n\n    srtool build --app --package westmint-runtime --runtime-dir parachains/runtimes/assets/westmint\n\nThe first time you run the `srtool build` command it takes some time to complete. As the runtime compiles, messages about its progress are displayed as standard output. Because this example uses the `--app` command-line option, JSON output is displayed in a single line at the end of the build similar to the following truncated output:\n\n    ...\n       Compiling cumulus-primitives-parachain-inherent v0.1.0 (/build/primitives/parachain-inherent)\n       Compiling cumulus-pallet-parachain-system v0.1.0 (/build/pallets/parachain-system)\n        Finished release [optimized] target(s) in 112m 11s\n    \u2728 Your Substrate WASM Runtime is ready! \u2728\n    {\"gen\":\"srtool v0.9.21\",\"src\":\"git\",\"version\":\"1.0.0\",\"commit\":\"bd41e3f11887ea2f55fc37be71ff652923388e03\",\"tag\":\"v0.9.220-rc2\",\"branch\":\"master\",\"rustc\":\"rustc 1.62.0 (a8314ef7d 2022-06-27)\",\"pkg\":\"westmint-runtime\",\"tmsp\":\"2022-08-22T21:12:18Z\",\"size\":\"707937\",\"prop\":\"0x6b8e93443b6660a16f67a6cd34d415af463e2285eda3fd02b9fe052c1ad2ceb9\"\n    ... }}}}\n\n[](/reference/command-line-tools/srtool/#srtool-help)\nsrtool help\n-----------------------------------------------------------------\n\nUse the `srtool help` command to display usage message for `srtool` or for a specified subcommand.\n\n### [](/reference/command-line-tools/srtool/#basic-usage-1)\nBasic usage\n\n    srtool help [subcommand]\n\n### [](/reference/command-line-tools/srtool/#examples-2)\nExamples\n\nTo display usage information for the build subcommand, run the following command:\n\n    subkey help build\n\n[](/reference/command-line-tools/srtool/#srtool-info)\nsrtool info\n-----------------------------------------------------------------\n\nUse the `srtool info` command to display information about the `srtool` container and your repository. By default, the `srtool info` command assumes that the `Cargo.toml` file for the runtime is located in a [`runtime`](https://github.com/paritytech/polkadot-sdk/tree/master/polkadot/runtime)\n subdirectory with the name of the chain. For example, the `srtool info` command use the following locations by default:\n\n*   runtime/kusama\n*   runtime/polkadot\n*   runtime/rococo\n*   runtime/westend\n\nIf the `Cargo.toml` file for your runtime is in a different location, you can specify the path as a command-line option.\n\n### [](/reference/command-line-tools/srtool/#basic-usage-2)\nBasic usage\n\nThe basic syntax for running the `srtool info` command is:\n\n    srtool info [options] --package <package> [--runtime-dir <path>] [project-path]\n\n### [](/reference/command-line-tools/srtool/#arguments-1)\nArguments\n\nBy default, the `srtool info` runs in the current working directory. If your project isn't located in the current working directory, you can specify the path to the project location.\n\n| Argument | Description |\n| --- | --- |\n| `project-path` | Specifies the path to the blockchain project if the project isn't located in the current working directory. |\n\n### [](/reference/command-line-tools/srtool/#options-2)\nOptions\n\nYou can use the following command-line options with the `srtool info` command.\n\n| Option | Description |\n| --- | --- |\n| `-h`,\u00a0`--help` | Displays usage information. |\n| `i`,\u00a0`--image`\u00a0`<image>` | Specifies an alternative image. Be sure to specify an image that is compatible with the default `paritytech/srtool` image. You should note that specifying a different image might not produce the same deterministic result that the `paritytech/srtool` image produces. |\n| `-p`,\u00a0`--package`\u00a0`<package>` | Specifies the name of the runtime package you want to build. The name you specify should be the same as the name defined in the `Cargo.toml` file for the runtime,for example, kusama-runtime, polkadot-runtime, and so on. This option is equivalent to setting the `PACKAGE` environment variable. |\n| `-r`,\u00a0`--runtime-dir`\u00a0`<runtime>` | Specifies the location of the `Cargo.toml` file for the runtime. If your runtime is not in the standard location, you can use this command-line option to specify the correct location. This option is equivalent to setting the `RUNTIME_DIR` environment variable. |\n| `-V`,\u00a0`--version` | Displays version information. |\n\n### [](/reference/command-line-tools/srtool/#examples-3)\nExamples\n\nTo display information about the `srtool` container and the local node-template repository, you might run a command similar to the following:\n\n    srtool info --package node-template-runtime --runtime-dir runtime\n\nThis command displays output similar to the following:\n\n    {\n      \"generator\": {\n        \"name\": \"srtool\",\n        \"version\": \"0.9.21\"\n      },\n      \"src\": \"git\",\n      \"version\": \"4.0.0-dev\",\n      \"git\": {\n        \"commit\": \"6a8b2b12371395979099d2c79ccc1860531b0449\",\n        \"tag\": \"\",\n        \"branch\": \"my-release-branch\"\n      },\n      \"rustc\": \"rustc 1.62.0 (a8314ef7d 2022-06-27)\",\n      \"pkg\": \"polkadot-runtime\",\n      \"profile\": \"release\"\n    }\n\n[](/reference/command-line-tools/srtool/#srtool-pull)\nsrtool pull\n-----------------------------------------------------------------\n\nUse the `srtool pull` command to check for and download the latest version of the `srtool` Docker image.\n\n### [](/reference/command-line-tools/srtool/#basic-usage-3)\nBasic usage\n\nThe basic syntax for running the `srtool pull` command is:\n\n    srtool pull [options]\n\n### [](/reference/command-line-tools/srtool/#options-3)\nOptions\n\nYou can use the following command-line options with the `srtool pull` command.\n\n| Option | Description |\n| --- | --- |\n| `-h`,\u00a0`--help` | Displays usage information. |\n| `i`,\u00a0`--image`\u00a0`<image>` | Specifies an alternative image. Be sure to specify an image that is compatible with the default `paritytech/srtool` image. You should note that specifying a different image might not produce the same deterministic result that the `paritytech/srtool` image produces. |\n| `-V`,\u00a0`--version` | Displays version information. |\n\n### [](/reference/command-line-tools/srtool/#examples-4)\nExamples\n\nTo check for a new version of the `srtool` container and Docker image, you might run a command similar to the following:\n\n    srtool pull\n\nThis command checks the Docker Hub for the latest version of the `paritytech/srtool` image and begins downloading and extracting the software. For example\n\n    Found 1.62.0, we will be using paritytech/srtool:1.62.0 for the build\n    1.62.0: Pulling from paritytech/srtool\n    405f018f9d1d: Pull complete \n    c49473e7f7b3: Pull complete \n    7edf98d07029: Pull complete \n    85a50724a6fa: Pull complete \n    87fb1e3dee5b: Downloading   19.4MB/170.4MB\n    469075c5d317: Download complete \n    533bfa44b64a: Download complete \n    ...\n\nWhen all tasks are complete, the command displays output similar to the following:\n\n    Digest: sha256:d5353a63d8fccbef5666e28a8fa0b302d71d4f53cabeb760fe213f3d7df4b8b6\n    Status: Downloaded newer image for paritytech/srtool:1.62.0\n    docker.io/paritytech/srtool:1.62.0\n\nIf you already have the latest version installed locally, the command displays output similar to the following:\n\n    Found 1.62.0, we will be using paritytech/srtool:1.62.0 for the build\n    1.62.0: Pulling from paritytech/srtool\n    Digest: sha256:d5353a63d8fccbef5666e28a8fa0b302d71d4f53cabeb760fe213f3d7df4b8b6\n    Status: Image is up to date for paritytech/srtool:1.62.0\n    docker.io/paritytech/srtool:1.62.0\n\n[](/reference/command-line-tools/srtool/#srtool-version)\nsrtool version\n-----------------------------------------------------------------------\n\nUse the `srtool version` command display version information for the `srtool` container. Use `--version` if you want the version of the `srtool-cli` executable.\n\n### [](/reference/command-line-tools/srtool/#basic-usage-4)\nBasic usage\n\nThe basic syntax for running the `srtool version` command is:\n\n    srtool version [options]\n\n### [](/reference/command-line-tools/srtool/#options-4)\nOptions\n\nYou can use the following command-line options with the `srtool version` command.\n\n| Option | Description |\n| --- | --- |\n| `-h`,\u00a0`--help` | Displays usage information. |\n| `i`,\u00a0`--image`\u00a0`<image>` | Specifies an alternative image. Be sure to specify an image that is compatible with the default `paritytech/srtool` image. You should note that specifying a different image might not produce the same deterministic result that the `paritytech/srtool` image produces. |\n| `-V`,\u00a0`--version` | Displays version information. |\n\n### [](/reference/command-line-tools/srtool/#examples-5)\nExamples\n\nTo display information about the srtool container, run the following command:\n\n    srtool version       \n\nThe command displays output similar to the following:\n\n    {\n      \"name\": \"srtool\",\n      \"version\": \"0.9.21\",\n      \"rustc\": \"1.62.0\",\n      \"subwasm\": \"0.18.0\",\n      \"tera\": \"0.2.1\",\n      \"toml\": \"0.2.1\"\n    }\n\nTo display version information for the `srtool` command-line interface instead of the container, you can run the following command:\n\n    srtool version --version\n\nThe command displays output similar to the following:\n\n    srtool-version 0.8.0\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/reference/command-line-tools/sidecar/)\n[Next \u2192](/reference/command-line-tools/subkey/)\n\nON THIS PAGE\n\n[Working with the Docker container](#working-with-the-docker-container)\n[Installing srtool-cli](#installing-srtool-cli)\n[srtool build](#srtool-build)\n[srtool help](#srtool-help)\n[srtool info](#srtool-info)\n[srtool pull](#srtool-pull)\n[srtool version](#srtool-version)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/node-template/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nNode template\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/node-template.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nnode-template\n=============\n\nThe `node-template` program provides a working Substrate node with FRAME system pallets and a subset of additional pallets for working with common blockchain functional operations. With its baseline of functional pallets, the `node-template` serves as a starter kit for building your own blockchain and developing a custom runtime. You can use the `node-template` program to start a Substrate node and to perform the tasks listed in [Subcommands](/reference/command-line-tools/node-template/#subcommands)\n.\n\n[](/reference/command-line-tools/node-template/#basic-command-usage)\nBasic command usage\n----------------------------------------------------------------------------------------\n\nThe basic syntax for running `node-template` commands is:\n\n    node-template [subcommand] [flags] [options]\n\nDepending on the subcommand you specify, additional arguments, options, and flags might apply or be required. To view usage information for a specific `node-template` subcommand, specify the subcommand and the `--help` flag. For example, to see usage information for `node-template key`, you can run the following command:\n\n    node-template key --help\n\n### [](/reference/command-line-tools/node-template/#flags)\nFlags\n\nYou can use the following optional flags with the `node-template` command.\n\n| Flag | Description |\n| --- | --- |\n| `--alice` | Adds the session keys for the predefined `Alice` account to the local keystore. This flag is equivalent to running the node using `--name alice --validator` as command-line options. |\n| `--allow-private-ipv4` | Allows the node to connect to private IPv4 addresses. This flag is enabled by default if the chain specifications for the node is identified as `local` or you start the node in development mode with the `--dev` flag. |\n| `--bob` | Adds the session keys for the predefined `Bob` account to the local keystore. This flag is equivalent to running the node using `--name bob --validator` as command-line options. |\n| `--charlie` | Adds the session keys for the predefined `Charlie` account to the local keystore. This flag is equivalent to running the node using `--name charlie --validator` as command-line options. |\n| `--dave` | Adds the session keys for the predefined `Dave` account to the local keystore. This flag is equivalent to running the node using `--name dave --validator` as command-line options. |\n| `--dev` | Starts the node in development mode in a fresh state. No state is persisted if you run the node using this flag. |\n| `--disable-log-color` | Disables the use of color in log messages. |\n| `--disable-log-reloading` | Disables log filter updates and reloading. By default, dynamic log filtering is enabled. However, the feature can affect performance. If you start the node with this flag, the `system_addLogFilter` and `system_resetLogFilter` remote procedure calls have no effect. |\n| `--discover-local` | Enables peer discovery on local networks. By default, this flag is `true` if you start the node using the `--dev` flag or if the chain specification is `Local` or `Development` and `false` otherwise. |\n| `--eve` | Adds the session keys for the predefined `Eve` account to the local keystore. This flag is equivalent to running the node using `--name eve --validator` as command-line options. |\n| `--ferdie` | Adds the session keys for the predefined `Ferdie` account to the local keystore. This flag is equivalent to running the node using `--name ferdie --validator` as command-line options. |\n| `--force-authoring` | Enables block authoring even if the node is offline. |\n| `-h`, `--help` | Displays usage information. |\n| `--ipfs-server` | Joins the IPFS network and serve transactions over bitswap protocol. |\n| `--kademlia-disjoint-query-paths` | Requires iterative Kademlia distributed hash table (DHT) queries to use disjointed paths. This option increases resiliency in the presence of potentially adversarial nodes. See the S/Kademlia paper for more information on the high level design as well as its security improvements. |\n| `--no-grandpa` | Disables the GRANDPA voter if the node is running as a validator mode.If the node is not running as a validator, the option disables the GRANDPA observer. |\n| `--no-mdns` | Disables mDNS discovery. By default, the network uses mDNS to discover other nodes on the local network. This option disables discovery and is automatically applied if you start the node using the `--dev` option. |\n| `--no-private-ipv4` | Prevents connecting to private IPv4 addresses, unless the address was passed with the `--reserved-nodes` or `--bootnodes` option. This setting is enabled by default for chains that are marked as \"live\" in their chain specifications. |\n| `--no-prometheus` | Disables the exposure of a Prometheus endpoint for receiving metrics. By default, metrics are exported to a Prometheus endpoint. |\n| `--no-telemetry` | Disables connecting to the Substrate telemetry server. Telemetry is enabled for global chains by default. |\n| `--one` | Provides a shortcut for specifying `--name One --validator` to add session keys for `One` to the keystore. |\n| `--password-interactive` | Enables you to specify the password for connecting to the keystore interactively in the terminal shell. |\n| `--prometheus-external` | Exposes the Prometheus exporter on all interfaces. The default is local. |\n| `--reserved-only` | Specifies whether to only synchronize the chain with reserved nodes. This option also disables automatic peer discovery. TCP connections might still be established with non-reserved nodes. In particular, if you are a validator, your node might still connect to other validator nodes and collator nodes regardless of whether they are defined as reserved nodes. |\n| `--rpc-external` | Listens to all RPC interfaces. By default, the node only listens to local RPC calls. If you set this command-line option, keep in mind that that not all RPC methods are safe to be exposed publicly. Use an RPC proxy server to filter out dangerous methods. For more information about RPC methods that shouldn't be publicly exposed, see [Remote procedure calls](/build/remote-procedure-calls/)<br>. Use `--unsafe-rpc-external` to suppress the warning if you understand the risks. |\n| `--storage-chain` | Enables storage chain mode. If you set this option, each transaction is stored separately in the transaction database column and is only referenced by hash in the block body column. |\n| `--tmp` | Runs a temporary node. This option creates a temporary directory to store the blockchain configuration, including the node database, node key, and the keystore. |\n| `--two` | Provides a shortcut for specifying `--name Two --validator` to add session keys for `Two` to the keystore. |\n| `--unsafe-pruning` | Forces the node to start with unsafe pruning settings. When running as a validator, it is highly recommended to disable state pruning (that is, archive) which is the default. The node will refuse to start as a validator if pruning is enabled unless this option is set. |\n| `--unsafe-rpc-external` | Listens to all RPC interfaces. This option is the same as `--rpc-external`. |\n| `--unsafe-ws-external` | Listens to all Websocket interfaces. This option is the same as `--ws-external` but doesn't warn you about it. |\n| `--validator` | Starts the node with the authority role and enables it to actively participate in any consensus task that it can (for example, depending on availability of local keys). |\n| `-V`, `--version` | Displays version information. |\n| `--ws-external` | Listens to all Websocket interfaces. By default, the node only listens locally. Keep in mind that not all RPC methods are safe to be exposed publicly. You can use an RPC proxy server to filter out dangerous methods. You can use `--unsafe-ws-external` to suppress the warning if you understand the risks. |\n\n### [](/reference/command-line-tools/node-template/#options)\nOptions\n\nYou can use the following options with the `node-template` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--bootnodes <node-identifier>...` | Specifies a list of boot nodes identifiers for peer-to-peer communication. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--database <database>` | Selects the database backend to use. Valid values are `rocksdb`, `paritydb-experimental`, or `auto`. |\n| `--db-cache <MiB>` | Limits how much memory the database cache can use. |\n| `--offchain-worker <execution>` | Determines when offchain worker processes are executed. By default, offchain workers are only enabled for nodes that are authoring new blocks and the offchain worker is executed during block validation. Valid values are `Always`, `Never`, or `WhenValidating`. |\n| `--execution <strategy>` | Determines the execution strategy used by all execution contexts. Valid values are `Native`, `Wasm`, `Both` or `NativeElseWasm`. |\n| `--execution-block-construction <strategy>` | Specifies the type of execution used when calling into the runtime to construct blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-import-block <strategy>` | Specifies the type of execution used when calling into the runtime to import blocks (including locally-authored blocks). Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-offchain-worker <strategy>` | Specifies the type of execution used when calling into the runtime to use an offchain worker. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-other <strategy>` | Specifies the type of execution used when calling into the runtime while not syncing, importing, or constructing blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-syncing <strategy>` | Specifies the type of execution used when calling into the runtime to import blocks as part of an initial synchronization. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--in-peers <count>` | Specifies the maximum number of incoming connections to accept. The default is 25 peers. |\n| `--enable-offchain-indexing <database>` | Enables the offchain indexing API. The offchain indexing API enables the runtime to write directly to a offchain worker database during block import. |\n| `--ipc-path <path>` | Specifies the path to send inter-process communication (IPC)to a remote procedure call (RPC) server. |\n| `--keep-blocks <count>` | Specifies the number of finalized blocks to keep in the database. The default is to keep all blocks. |\n| `--keystore-path <path>` | Specifies the path to a custom keystore. |\n| `--keystore-uri <keystore-uri>` | Specifies a custom URI to connect to for keystore services. |\n| `--listen-addr <listen-address>...` | Specifies the address for the node to listen on. By default, if you start a node using the `--validator` option, the addresses `/ip4/0.0.0.0/tcp/<port>` and `/ip6/[::]/tcp/<port>` are used. Otherwise, the `/ip4/0.0.0.0/tcp/<port>/ws` and `/ip6/[::]/tcp/<port>/ws` addresses are used. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--max-parallel-downloads <count>` | Specifies the maximum number of peers from which to ask for the same blocks in parallel. This option allows nodes to download announced blocks from multiple peers. You can decrease the count to reduce traffic, but risk increasing latency. The default is 5 parallel downloads. |\n| `--max-runtime-instances <max-runtime-instances>` | Specific the maximum size of the instances cache for each runtime. The default value is 8 and values higher than 256 are ignored. |\n| `--name <name>` | Specifies the human-readable name for this node. The node name is reported to the telemetry server, if enabled. |\n| `--node-key <key>` | Specifies the secret key to use for `libp2p` networking. The value is a string that is parsed based on the `--node-key-type`. For example, if the node key type is `ed25519`, the node key is parsed as a hex-encoded Ed25519 32-byte secret key (64 hex characters). The value of this option takes precedence over `--node-key-file`. Note that secrets provided as command-line arguments are easily exposed. You should only use this option for development and testing. To use an externally managed secret key, use the `--node-key-file` option. |\n| `--node-key-file <file>` | Specifies the file that contains the secret key for a node to use for `libp2p` networking. The contents of the file are parsed based on the `--node-key-type`. For example, if the node key type is `ed25519`, the file must contain an unencoded 32-byte or hex-encoded Ed25519 secret key. If the file does not exist, it is created with a newly generated secret key of the type you specify using the `--node-key-type` option. |\n| `--node-key-type <type>` | Specifies the type of secret key to use for peer-to-peer (`libp2p`) networking. You can specify the secret key on the command-line using the `--node-key` option, read the key from a file using the `--node-key-file` option, or read the key from a file specifies in the chain-specific `config` directory inside the base directory specified by the `--base-dir` option. If this file does not exist, it is created with a newly generated secret key of the chosen type. The node's secret key determines the public key\u2014the peer identifier\u2014that is used to communicate with the node using the `libp2p` library. The default type is Ed25519. |\n| `--out-peers <count>` | Specifies the maximum number of outgoing connections to maintain. The default is 25. |\n| `--password <password>` | Specifies the password to use for the keystore. |\n| `--password-filename <path>` | Specifies the path to a file that contains the password used for the keystore. |\n| `--pool-kbytes <count>` | Specifies the maximum number of kilobytes for all transactions stored in the transaction pool. The default is 20480 KB. |\n| `--pool-limit <count>` | Specifies the maximum number of transactions that can be in the transaction pool. The default is 8192 transactions. |\n| `--port <port>` | Specifies the TCP port to use for peer-to-peer communication. |\n| `--prometheus-port <port>` | Specifies the TCP port to use for the Prometheus exporter service. |\n| `--pruning <pruning-mode>` | Specifies the maximum number of block states to keep or `archive` to keep all block states. If the node is running as a validator, the default is to keep all block states. If the node does not run as a validator, only state for the last 256 blocks is kept. |\n| `--public-addr <public-address>...` | Specifies the public address that other nodes can use to connect to the node. You can use this option to connect to a node through a proxy. |\n| `--reserved-nodes <address>...` | Specifies a list of reserved node addresses. |\n| `--rpc-cors <origins>` | Specifies the browser Origins allowed to access the HTTP and WS RPC servers. You can specify this option as a comma-separated list of origins using `protocol://domain` syntax,`null`, or `all`. A value of `all` disables origin validation. By default, `localhost` and `https://polkadot.js.org` origins are allowed. If you start the node with the `--dev` option, all origins are allowed by default. |\n| `--rpc-http-threads <count>` | Specifies the size of the RPC HTTP server thread pool. |\n| `--rpc-max-payload <rpc-max-payload>` | Sets the the maximum RPC payload size for both requests and responses (both HTTP and web socket), in megabytes. The default is 15 MiB. |\n| `--rpc-methods <method-set>` | Specifies the RPC methods to expose. Valid values are `Unsafe` to expose every RPC method, `Safe` to only exposes a safe subset of RPC methods, denying unsafe RPC methods, or `Auto` to expose `Safe` RPC methods if RPC is served externally, for example if you run the node using `--rpc-external` or `--rpc-external`, or expose `Unsafe` RPC methods if RPC is not served externally. The default is `Auto`. |\n| `--rpc-port <port>` | Specifies the TCP port to use for the HTTP RPC server. |\n| `--state-cache-size <bytes>` | Specifies the state cache size. The default is 67108864 bytes. |\n| `--sync <sync-mode>` | Specifies the blockchain syncing mode Valid values are `Full` to download and validate the full blockchain history, `Fast` to download blocks and the latest state only, or `FastUnsafe`to download the latest state but skip downloading state proofs. The default is `Full`. |\n| `--telemetry-url <url verbosity>...` | Specifies the URL of the telemetry server to connect to. You can pass this flag multiple times to specify multiple telemetry endpoints. Verbosity levels range from 0-9, with 0 denoting the least verbose. Use the following format to specify the URL followed the verbosity option is `--telemetry-url 'wss://foo/bar 0'`. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n| `--wasm-execution <method>` | Specifies the method for executing Wasm runtime code. Valid values are `interpreted`, or `compiled`. The default is `Compiled`. |\n| `--wasm-runtime-overrides <path>` | Specifies the path where local WASM runtimes are stored. These runtimes override on-chain runtimes when the version matches. |\n| `--ws-max-connections <count>` | Specifies the maximum number of WS RPC server connections. |\n| `--rpc-port <port>` | Specifies the TCP port to use for the WebSockets RPC server. |\n\n### [](/reference/command-line-tools/node-template/#subcommands)\nSubcommands\n\nYou can use the following subcommands with the `node-template` command. For reference information and examples that illustrate using these subcommands, select an appropriate command.\n\n| Command | Description |\n| --- | --- |\n| `benchmark` | Benchmarks runtime pallets. |\n| `build-spec` | Builds a chain specification. |\n| `check-block` | Validates blocks. |\n| `export-blocks` | Exports blocks. |\n| `export-state` | Exports the state of a given block into a chain specification. |\n| `help` | Displays usage information for `node-template` or for a specified subcommand. |\n| `import-blocks` | Imports blocks. |\n| `key` | Provides local key management utilities. |\n| `purge-chain` | Removes all chain data. |\n| `revert` | Reverts the chain to a previous state. |\n\n[](/reference/command-line-tools/node-template/#benchmark)\nbenchmark\n--------------------------------------------------------------------\n\nUse the `node-template benchmark` command to analyze the resources required to execute the transactions in extrinsic calls you have configured in runtime pallets. You can analyze individual extrinsic calls in specific pallets or all extrinsic calls in all pallets. With the `benchmark` subcommand, you can use additional command-line options to test different execution scenarios and compare the results.\n\nNote that you must compile the node with benchmarking enabled to use all subcommands of `node-template benchmark`. To compile the node with benchmarking features enabled, run the following command:\n\n    cargo build --package node-template --release --features runtime-benchmarks\n\n#### Basic command usage\n\n    node-template benchmark [subcommand] [flags] [options]\n\nDepending on the subcommand you specify, additional arguments, options, and flags might apply or be required. To view usage information for a specific `benchmark` subcommand, specify the subcommand and the `--help` flag. For example, to see usage information for `benchmark pallet`, you can run the following command:\n\n    node-template benchmark pallet --help\n\n#### Subcommands\n\nYou can use the following subcommands with the `node-template benchmark` command.\n\n| Command | Description |\n| --- | --- |\n| `block` | Benchmarks the execution time of historic blocks. |\n| `help` | Displays usage information for `node-template benchmark` or for a specified subcommand. |\n| `overhead` | Benchmarks the execution overhead per-block and per-extrinsic. |\n| `pallet` | Benchmarks the extrinsic weight of FRAME pallets. |\n| `storage` | Benchmarks the storage speed of a chain snapshot. |\n\n#### Flags\n\nYou can use the following optional flags with the `node-template benchmark` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use all of the common node-template command-line options in combination with `node-template benchmark` subcommands. For example, you can use `--base-path <path>` to specify a custom directory for blockchain data and `--chain <chain-specification>` to specify the chain specification to use with any `benchmark` subcommand.\n\nHowever, there are many command-line options that are specifically for performing benchmarking tasks. For example, the `node-template benchmark block` subcommand supports `--from` and `--to` command-line options for specifying the blocks to analyze.\n\nBecause benchmarking FRAME pallets represents the most common benchmarking task, the `node-template benchmark pallet` subcommand supports the most task-specific command-line options. For example, you can use the following options with the `node-template benchmark pallet` subcommand.\n\n| Option | Description |\n| --- | --- |\n| `--external-repeat` | Specifies the number of times to repeat the execution of a benchmark for the client. Note that this option might give slower results, but maximizes Wasm memory. The default is one execution. |\n| `--extra` | Displays and runs extra benchmarks that would otherwise not be needed for weight construction. |\n| `-e`, `--extrinsic <extrinsic>` | Specifies an individual function in the pallet to benchmark, or `*` to benchmark all function calls in a pallet. |\n| `--header <header>` | Adds a header file to your benchmark output. |\n| `--heap-pages <heap-pages>` | Sets the heap pages while running benchmarks. If not set, the default value from the node is used. |\n| `--high <highest-range-values>...` | Indicates highest values for each of the component ranges. |\n| `json-input <json-input-file>` | Specifies the path to a JSON file with previously-generated benchmark results. This option enables you to reuse the benchmarks raw results generated with the `--json-file` to rerun the benchmark analysis and to regenerate the weights for a pallet without actually rerunning the benchmarks tests. |\n| `--list` | Lists all currently defined benchmarks without running them. |\n| `--low <lowest-range-values>...` | Indicates lowest values for each of the component ranges. |\n| `--no-median-slopes` | Disables the median-slopes linear regression analysis. |\n| `--no-min-squares` | Disables the min-squares linear regression analysis. |\n| `--no-storage-info` | Disables the display of storage information in the analysis output. This is independent of the storage information appearing in the _output file_. Use a Handlebar template for that purpose. |\n| `--no-verify` | Disables verification logic when running benchmarks. |\n| `--output <output>` | Outputs the benchmarks to a Rust file at the given path. |\n| `--output-analysis <analysis-type>` | Specifies the analysis function to use in the benchmark output. Valid vales are `min-squares`, `median-slopes`, or `max`. The default is the `min-squares` analysis. For more information about benchmarking analysis, see [Benchmark](/test/benchmark/)<br>. |\n| `-p`, `--pallet <pallet>` | Specifies the FRAME pallet to benchmark, or `*` to benchmark all pallets. If you benchmark all pallets, you must also specify `--extrinsic *` to benchmark all extrinsic calls. |\n| `--record-proof` | Estimates the proof-of-validation (PoV) size. |\n| `-r`, `--repeat <repeat>` | Specifies the number of times to repeat the execution of a benchmark from within the WebAssembly binary. The default is one execution. |\n| `-s`, `--steps <steps>` | Specifies how many samples to take across the variable components. The default is one sample. |\n| `--template <template>` | Specifies the path to a Handlebars template file used for outputting benchmark results. |\n\nFor examples of different benchmarking subcommands and the related command-line options, see [Benchmarking examples](/reference/command-line-tools/node-template/#benchmarking-examples)\n.\n\n#### Benchmarking examples\n\nAfter you have compiled the runtime with benchmarking enabled, you can run a command similar to the following to benchmark all of the function calls in all of the pallets that have runtime-benchmarking configured:\n\n    ./target/release/node-template benchmark pallet \\\n        --chain dev \\\n        --extrinsic \"*\" \\\n        --pallet \"*\" \\\n        --output pallets/weights.rs\n\nWith this command, each function call is executed once with a single value and the resulting weight is recorded in the `weights.rs` file.\n\nDepending on the function you want to benchmark, you can add the `--steps` and `--repeat` command-line options to execute the call multiple times with different values. For example, the following command executes the `do_something` function in the `pallet_template` and calls the function 20 times to take 10 data points:\n\n    ./target/release/node-template benchmark pallet \\\n        --chain dev \\\n        --extrinsic do_something \\\n        --pallet pallet_template \\\n        --steps 10 \\\n        --repeat 20 \\\n        --list\n\nWith the `--list` option, the command displays the following output:\n\n    pallet, benchmark\n    pallet_template, do_something\n\nWith the `--steps` and `--repeat` command-line options, the command displays the following benchmarking results:\n\n    Pallet: \"pallet_template\", Extrinsic: \"do_something\", Lowest values: [], Highest values: [], Steps: 10, Repeat: 20\n    Raw Storage Info\n    ========\n    Storage: TemplateModule Something (r:0 w:1)\n    \n    Median Slopes Analysis\n    ========\n    -- Extrinsic Time --\n    \n    Model:\n    Time ~=       12\n        + s        0\n                  \u00b5s\n    \n    Reads = 0 + (0 * s)\n    Writes = 1 + (0 * s)\n    \n    Min Squares Analysis\n    ========\n    -- Extrinsic Time --\n    \n    Data points distribution:\n        s   mean \u00b5s  sigma \u00b5s       %\n        0      12.4     0.489    3.9%\n       10      12.1       0.3    2.4%\n       20      12.1       0.3    2.4%\n       30      11.8       0.4    3.3%\n       40        12         0    0.0%\n       50      11.9       0.3    2.5%\n       60        12         0    0.0%\n       70      12.2       0.4    3.2%\n       80        12         0    0.0%\n       90        12         0    0.0%\n      100        12         0    0.0%\n    \n    Quality and confidence:\n    param     error\n    s             0\n    \n    Model:\n    Time ~=    12.13\n        + s        0\n                  \u00b5s\n    \n    Reads = 0 + (0 * s)\n    Writes = 1 + (0 * s)\n\nTo measure the average, median, minimum, and maximum execution time per-block and per-extrinsic, you can run the `node-template benchmark overhead` subcommand:\n\n    ./target/release/node-template benchmark overhead\n\nThe command displays output similar to the following:\n\n    Running 10 warmups...    \n    Executing block 100 times    \n    Per-block execution overhead [ns]:\n    \tTotal: 81779519\n    \tMin: 695173, Max: 1522917\n    \tAverage: 817795, Median: 763360, Stddev: 160759.2\n    \tPercentiles 99th, 95th, 75th: 1443343, 1263935, 814356    \n    \tWriting weights to \"block_weights.rs\"    \n    Running 10 warmups...    \n    Executing block 100 times    \n    Building block, this takes some time...    \n    Extrinsics per block: 12000    \n    Running 10 warmups...    \n    Executing block 100 times\n    Per-extrinsic execution overhead [ns]:\n    \tTotal: 8955542\n    \tMin: 85950, Max: 97448\n    \tAverage: 89555, Median: 88348, Stddev: 2713.05\n    \tPercentiles 99th, 95th, 75th: 97247, 95040, 91733    \n    \tWriting weights to \"extrinsic_weights.rs\"\n\nBy default, the command executes the benchmark 100 times, generates results, and writes the output to the `block_weights.rs` and `extrinsics_weights.rs` files. You can use command-line options to adjust the calculated weight by adding units or by multiplying the average execution time by some factor.\n\nTo measure the storage execution time for the Substrate development chain specification, you can run the following command:\n\n    ./target/release/node-template benchmark storage --state-version 1\n\nThe command displays output similar to the following:\n\n    Warmup round 1/1    \n    Preparing keys from block BlockId::Number(0)    \n    Reading 36 keys    \n    Time summary [ns]:\n    \tTotal: 478367\n    \tMin: 8889, Max: 32258\n    \tAverage: 13287, Median: 12580, Stddev: 4189.73\n    \tPercentiles 99th, 95th, 75th: 32258, 21863, 14563\n    Value size summary:\n    \tTotal: 157217\n    \tMin: 1, Max: 155944\n    \tAverage: 4367, Median: 16, Stddev: 25621.19\n    \tPercentiles 99th, 95th, 75th: 155944, 82, 80    \n    Warmup round 1/1    \n    Preparing keys from block BlockId::Number(0)    \n    Writing 36 keys    \n    Time summary [ns]:\n    \tTotal: 1877401\n    \tMin: 13476, Max: 665226\n    \tAverage: 52150, Median: 25740, Stddev: 111805.24\n    \tPercentiles 99th, 95th, 75th: 665226, 252697, 30427\n    Value size summary:\n    \tTotal: 157217\n    \tMin: 1, Max: 155944\n    \tAverage: 4367, Median: 16, Stddev: 25621.19\n    \tPercentiles 99th, 95th, 75th: 155944, 82, 80    \n    Writing weights to \"rocksdb_weights.rs\"\n\nTo get benchmarking information for the `paritydb` database instead of the default `rocksdb` database, use the `--db paritydb` command-line option. TO get storage benchmarking information for Polkadot or any other real chain snapshot, use the command-line option `--state-version 0`. For more information about using the benchmark storage subcommand, see [benchmark storage command](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/utils/frame/benchmarking-cli/src/storage)\n.\n\nFor more information about how to add benchmarking to the runtime, see [Benchmark](/test/benchmark/)\n and [Add benchmarks](/reference/how-to-guides/weights/add-benchmarks/)\n.\n\n[](/reference/command-line-tools/node-template/#build-spec)\nbuild-spec\n----------------------------------------------------------------------\n\nUse the `node-template build-spec` command to create a chain specification file for your runtime.\n\n#### Basic command usage\n\n    node-template build-spec [flags] [options]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template build-spec` command.\n\n| Flag | Description |\n| --- | --- |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-default-bootnode` | Disables adding the default boot node to the specification. By default, the `/ip4/127.0.0.1/tcp/30333/p2p/NODE_PEER_ID` boot node is added to the specification when no boot node exists. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `--raw` | Formats the chain specification as raw genesis storage output. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template build-spec` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--node-key <key>` | Specifies the secret key to use for `libp2p` networking. The value is a string that is parsed based on the `--node-key-type`. For example, if the node key type is `ed25519`, the node key is parsed as a hex-encoded Ed25519 32-byte secret key (64 hex characters). The value of this option takes precedence over `--node-key-file`. Note that secrets provided as command-line arguments are easily exposed. You should only use this option for development and testing. To use an externally managed secret key, use the `--node-key-file` option. |\n| `--node-key-file <file>` | Specifies the file that contains the secret key for a node to use for `libp2p` networking. The contents of the file are parsed based on the `--node-key-type`. For example, if the node key type is `ed25519`, the file must contain an unencoded 32-byte or hex-encoded Ed25519 secret key. If the file does not exist, it is created with a newly generated secret key of the type you specify using the `--node-key-type` option. |\n| `--node-key-type <type>` | Specifies the type of secret key to use for peer-to-peer (`libp2p`) networking. You can specify the secret key on the command-line using the `--node-key` option, read the key from a file using the `--node-key-file` option, or read the key from a file specified in the chain-specific `config` directory inside the base directory specified by the `--base-dir` option. If this file does not exist, it is created with a newly-generated secret key of the chosen type. The node's secret key determines the public key\u2014the peer identifier\u2014that is used to communicate with the node using the `libp2p` library. The default type is Ed25519. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n\n#### Examples\n\nTo export the predefined `local` chain specification to a file named `customSpec.json`, you can run the following command:\n\n    ./target/release/node-template build-spec --chain local > customSpec.json\n\nIf you have previously created a JSON file that contains a custom chain specification, you can specify the path to that file and use the `--raw` command-line option to export the chain specification with encoded storage keys that the node uses to reference the data in its local storage.\n\n    ./target/release/node-template build-spec --chain ./my-test-chain.json --raw\n\n[](/reference/command-line-tools/node-template/#check-block)\ncheck-block\n------------------------------------------------------------------------\n\nUse the `node-template check-block` command to validate a specific block. You must specify the block to validate by the block hash or block number.\n\n#### Basic command usage\n\n    node-template check-block [flags] [options] <block-identifier>\n\n#### Flags\n\nYou can use the following optional flags with the `node-template check-block` command.\n\n| Flag | Description |\n| --- | --- |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `--storage-chain` | Changes the storage format for blocks. If you specify this option, each transaction is stored separately in the transaction database column and is only referenced by its hash in the block body column. |\n| `--unsafe-pruning` | Forces the node to start with pruning enabled. By default, validator nodes have state pruning disabled. To start a validator node with pruning enabled\u2014also referred to as archive mode\u2014you must set this option. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template check-block` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--database <database>` | Selects the database backend to use. Valid values are `rocksdb`, `paritydb-experimental`, or `auto`. |\n| `--db-cache <MiB>` | Limits how much memory the database cache can use. The default is 128 MiB. |\n| `--default-heap-pages <count>` | Specifies the default number of 64KB pages to allocate for Wasm execution. You should not use this option unless you know what you're doing. |\n| `--execution <strategy>` | Determines the execution strategy used by all execution contexts. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-block-construction <strategy>` | Determines the execution strategy used when calling into the runtime to construct blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-import-block <strategy>` | Determines the execution strategy used when calling into the runtime to import blocks, including locally authored blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-offchain-worker <strategy>` | Determines the execution strategy used when calling into the runtime to use an offchain worker. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-other <strategy>` | Determines the execution strategy used when calling into the runtime for operations other than synchronizing, importing, or constructing blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-syncing <strategy>` | Determines the execution strategy used when calling into the runtime to synchronize blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--keep-blocks <count>` | Specifies the number of finalized blocks to keep in the database. The default is to keep all blocks. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--pruning <pruning-mode>` | Specifies the maximum number of block states to keep or `archive` to keep all block states. If the node is running as a validator, the default is to keep all block states. If the node does not run as a validator, only state for the last 256 blocks is kept. |\n| `--state-cache-size <bytes>` | Specifies the state cache size. The default is 67108864 bytes. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n| `--wasm-execution <method>` | Specifies the method for executing Wasm runtime code. Valid values are `interpreted`, or `compiled`. The default is `Compiled`. |\n| `--wasm-runtime-overrides <path>` | Specifies the path where local WASM runtimes are stored. If you set this option, the node uses the local runtime instead of the on-chain runtime if the runtime versions are the same. |\n\n#### Arguments\n\nYou must specify the following command-line argument when you run the `node-template check-block` command.\n\n| Argument | Description |\n| --- | --- |\n| `block-identifier` | Specifies the block hash or block number to check. |\n\n[](/reference/command-line-tools/node-template/#export-blocks)\nexport-blocks\n----------------------------------------------------------------------------\n\nUse the `node-template export-blocks` command to export blocks.\n\n#### Basic command usage\n\n    node-template export-blocks [flags] [options] [--] [output]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template export-blocks` command.\n\n| Flag | Description |\n| --- | --- |\n| `--binary` | Exports blocks as binary output rather than to a JSON file. |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `--storage-chain` | Changes the storage format for blocks. If you specify this option, each transaction is stored separately in the transaction database column and is only referenced by its hash in the block body column. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template export-blocks` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--database <database>` | Selects the database backend to use. Valid values are `rocksdb`, `paritydb-experimental`, or `auto`. |\n| `--db-cache <MiB>` | Limits how much memory the database cache can use. The default is 128 MiB. |\n| `--from <block>` | Specifies the block number to start exporting from. The default is the first block (1). |\n| `--keep-blocks <count>` | Specifies the number of finalized blocks to keep in the database. The default is to keep all blocks. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--pruning <pruning-mode>` | Specifies the maximum number of block states to keep or `archive` to keep all block states. If the node is running as a validator, the default is to keep all block states. If the node does not run as a validator, only state for the last 256 blocks is kept. |\n| `--to <block>` | Specifies the last block number to export. The default is the best block. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n\n#### Arguments\n\nYou can specify the following command-line argument when you run the `node-template export-blocks` command.\n\n| Argument | Description |\n| --- | --- |\n| `<output>` | Specifies the output file name for the exported blocks. If you don't specify an output file name, blocks are exported to standard output (`stdout`). |\n\n[](/reference/command-line-tools/node-template/#export-state)\nexport-state\n--------------------------------------------------------------------------\n\nUse the `node-template export-state` command to export the state of a given block into a chain specification.\n\n#### Basic command usage\n\n    node-template export-state [flags] [options] [--] [block-identifier]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template export-state` command.\n\n| Flag | Description |\n| --- | --- |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template export-state` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--keep-blocks <count>` | Specifies the number of finalized blocks to keep in the database. The default is to keep all blocks. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--pruning <pruning-mode>` | Specifies the maximum number of block states to keep or `archive` to keep all block states. If the node is running as a validator, the default is to keep all block states. If the node does not run as a validator, only state for the last 256 blocks is kept. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n\n#### Arguments\n\nYou can specify the following command-line argument when you run the `node-template export-state` command.\n\n| Argument | Description |\n| --- | --- |\n| `<block-identifier>` | Specifies the block hash or block number to export. |\n\n[](/reference/command-line-tools/node-template/#help)\nhelp\n----------------------------------------------------------\n\nUse the `node-template help` command to display usage information for `node-template` or a summary of command-line usage information for any `node-template` subcommand.\n\n#### Basic command usage\n\n    node-template help [subcommand]\n\n#### Examples\n\nTo display a summary of usage information for the `export-blocks` subcommand, run the following command:\n\n    node-template help export-blocks\n\n[](/reference/command-line-tools/node-template/#import-blocks)\nimport-blocks\n----------------------------------------------------------------------------\n\nUse the `node-template import-blocks` command to import blocks.\n\n#### Basic command usage\n\n    node-template import-blocks [flags] [options] [--] [input]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template import-blocks` command.\n\n| Flag | Description |\n| --- | --- |\n| `--binary` | Attempts to import blocks in binary format rather than from a JSON file. |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `--storage-chain` | Changes the storage format for blocks. If you specify this option, each transaction is stored separately in the transaction database column and is only referenced by its hash in the block body column. |\n| `--unsafe-pruning` | Forces the node to start with pruning enabled. By default, validator nodes have state pruning disabled. To start a validator node with pruning enabled\u2014also referred to as archive mode\u2014you must set this option. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template import-blocks` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--database <database>` | Selects the database backend to use. Valid values are `rocksdb`, `paritydb-experimental`, or `auto`. |\n| `--db-cache <MiB>` | Limits how much memory the database cache can use. The default is 128 MiB. |\n| `--default-heap-pages <count>` | Specifies the default number of 64KB pages to allocate for Wasm execution. In most cases, you should not use this option. |\n| `--execution <strategy>` | Determines the execution strategy used by all execution contexts. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-block-construction <strategy>` | Determines the execution strategy used when calling into the runtime to construct blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-import-block <strategy>` | Determines the execution strategy used when calling into the runtime to import blocks, including locally authored blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-offchain-worker <strategy>` | Determines the execution strategy used when calling into the runtime to use an offchain worker. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-other <strategy>` | Determines the execution strategy used when calling into the runtime for operations other than synchronizing, importing, or constructing blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--execution-syncing <strategy>` | Determines the execution strategy used when calling into the runtime to synchronize blocks. Valid values are `Native`, `Wasm`, `Both`, or `NativeElseWasm`. |\n| `--keep-blocks <count>` | Specifies the number of finalized blocks to keep in the database. The default is to keep all blocks. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--pruning <pruning-mode>` | Specifies the maximum number of block states to keep or `archive` to keep all block states. If the node is running as a validator, the default is to keep all block states. If the node does not run as a validator, only state for the last 256 blocks is kept. |\n| `--state-cache-size <bytes>` | Specifies the state cache size. The default is 67108864 bytes. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n| `--wasm-execution <method>` | Specifies the method for executing Wasm runtime code. Valid values are `interpreted`, or `compiled`. The default is `Compiled`. |\n| `--wasm-runtime-overrides <path>` | Specifies the path where local WASM runtimes are stored. If you set this option, the node uses the local runtime instead of the on-chain runtime if the runtime versions are the same. |\n\n#### Arguments\n\nYou can specify the following command-line argument when you run the `node-template import-blocks` command.\n\n| Argument | Description |\n| --- | --- |\n| `<input>` | Specifies the input file to use for importing blocks. If you don't specify an input file, blocks are imported from standard input (`stdin`). |\n\n[](/reference/command-line-tools/node-template/#key)\nkey\n--------------------------------------------------------\n\nUse the `node-template key` command to generate, inspect, and manage private and public key pairs and addresses. The `node-template key` command provides convenient access to a subset of key management services that are available in the standalone `subkey` program. For complete details about the subcommands and command-line options for most `node-template key` subcommands, see [`subkey`](/reference/command-line-tools/subkey/)\n. Although most of the `node-template key` subcommands are identical to \\[`subkey`\\] subcommands, the `node-template key insert` subcommand is not a supported \\[`subkey`\\] subcommand. The `node-template key insert` subcommand enables you to add generated keys directly to a node keystore. For information about the command-line options and arguments to use with the `node-template key insert` subcommand, see [Insert a key on a node](/reference/command-line-tools/node-template/#node-key-insert)\n or run the following command:\n\n    node-template key insert --help\n\n#### Basic command usage\n\n    node-template key [subcommand] [flags]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template key` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Subcommands\n\nYou can use the following subcommands with the `node-template key` command.\n\n| Command | Description |\n| --- | --- |\n| [`generate`](/reference/command-line-tools/subkey/#subkey-generate) | Generates a random account key. |\n| [`generate-node-key`](/reference/command-line-tools/subkey/#subkey-generate-node-key) | Generates a random node `libp2p` secret key. |\n| [`help`](/reference/command-line-tools/subkey/#subkey-help) | Displays usage information for a specified subcommand. |\n| [`insert`](/reference/command-line-tools/node-template/#node-key-insert) | Adds an account or node key to the keystore on the local node. |\n| [`inspect`](/reference/command-line-tools/subkey/#subkey-inspect) | Displays the public key and SS58 address for the secret URI you specify. |\n| [`inspect-node-key`](/reference/command-line-tools/subkey/#subkey-inspect-node-key) | Displays the peer ID that corresponds with the secret node key in the file name you specify. |\n\n### [](/reference/command-line-tools/node-template/#insert-a-key-on-a-node)\nInsert a key on a node\n\nUse the `node-template key insert` command to add the keys used for performing node operations to the node keystore. For example, keys are required to secure peer-to-peer communication between nodes and to enable nodes to act as validating authorities for consensus.\n\n#### Basic command usage\n\n    node-template key insert [FLAGS] [OPTIONS] --key-type <key-type> --scheme <SCHEME>\n\n#### Flags\n\nYou can use the following optional flags with the `node-template key insert` command.\n\n| Flag | Description |\n| --- | --- |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `--password-interactive` | Displays an interactive prompt for you to enter the password in the terminal shell to access the keystore. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template key insert` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--key-type <key-type>` | Specifies the type of node activity the key authorizes. For example, valid key types include `aura` to authorize a node to produce blocks, `gran` to authorize a node to finalize blocks, and `imon` to send a heartbeat transaction that signals the node is online. |\n| `--keystore-path <path>` | Specifies the path to a custom keystore. |\n| `--keystore-uri <keystore-uri>` | Specifies custom URIs to connect to for keystore services. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--password <password>` | Enables you to add an extra user-defined secret to the secret key required by the keystore. |\n| `--password-filename <path>` | Specifies the file that contains the password used to access the keystore. |\n| `--scheme <scheme>` | Specifies the cryptography scheme to use to generate the key out of the given URI. Valid values are `Ed25519`, `Sr25519`, or `Ecdsa`. |\n| `--suri <suri>` | Specifies the secret key URI. If you specify a file for this option, the file content is used as the URI. If you don't specify this option, you are prompted to specify the URI. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n\n[](/reference/command-line-tools/node-template/#purge-chain)\npurge-chain\n------------------------------------------------------------------------\n\nUse the `node-template purge-chain` command to remove a blockchain and all blockchain-related information.\n\n#### Basic command usage\n\n    node-template purge-chain [flags] [options]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template purge-chain` command.\n\n| Flag | Description |\n| --- | --- |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `--storage-chain` | Changes the storage format for blocks. If you specify this option, each transaction is stored separately in the transaction database column and is only referenced by its hash in the block body column. |\n\n| `-V`, `--version` | Displays version information. `-y` | Provides a preemptive `yes` response to skip the interactive prompt to confirm that you want to remove the chain.\n\n#### Options\n\nYou can use the following command-line options with the `node-template purge-chain` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--database <database>` | Selects the database backend to use. Valid values are `rocksdb`, `paritydb-experimental`, or `auto`. |\n| `--db-cache <MiB>` | Limits how much memory the database cache can use. The default is 128 MiB. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n\n[](/reference/command-line-tools/node-template/#revert)\nrevert\n--------------------------------------------------------------\n\nUse the `node-template revert` command to revert the chain to a previous state.\n\n#### Basic command usage\n\n    node-template revert [flags] [options] [--] [num]\n\n#### Flags\n\nYou can use the following optional flags with the `node-template revert` command.\n\n| Flag | Description |\n| --- | --- |\n| `--detailed-log-output` | Enables detailed log output, including the log target name, the log level, and the thread name. This option is used automatically if you enable a logging level any higher level than `info`. |\n| `--dev` | Starts the node in development mode. Using this flag also enables the `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags by default. |\n| `--disable-log-color` | Disables log color output. |\n| `--enable-log-reloading` | Enables the log filter to be dynamically updated and reloaded. Note that this option can significantly decrease performance. Setting this option does not affect the `system_addLogFilter` and `system_resetLogFilter` RPC methods. |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `node-template rever` command.\n\n| Option | Description |\n| --- | --- |\n| `-d`, `--base-path <path>` | Specifies a custom base path. |\n| `--chain <chain-specification>` | Specifies the chain specification to use. You can set this option using a predefined chain specification name, such as `dev`, `local`, or `staging`or you can specify the path to a file that contains the chain specification, for example, the chain specification generated by using the `build-spec` subcommand. |\n| `--keep-blocks <count>` | Specifies the number of finalized blocks to keep in the database. The default is to keep all blocks. |\n| `-l`, `--log <log-pattern>...` | Sets a custom logging filter. The syntax to use is `<log-target>=<level>`, for example `-lsync=debug`. The valid log levels from least to most verbose are `error`, `warn`, `info`, `debug`, and `trace`. By default, all targets log `info` level messages. You can set the global log level with `-l<level>`. |\n| `--pruning <pruning-mode>` | Specifies the maximum number of block states to keep or `archive` to keep all block states. If the node is running as a validator, the default is to keep all block states. If the node does not run as a validator, only state for the last 256 blocks is kept. |\n| `--tracing-receiver <receiver>` | Specifies the receiver to process tracing messages. The default is Log. |\n| `--tracing-targets <targets>` | Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`. |\n\n#### Arguments\n\nYou can use the following command-line argument with the `node-template revert` command.\n\n| Argument | Description |\n| --- | --- |\n| `<num>` | Specifies the number of blocks to revert. The default is 256 blocks. |\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/reference/command-line-tools/memory-profiler/)\n[Next \u2192](/reference/command-line-tools/polkadot-apps/)\n\nON THIS PAGE\n\n[Basic command usage](#basic-command-usage)\n[benchmark](#benchmark)\n[build-spec](#build-spec)\n[check-block](#check-block)\n[export-blocks](#export-blocks)\n[export-state](#export-state)\n[help](#help)\n[import-blocks](#import-blocks)\n[key](#key)\n[purge-chain](#purge-chain)\n[revert](#revert)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/subkey/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nSubkey\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/subkey.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nsubkey\n======\n\nThe `subkey` program is a key generation and management utility that is included in the Substrate repository. You can use the `subkey` program to perform the following tasks:\n\n*   Generate and inspect cryptographically-secure public and private key pairs.\n*   Restore keys from secret phrases and raw seeds.\n*   Sign and verify signatures on messages.\n*   Sign and verify signatures for encoded transactions.\n*   Derive hierarchical deterministic child key pairs.\n\n[](/reference/command-line-tools/subkey/#signature-schemes)\nSignature schemes\n-----------------------------------------------------------------------------\n\nThe `subkey` program currently supporting the following signature schemes:\n\n*   [sr25519](https://wiki.polkadot.network/docs/en/learn-cryptography)\n    : Schorr signatures on the Ristretto group.\n*   [ed25519](https://en.wikipedia.org/wiki/EdDSA#Ed25519)\n    : SHA-512 (SHA-2) on Curve25519.\n*   [secp256k1](https://en.bitcoin.it/wiki/Secp256k1)\n    : ECDSA signatures on secp256k1.\n\nIn Substrate-based networks, the `sr25519` encoded keys are used to produce SS58 addresses as the public keys for interacting with the blockchain.\n\n[](/reference/command-line-tools/subkey/#installation)\nInstallation\n-------------------------------------------------------------------\n\nYou can download, install, and compile `subkey` using `cargo` without cloning the full Substrate repository. However, you must add Substrate build dependencies to your environment before you can install `subkey` as a standalone binary. To ensure dependencies are available, you can build the `subkey` binary from a clone of the Substrate repository.\n\nTo install and compile the `subkey` program:\n\n1.  Open a terminal shell, if necessary.\n2.  Verify that you have the Rust compiler and toolchain, if necessary.\n3.  Clone the Substrate repository, if necessary, by running the following command:\n    \n        git clone https://github.com/paritytech/polkadot-sdk.git\n    \n4.  Change to the root directory of the Substrate repository by running the following command:\n    \n        cd substrate\n    \n5.  Compile the `subkey` program using the `nightly` toolchain by running the following command:\n    \n        cargo +nightly build --package subkey --release\n    \n    Because of the number of packages involved, compiling the program can take several minutes.\n    \n6.  Verify that the `subkey` program is ready to use and view information about the options available by running the following command:\n    \n        ./target/release/subkey --help\n    \n\n[](/reference/command-line-tools/subkey/#hierarchical-deterministic-keys)\nHierarchical deterministic keys\n---------------------------------------------------------------------------------------------------------\n\nThe `subkey` program supports hierarchical deterministic keys. Hierarchical deterministic (HD) keys enable you to use a parent seed to derive child key pairs in a hierarchical tree structure. In this hierarchical structure, each child derived from a parent has its own key pair. The derived keys can also be used to derive additional child key pairs, similar to how a file system can have nested directories in a hierarchical directory structure. For background information about how hierarchical deterministic keys are derived, see the [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n specification for hierarchical deterministic wallets.\n\nFor information about deriving hierarchical deterministic keys using subkey commands, see [Working with derived keys](/reference/command-line-tools/subkey/#working-with-derived-keys)\n.\n\n[](/reference/command-line-tools/subkey/#basic-command-usage)\nBasic command usage\n---------------------------------------------------------------------------------\n\nThe basic syntax for running `subkey` commands is:\n\n    subkey [subcommand] [flag]\n\nDepending on the subcommand you specify, additional arguments, options, and flags might apply or be required. To view usage information for a specific `subkey` subcommand, specify the subcommand and the `--help` flag. For example, to see usage information for `subkey inspect`, you can run the following command:\n\n    subkey inspect --help\n\n### [](/reference/command-line-tools/subkey/#flags)\nFlags\n\nYou can use the following optional flags with the `subkey` command.\n\n| Flag | Description |\n| --- | --- |\n| \\-h, --help | Displays usage information. |\n| \\-V, --version | Displays version information. |\n\n### [](/reference/command-line-tools/subkey/#subcommands)\nSubcommands\n\nYou can use the following subcommands with the `subkey` command. For reference information and examples that illustrate using subkey subcommands, select an appropriate command.\n\n| Command | Description |\n| --- | --- |\n| [`generate`](/reference/command-line-tools/subkey/#subkey-generate) | Generates a random account key. |\n| [`generate-node-key`](/reference/command-line-tools/subkey/#subkey-generate-node-key) | Generates a random node `libp2p` secret key. You can save the secret key to a file or display it as standard output (`stdout`). |\n| [`help`](/reference/command-line-tools/subkey/#subkey-help) | Displays usage information for `subkey` or for a specified subcommand. |\n| [`inspect`](/reference/command-line-tools/subkey/#subkey-inspect) | Displays the public key and SS58 address for the secret URI you specify. |\n| [`inspect-node-key`](/reference/command-line-tools/subkey/#subkey-inspect-node-key) | Displays the peer ID that corresponds with the secret node key in the file name you specify. |\n| [`sign`](/reference/command-line-tools/subkey/#subkey-sign) | Signs a message with the secret key you specify. |\n| [`vanity`](/reference/command-line-tools/subkey/#subkey-vanity) | Generates a seed that provides a vanity address. |\n| [`verify`](/reference/command-line-tools/subkey/#subkey-verify) | Verifies the signature for a message is valid for the public or secret key you specify. |\n\n### [](/reference/command-line-tools/subkey/#output)\nOutput\n\nDepending on the subcommand you specify, the output from the subkey program displays some or all of the following information:\n\n| This field | Contains |\n| --- | --- |\n| Secret phrase | A series of English words that encodes the secret key in a human-friendly way. This series of words\u2014also referred to as a mnemonic phrase or seed phrase\u2014can be used to recover a secret key if the correct set of words are provided in the correct order. |\n| Secret Seed | The minimum information necessary to restore a key pair. The secret seed is also sometimes referred to as a private key or raw seed. All other information is calculated from this value. |\n| Public Key (hex) | The public half of the cryptographic key pair in hexadecimal format. |\n| Public Key (SS58) | The public half of the cryptographic key pair in SS58 encoding. |\n| Account ID | An alias for the public key in hexadecimal format. |\n| SS58 Address | An SS58-encoded public address based on the public key. |\n\n### [](/reference/command-line-tools/subkey/#examples)\nExamples\n\nTo display version information for the `subkey` program, run the following command:\n\n    subkey --version\n\nTo display usage information for the `subkey verify` command, run the following command:\n\n    subkey verify --help\n\n[](/reference/command-line-tools/subkey/#subkey-generate)\nsubkey generate\n-------------------------------------------------------------------------\n\nUse the `subkey generate` command to generate public and private keys and account addresses. You can use command-line options to generate keys with different signature schemes or mnemonic phrases with more or fewer words.\n\n#### Basic usage\n\n    subkey generate [flags] [options]\n\n#### Flags\n\nYou can use the following optional flags with the `subkey generate` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `--password-interactive` | Enables you to enter the password for accessing the keystore interactively in the terminal. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subkey generate` command.\n\n| Option | Description |\n| --- | --- |\n| `--keystore-path <path>` | Specifies a custom keystore path. |\n| `--keystore-uri <keystore-uri>` | Specifies a custom URI to connect to for keystore services |\n| `-n`, `--network <network>` | Specifies the network address format to use. For example, `kusama` or `polkadot`. For a complete list of networks supported, see the online usage information. |\n| `--output-type <format>` | Specifies the output format to use. Valid values are Json and Text. The default output format is Text. |\n| `--password <password>` | Specifies the password used by the keystore. This option enables you to append an extra secret to the seed. |\n| `--password-filename <path>` | Specifies the name of a file that contains the password used by the keystore. |\n| `--scheme <scheme>` | Specifies the cryptographic scheme for the key you are generating. Valid values are `Ecdsa`, `Ed25519`, `Sr25519`. The default scheme is `Sr25519`. |\n| `-w`, `--words <words>` | Specifies the number of words in the secret phrase for the key you are generating. Valid values are 12, 15, 18, 21, 24. By default, the secret phrase consists of 12 words. |\n\n#### Examples\n\nTo generate a new key pair that uses the sr25519 signature scheme, run the following command:\n\n    subkey generate\n\nThe command displays output similar to the following with a 12-word secret phrase:\n\n    Secret phrase:       bread tongue spell stadium clean grief coin rent spend total practice document\n      Secret seed:       0xd5836897dc77e6c87e5cc268abaaa9c661bcf19aea9f0f50a1e149d21ce31eb7\n      Public key (hex):  0xb6a8b4b6bf796991065035093d3265e314c3fe89e75ccb623985e57b0c2e0c30\n      Account ID:        0xb6a8b4b6bf796991065035093d3265e314c3fe89e75ccb623985e57b0c2e0c30\n      Public key (SS58): 5GCCgshTQCfGkXy6kAkFDW1TZXAdsbCNZJ9Uz2c7ViBnwcVg\n      SS58 Address:      5GCCgshTQCfGkXy6kAkFDW1TZXAdsbCNZJ9Uz2c7ViBnwcVg\n\nThe `subkey` program encodes the address associated with a public/private key pair differently depending on the format required for the network where it is used. If you want to use the **same private key** on the Kusama and Polkadot networks, you can use the `--network` option to generate the separate address formats for the Kusama and Polkadot networks. The public key is the same, but the address formats are network-specific. To generate a key pair for a specific network, run a command similar to the following:\n\n    subkey generate --network picasso\n\nThe command displays the same fields as output, but uses the address format for the network you specify.\n\nTo generate a more secure key pair that uses the `ed25519` signature scheme and an 24-word secret phrase for the `moonriver` network, you would run the following command:\n\n    subkey generate --scheme ed25519 --words 24 --network moonriver\n\nThe command displays the same fields as output, but uses the Ed25519 signature scheme, a 24-word secret phrase, and the address format for the `moonriver` network.\n\n    Secret phrase:       cloth elevator sadness twice arctic adjust axis vendor grant angle face section key safe under fee fine garage pupil hotel museum valve popular motor\n      Secret seed:       0x5fa5923c1d6753fa30f268ffd363efb730ca0db906f55bc17efe65cd24f92097\n      Public key (hex):  0x3f1da4d35489e3d84739de1490f51b567ad2a62793cca1357e624fbfa534fc85\n      Account ID:        0x3f1da4d35489e3d84739de1490f51b567ad2a62793cca1357e624fbfa534fc85\n      Public key (SS58): VkFLVqcighJnssSbL4LDSGy5ShJQZvYhm7G8K8W1ZXt96Z5VG\n      SS58 Address:      VkFLVqcighJnssSbL4LDSGy5ShJQZvYhm7G8K8W1ZXt96Z5VG\n\nTo generate a key that is password-protected, run the `subkey generate` command using the `--password <password>` option. For example:\n\n    subkey generate --password \"pencil laptop kitchen cutter\"\n\nAfter you generate a key that requires a password, you can retrieve it by including the `--password` option and password string in the command line or by adding three slashes (`///`) at the end of the secret phrase. Remember that it is important to keep passwords, secret phrases, and secret seeds secure and to back them up in a secure location.\n\n[](/reference/command-line-tools/subkey/#subkey-generate-node-key)\nsubkey generate-node-key\n-------------------------------------------------------------------------------------------\n\nUse the `subkey generate-node-key` command to generate random public and private keys for peer-to-peer (`libp2p`) communication between Substrate nodes. The public key is the peer identifier that is used in chain specification files or as a command-line argument to identify a node participating in the blockchain network. In most cases, you run this command with a command-line option to save the private key to a file.\n\n#### Basic usage\n\n    subkey generate-node-key [flags] [options]\n\n#### Flags\n\nYou can use the following optional flags with the `subkey generate-node-key` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line option with the `subkey generate-node-key` command.\n\n| Option | Description |\n| --- | --- |\n| `--file <file-name>` | Specifies the file location you want to use to save the secret key generated for the local node. If you don't specify this option, the generated keys are displayed as standard output (`stdout`). |\n\n#### Examples\n\nTo generate a random key pair for peer-to-peer communication and save the secret key in a file, run a command similar to the following:\n\n    subkey generate-node-key --file ../generated-node-key\n\nThis command displays the peer identifier for the node key in the terminal and the private key is saved in the `generated-node-key` file. In this example, the saved key in the parent directory instead of the current working directory.\n\n    12D3KooWHALHfL7dDBiGTt4JTEAvCbDWts8zHwvcPvJXDF9fxue7\n\n[](/reference/command-line-tools/subkey/#subkey-help)\nsubkey help\n-----------------------------------------------------------------\n\nUse the `subkey help` command to display usage message for `subkey` or for a specified subcommand.\n\n#### Basic usage\n\n    subkey help [subcommand]\n\n#### Examples\n\nTo display usage information for the `verify` subcommand, run the following command:\n\n    subkey help verify\n\n[](/reference/command-line-tools/subkey/#subkey-inspect)\nsubkey inspect\n-----------------------------------------------------------------------\n\nUse the `subkey inspect` command to recalculate the public key and public address for specified secret key or mnemonic phrase.\n\n#### Basic usage\n\n    subkey inspect [flags] [options] uri\n\n#### Flags\n\nYou can use the following optional flags with the `subkey inspect` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `--password-interactive` | Enables you to enter the password for accessing the keystore interactively in the terminal. |\n| `--public` | Indicates that the `uri` you specify to inspect is a hex-encoded public key. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subkey inspect` command.\n\n| Option | Description |\n| --- | --- |\n| `--keystore-path <path>` | Specifies a custom keystore path. |\n| `--keystore-uri <keystore-uri>` | Specifies a custom URI to connect to for keystore services. |\n| `-n`, `--network <network>` | Specifies the network address format to use. For example, `kusama` or `polkadot`. For a complete list of networks supported, see the online usage information. |\n| `--output-type <format>` | Specifies the output format to use. Valid values are Json and Text. The default output format is Text. |\n| `--password <password>` | Specifies the password used by the keystore. This option enables you to append an extra secret to the seed. |\n| `--password-filename <path>` | Specifies the name of a file that contains the password used by the keystore. |\n| `--scheme <scheme>` | Specifies the cryptographic scheme for the key you are inspecting. Valid values are `Ecdsa`, `Ed25519`, `Sr25519`. The default scheme is `Sr25519`. |\n\n#### Arguments\n\nYou must specify the following required argument with the `subkey inspect` command.\n\n| Argument | Description |\n| --- | --- |\n| `uri` | Specifies the key URI you want to inspect. You can specify the key using its secret phrase, secret seed (with derivation paths and password), SS58 address, public key, or hex-encoded public key. If you specify the `uri` using a hex-encoded public key, you must also include the `--public` flag on the command line. If you specify a file name for the `uri`, the file content is used as the URI. |\n\n#### Examples\n\nTo inspect the public keys derived from a mnemonic phrase, you can run a command similar to the following:\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very\"\n\nThe command displays output similar to the following:\n\n    Secret phrase `caution juice atom organ advance problem want pledge someone senior holiday very` is account:\n      Secret seed:       0xc8fa03532fb22ee1f7f6908b9c02b4e72483f0dbd66e4cd456b8f34c6230b849\n      Public key (hex):  0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n      Public key (SS58): 5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n      Account ID:        0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n      SS58 Address:      5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n\nTo inspect the public keys derived from a secret seed, you can run a command similar to the following:\n\n    subkey inspect 0xc8fa03532fb22ee1f7f6908b9c02b4e72483f0dbd66e4cd456b8f34c6230b849\n\nIf you store a secret phrase or secret seed in a text file\u2014for example, `my-secret-key`\u2014you can specify the file name on the command-line to pass the contents of the file and display the public keys associated with that secret phrase or secret seed. For example, you can run a command similar to the following:\n\n    subkey inspect my-secret-key\n\nTo inspect the public keys using a hex-encoded public key, you can run a command similar to the following:\n\n    subkey inspect --public 0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n\nIn this case, the command only displays public information similar to the following:\n\n    Network ID/version: substrate\n      Public key (hex):   0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n      Account ID:         0xd6a3105d6768e956e9e5d41050ac29843f98561410d3a47f9dd5b3b227ab8746\n      Public key (SS58):  5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n      SS58 Address:       5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n\nThe `subkey` program encodes the address associated with a public/private key pair differently depending on the format required for the network where it is used. If you use the **same private key** on the Kusama and Polkadot networks, you can use the `--network` option to inspect the address used for a specific network. The public key is the same, but the address format is network-specific. To inspect a key pair for a specific network, run a command similar to the following:\n\n    subkey inspect --network kusama \"caution juice atom organ advance problem want pledge someone senior holiday very\"\n\nIn the command output, the secret phrase, secret seed, and public keys are the same, but the address for the Kusama network is:\n\n      SS58 Address:      HRkCrbmke2XeabJ5fxJdgXWpBRPkXWfWHY8eTeCKwDdf4k6\n\nTo inspect the address for the same private key on the Polkadot network, you would run a command similar to the following:\n\n    subkey inspect --network polkadot \"caution juice atom organ advance problem want pledge someone senior holiday very\"\n\nIn the command output, the secret phrase, secret seed, and public keys are the same as the Kusama network, but the address for the Polkadot network is:\n\n      SS58 Address:      15rRgsWxz4H5LTnNGcCFsszfXD8oeAFd8QRsR6MbQE2f6XFF\n\nTo inspect password-protected keys by specifying the `--password` option and password, you can run a command similar to the following:\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very\" --password \"pencil laptop kitchen cutter\"\n\nIf you specify the `--password` option and password in the command line, the command output _does not_ display the password used.\n\n    Secret phrase `caution juice atom organ advance problem want pledge someone senior holiday very` is account:\n      Secret seed:       0xdfc5d5d5235a37fdc907ee1cb720299f96aeb02f9c7c2fcad7ee8c7bfbd2a4db\n      Public key (hex):  0xdef8f78b123475265815b65a7c55e105e1ab185f4969954f68d92b7bb67a1045\n      Public key (SS58): 5H74SqH1iQCWh5Gumyghh1WJMcmM6TdBHYSK7mKVJbv9NuSK\n      Account ID:        0xdef8f78b123475265815b65a7c55e105e1ab185f4969954f68d92b7bb67a1045\n      SS58 Address:      5H74SqH1iQCWh5Gumyghh1WJMcmM6TdBHYSK7mKVJbv9NuSK\n\nYou can also inspect password-protected keys by adding `///` and the password to the secret phrase. For example, you can run a command similar to the following:\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very///pencil laptop kitchen cutter\"\n\nIn this case, the command output displays the password used. For example:\n\n    Secret Key URI `caution juice atom organ advance problem want pledge someone senior holiday very///pencil laptop kitchen cutter` is account:\n      Secret seed:       0xdfc5d5d5235a37fdc907ee1cb720299f96aeb02f9c7c2fcad7ee8c7bfbd2a4db\n      Public key (hex):  0xdef8f78b123475265815b65a7c55e105e1ab185f4969954f68d92b7bb67a1045\n      Public key (SS58): 5H74SqH1iQCWh5Gumyghh1WJMcmM6TdBHYSK7mKVJbv9NuSK\n      Account ID:        0xdef8f78b123475265815b65a7c55e105e1ab185f4969954f68d92b7bb67a1045\n      SS58 Address:      5H74SqH1iQCWh5Gumyghh1WJMcmM6TdBHYSK7mKVJbv9NuSK\n\n[](/reference/command-line-tools/subkey/#subkey-inspect-node-key)\nsubkey inspect-node-key\n-----------------------------------------------------------------------------------------\n\nUse the `subkey inspect-node-key` command to display the peer identifier for the node that corresponds with the node key in the specified file name. Before using this command, you should have previously used the [`subkey generate-node-key`](/reference/command-line-tools/subkey/#subkey-generate-node-key)\n command and saved the key to a file.\n\n#### Basic usage\n\n    subkey inspect-node-key [flags] [options] --file <file-name>\n\n#### Flags\n\nYou can use the following optional flags with the `subkey inspect-node-key` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line option with the `subkey inspect-node-key` command.\n\n| Option | Description |\n| --- | --- |\n| `-n, --network <network>` | Specifies the network address format to use. For example, `kusama` or `polkadot`. For a complete list of networks supported, see the online usage information. |\n\n#### Arguments\n\nYou must specify the following required argument with the `subkey inspect-node-key` command.\n\n| Argument | Description |\n| --- | --- |\n| `--file <file-name>` | Specifies the file that contains the secret key generated for the peer-to-peer communication with a node. |\n\n[](/reference/command-line-tools/subkey/#subkey-sign)\nsubkey sign\n-----------------------------------------------------------------\n\nUse the `subkey sign` command to sign a message by passing the message as standard input (`stdin`). You can sign messages using your secret seed or secret phrase.\n\n#### Basic usage\n\n    subkey sign [flags] [options]\n\n#### Flags\n\nYou can use the following optional flags with the `subkey sign` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `--hex` | Indicates that the message you specify as standard input is a hex-encoded message. |\n| `--password-interactive` | Enables you to enter the password for accessing the keystore interactively in the terminal. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subkey sign` command.\n\n| Option | Description |\n| --- | --- |\n| `--keystore-path <path>` | Specifies a custom keystore path. |\n| `--keystore-uri <keystore-uri>` | Specifies a custom URI to connect to for keystore services. |\n| `--message <network>` | Specifies the message string to sign. |\n| `--password <password>` | Specifies the password used by the keystore. This option enables you to append an extra secret to the seed. |\n| `--password-filename <path>` | Specifies the name of a file that contains the password used by the keystore. |\n| `--scheme <scheme>` | Specifies the cryptographic signature scheme for the key. Valid values are `Ecdsa`, `Ed25519`, `Sr25519`. The default scheme is `Sr25519`. |\n| `--suri <secret-seed>` | Specifies the secret key URI you want to use to sign the message. You can specify the key using its secret phrase, secret seed (with derivation paths and password). If you specify a file name for the `--suri` option, the file content is used as the URI. If you omit this option, you are prompted for the URI. |\n\n#### Examples\n\nThe following example uses the `echo` command to pipe a test message as input to the `subkey sign` command. To sign a text message in a terminal, you can run a command similar to the following:\n\n    echo \"test message\" | subkey sign --suri 0xc8fa03532fb22ee1f7f6908b9c02b4e72483f0dbd66e4cd456b8f34c6230b849\n\nThe command output displays the signature for the message. For example:\n\n    f052504de653a5617c46eeb1daa73e2dbbf625b6bf8f16d9d8de6767bc40d91dfbd38c13207f8a03594221c9f68c00a158eb3120311b80ab2da563b82a995b86\n\nTo sign a hex-encoded message, run a command similar to the following:\n\n    subkey sign --hex --message 68656c6c6f2c20776f726c64 --suri 0xc8fa03532fb22ee1f7f6908b9c02b4e72483f0dbd66e4cd456b8f34c6230b849\n\nThe command output displays the signature for the message. For example:\n\n    9ae07defc0ddb752651836c25ac643fbdf9d45ba180ec6d09e4423ff6446487a52b609d69c06bd1c3ec09b3d06a43f019bacba12dc5a5697291c5e9faab13288\n\n[](/reference/command-line-tools/subkey/#subkey-vanity)\nsubkey vanity\n---------------------------------------------------------------------\n\nUse the `subkey vanity` command to create an address that contains a specified string pattern. This command does not generate a secret phrase for the custom address.\n\n#### Basic usage\n\n    subkey vanity [flags] [options] --pattern <pattern>\n\n#### Flags\n\nYou can use the following optional flags with the `subkey vanity` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subkey vanity` command.\n\n| Option | Description |\n| --- | --- |\n| `-n, --network <network>` | Specifies the network address format to use. For example, `kusama` or `polkadot`. For a complete list of networks supported, see the online usage information. |\n| `--output-type <format>` | Specifies the output format to use. Valid values are Json and Text. The default output format is Text. |\n| `--scheme <scheme>` | Specifies the cryptographic signature scheme for the key. Valid values are `Ecdsa`, `Ed25519`, `Sr25519`. The default scheme is `Sr25519`. |\n\n#### Arguments\n\nYou must specify the following required argument with the `subkey vanity` command.\n\n| Argument | Description |\n| --- | --- |\n| `--pattern <pattern>` | Specifies the string you want to include in the generated address. |\n\n#### Examples\n\nDepending on the pattern you specify, the `subkey vanity` command can take some time to search keystores and generate an address that contains the custom string. In general, you should use as few characters as possible for the `--pattern` and use the `--network` option to specify the network where you want to use the custom address,\n\nTo generate an address that contains a specific string, you can run a command similar to the following:\n\n    subkey vanity --network kusama --pattern DUNE\n\nThe command displays output similar to the following:\n\n    Generating key containing pattern 'DUNE'\n    100000 keys searched; best is 187/237 complete\n    200000 keys searched; best is 189/237 complete\n    300000 keys searched; best is 221/237 complete\n    400000 keys searched; best is 221/237 complete\n    500000 keys searched; best is 221/237 complete\n    600000 keys searched; best is 221/237 complete\n    best: 237 == top: 237\n    Secret Key URI `0x82737756075d15409053afd19a6b29ae2abeed96a3487d71d2af9b3eff19cbfa` is account:\n      Secret seed:       0x82737756075d15409053afd19a6b29ae2abeed96a3487d71d2af9b3eff19cbfa\n      Public key (hex):  0xe025cc93383436f61f067ff918ec632d0933c2d81da3bc1fbc27c9d33579bc40\n      Account ID:        0xe025cc93383436f61f067ff918ec632d0933c2d81da3bc1fbc27c9d33579bc40\n      Public key (SS58): HeDUNE7vd4cYtwHadXBWTgYrsKGQXZ5xFLVbgPVo71X1ccF\n      SS58 Address:      HeDUNE7vd4cYtwHadXBWTgYrsKGQXZ5xFLVbgPVo71X1ccF\n\nAfter the key pair is generated, the SS58 address and public key both contain the custom string `DUNE`.\n\n[](/reference/command-line-tools/subkey/#subkey-verify)\nsubkey verify\n---------------------------------------------------------------------\n\nUse the `subkey verify` command to verify the signature for a message using a public or secret key.\n\n#### Basic syntax\n\n    subkey verify [flags] [options] <signature> <uri>\n\n#### Flags\n\nYou can use the following optional flags with the `subkey verify` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h`, `--help` | Displays usage information. |\n| `--hex` | Indicates that the message you specify as standard input is a hex-encoded message. |\n| `-V`, `--version` | Displays version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subkey verify` command.\n\n| Option | Description |\n| --- | --- |\n| `--message <message>` | Specifies the message to verify. |\n| `--scheme <scheme>` | Specifies the cryptographic signature scheme for the key. Valid values are `Ecdsa`, `Ed25519`, `Sr25519`. The default scheme is `Sr25519`. |\n\n#### Arguments\n\nYou must specify the following required argument with the `subkey verify` command.\n\n| Argument | Description |\n| --- | --- |\n| `<signature>` | Specifies the hex-encoded signature to verify. |\n| `<uri>` | Specifies the public or secret key URI that you want to use to verify the message. If you specify a file name for the `uri`, the file content is used as the URI. If you omit this option, you are prompted for the URI. |\n\n#### Examples\n\nThe following example uses the `echo` command to pipe a test message as input to the `subkey verify` command.\n\n    echo \"test message\" | subkey verify f052504de653a5617c46eeb1daa73e2dbbf625b6bf8f16d9d8de6767bc40d91dfbd38c13207f8a03594221c9f68c00a158eb3120311b80ab2da563b82a995b86 5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n\nIf the message signature is verified, the command output confirms the signature, For example:\n\n    Signature verifies correctly.\n\nTo verify the signature for a hex-encoded message, run a command similar to the following:\n\n    subkey verify --hex --message 68656c6c6f2c20776f726c64 4e9d84c9d67241f916272c3f39cd145d847cfeed322b3a4fcba67e1113f8b21440396cb7624113c14af2cd76850fc8445ec538005d7d39ce664e5fb0d926a48f 5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR\n\nIf the message signature is verified, the command output confirms the signature, For example:\n\n    Signature verifies correctly.\n\n[](/reference/command-line-tools/subkey/#working-with-derived-keys)\nWorking with derived keys\n---------------------------------------------------------------------------------------------\n\nIn Substrate, hierarchical deterministic derived keys are classified as hard keys or as soft keys based on how they are derived. For example, hard keys can only be derived using the parent **private key** and a derivation path. The parent public key cannot be used to derive a hard key.\n\nSoft keys can be derived using either the parent private key or the parent **public key** and a derivation path. Because soft keys can be derived using the parent public key, they can be used to identify the parent key without exposing the parent seed. You can derive either hard keys or soft keys by using different syntax in `subkey` commands. You can then use the addresses associated with derived keys to sign messages with the same security as messages signed by their root key.\n\n### [](/reference/command-line-tools/subkey/#derive-a-hard-key)\nDerive a hard key\n\nTo derive a hard child key pair, you add two slashes (`//`), a derivation path, and an index after the secret phrase associated with its parent key. Because you derive child key pairs and addresses from keys that have been previously generated, you use the `subkey inspect` command. For example:\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very//derived-hard-key//0\"\n\nThe command displays output similar to the following:\n\n    Secret Key URI `caution juice atom organ advance problem want pledge someone senior holiday very//derived-hard-key//0` is account:\n      Secret seed:       0x667fe31c1d1d8f00811aa0163001b5b3055b26f11e82ae17e28668d0e08ced51\n      Public key (hex):  0xd61bbc562fc43d43d80a3372a25c52e4aa862bbfdbb4aa1a5ec86f042f787f24\n      Account ID:        0xd61bbc562fc43d43d80a3372a25c52e4aa862bbfdbb4aa1a5ec86f042f787f24\n      Public key (SS58): 5GuSLtVEbYgYT9Q78CX99RSSPuHjsAyAadwC1GmweDvTvFTZ\n      SS58 Address:      5GuSLtVEbYgYT9Q78CX99RSSPuHjsAyAadwC1GmweDvTvFTZ\n\n### [](/reference/command-line-tools/subkey/#derive-a-soft-key)\nDerive a soft key\n\nTo derive a soft child key pair from a parent private key, you add one slash (`/`), a derivation path, and an index after the secret phrase associated with the parent key. Because you are deriving a new key pair and address from a key that has been previously generated, you use the `subkey inspect` command. For example:\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very/derived-soft-key/0\"\n\nThe command displays output similar to the following:\n\n    Secret Key URI `caution juice atom organ advance problem want pledge someone senior holiday very/derived-soft-key/0` is account:\n      Secret seed:       n/a\n      Public key (hex):  0x8826cc3730441dc4b67ea118997780db878ce7848c1548a9d36624ca39cf7c2c\n      Account ID:        0x8826cc3730441dc4b67ea118997780db878ce7848c1548a9d36624ca39cf7c2c\n      Public key (SS58): 5F9DtrPk3SaFs6U6S8HxnuJcoQ2jF8Wdt3ygwbbBnbVcsdiC\n      SS58 Address:      5F9DtrPk3SaFs6U6S8HxnuJcoQ2jF8Wdt3ygwbbBnbVcsdiC\n\nTo derive a soft child key pair from a parent public key, you can use the public SS58 address instead of the secret phrase. Because you are deriving a soft key, you use a single slash (`/`) to delimit the derivation path and index fields. For example:\n\n    subkey inspect \"5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR/derived-public/0\"\n\nThe command displays output similar to the following:\n\n    Public Key URI `5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR/derived-public/0` is account:\n      Network ID/version: substrate\n      Public key (hex):   0xee3792a82ba43fc503bcbdabd7d090df71496a43928e25f87843f1d9d40e8a14\n      Account ID:         0xee3792a82ba43fc503bcbdabd7d090df71496a43928e25f87843f1d9d40e8a14\n      Public key (SS58):  5HT3mAg8NnpgeZFUsM9aUYVdS5iq6ZWVUoNcTDiuqVvjkgKR\n      SS58 Address:       5HT3mAg8NnpgeZFUsM9aUYVdS5iq6ZWVUoNcTDiuqVvjkgKR\n\nIf you use the same derivation path and index, the soft child key is the same whether you use the parent private key or parent public address. If you change either the derivation path\u2014for example, from `derived-soft-key` to `derived-public`\u2014or the index\u2014from `0` to `1`\u2014you derive different child keys with different addresses. For example:\n\n    subkey inspect \"5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR/derived-soft-key/1\"\n\nThe command displays output similar to the following:\n\n    Public Key URI `5Gv8YYFu8H1btvmrJy9FjjAWfb99wrhV3uhPFoNEr918utyR/derived-soft-key/1` is account:\n      Network ID/version: substrate\n      Public key (hex):   0x688d5a9761bc2705efd3ff0171a535e97de12aab59659177efae453873b18673\n      Account ID:         0x688d5a9761bc2705efd3ff0171a535e97de12aab59659177efae453873b18673\n      Public key (SS58):  5ERnpynLaQweDhrBQLe3vz8aWYodKYEeJ92xsbnpgG7GhHvo\n      SS58 Address:       5ERnpynLaQweDhrBQLe3vz8aWYodKYEeJ92xsbnpgG7GhHvo\n\n### [](/reference/command-line-tools/subkey/#combine-derivation-paths-and-passwords)\nCombine derivation paths and passwords\n\nNote that the secret seed _is not_ password protected by default. You can add a password as extra protection for your derived keys. However, the key pair that's derived from a secret seed is not the same as the key pair derived when you use a password. The same secret seed will derive different keys if you use a different derivation path or add a password. If you use a password to protect your key pair, both the secret seed phrase and the password will be required to recover the key pair.\n\nYou can derive a soft key as a child of a hard key. Doing so enables you to use the public address of the derived hard key\u2014with an optional password\u2014to derive new public addresses. For example, the following command derives a hard key (`//derived-hard-key`) with a soft key leaf (`/0`):\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very//derived-hard-key/0\"\n\nThe command displays output similar to the following:\n\n    Secret Key URI `caution juice atom organ advance problem want pledge someone senior holiday very//derived-hard-key/0` is account:\n      Secret seed:       n/a\n      Public key (hex):  0x525039c770a07a38d8dc066927ad1f0d2b2113f4bc890c4fd39a37d477d0d336\n      Account ID:        0x525039c770a07a38d8dc066927ad1f0d2b2113f4bc890c4fd39a37d477d0d336\n      Public key (SS58): 5DvdcfXQe2QcWHNZrUR5Bb2AJQ199BiNH5aHefE4kXSRP1VR\n      SS58 Address:      5DvdcfXQe2QcWHNZrUR5Bb2AJQ199BiNH5aHefE4kXSRP1VR\n\nTo protect the derived hard key, you can add your password to the end of the secret phrase:\n\n    subkey inspect \"caution juice atom organ advance problem want pledge someone senior holiday very//derived-hard-key/0///pencil laptop kitchen cutter\"\n\nThe command displays output similar to the following:\n\n    Secret Key URI `caution juice atom organ advance problem want pledge someone senior holiday very//derived-hard-key/0///pencil laptop kitchen cutter` is account:\n      Secret seed:       n/a\n      Public key (hex):  0x2efb74b4a21294f0031129a1d271c7be00171d207052af567fc76de03a81fe52\n      Account ID:        0x2efb74b4a21294f0031129a1d271c7be00171d207052af567fc76de03a81fe52\n      Public key (SS58): 5D8JkugWWMDmQ4h2yUuBLWwQXaBi2nBdiDmY4DR7hW76QmuW\n      SS58 Address:      5D8JkugWWMDmQ4h2yUuBLWwQXaBi2nBdiDmY4DR7hW76QmuW\n\nNotice that adding a password for the derived key generates a different public key for the same secret phrase. You can use this password-protected hard key to derive a soft key using the public address of the hard key. a hidden seed, hard key derivation path, and a password.\n\n    subkey inspect \"5D8JkugWWMDmQ4h2yUuBLWwQXaBi2nBdiDmY4DR7hW76QmuW/0\"\n\nThe command displays output similar to the following:\n\n    Public Key URI `5D8JkugWWMDmQ4h2yUuBLWwQXaBi2nBdiDmY4DR7hW76QmuW/0` is account:\n      Network ID/version: substrate\n      Public key (hex):   0xcaf1f5ec14b507b5c365c6528cc06de74a5615274694a0c895ed4109c0ff0d32\n      Public key (SS58):  5GeoQa3nkeNmzZSfgBFuK3BkAggnTHcX3S1j94sffJYYphrP\n      Account ID:         0xcaf1f5ec14b507b5c365c6528cc06de74a5615274694a0c895ed4109c0ff0d32\n      SS58 Address:       5GeoQa3nkeNmzZSfgBFuK3BkAggnTHcX3S1j94sffJYYphrP\n\nWith this strategy for combining hard and soft keys, you can reveal a parent public address and soft derivation paths without revealing your secret phrase or password, retaining control of all derived addresses.\n\n### [](/reference/command-line-tools/subkey/#predefined-accounts-and-keys)\nPredefined accounts and keys\n\nSubstrate includes several predefined accounts that you can use for testing in a local development environment. These predefined accounts are all derived from the same seed using a single secret phrase. The secret phrase used to generate the keys for all of the predefined accounts consists of the following words:\n\n    bottom drive obey lake curtain smoke basket hold race lonely fit walk\n\nYou can inspect the keys for the predefined account using the derivation path. For example:\n\n    subkey inspect //Alice\n\nThe command\n\n    Secret Key URI `//Alice` is account:\n      Secret seed:       0xe5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a\n      Public key (hex):  0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n      Account ID:        0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n      Public key (SS58): 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n      SS58 Address:      5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n\nIt is important to note that `//Alice` and `//alice` are different derivation paths and the secret phrase and derivation path for the predefined account is actually:\n\n    bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice\n\nYou can run the following command to verify the keys match:\n\n    subkey inspect \"bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice\"\n\nThe command output displays the following:\n\n    Secret Key URI `bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice` is account:\n      Secret seed:       0xe5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a\n      Public key (hex):  0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n      Account ID:        0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n      Public key (SS58): 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n      SS58 Address:      5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n\n[](/reference/command-line-tools/subkey/#further-resources)\nFurther resources\n-----------------------------------------------------------------------------\n\n*   [Subkey README](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/bin/utils/subkey)\n    .\n*   [PolkadotJS Apps UI](https://polkadot.js.org/apps/)\n    .\n*   [Cryptography explainer](https://wiki.polkadot.network/docs/en/learn-cryptography)\n    .\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/reference/command-line-tools/srtool/)\n[Next \u2192](/reference/command-line-tools/subxt/)\n\nON THIS PAGE\n\n[Signature schemes](#signature-schemes)\n[Installation](#installation)\n[Hierarchical deterministic keys](#hierarchical-deterministic-keys)\n[Basic command usage](#basic-command-usage)\n[subkey generate](#subkey-generate)\n[subkey generate-node-key](#subkey-generate-node-key)\n[subkey help](#subkey-help)\n[subkey inspect](#subkey-inspect)\n[subkey inspect-node-key](#subkey-inspect-node-key)\n[subkey sign](#subkey-sign)\n[subkey vanity](#subkey-vanity)\n[subkey verify](#subkey-verify)\n[Working with derived keys](#working-with-derived-keys)\n[Further resources](#further-resources)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/subxt/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nSubxt\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/subxt.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nsubxt\n=====\n\nThe [`subxt`](https://github.com/paritytech/subxt)\n library enables you to submit transactions to a Substrate node through remote procedure calls. Before you use the `subxt` library, you can use the standalone `subxt` command-line interface to download the metadata for the Substrate node you want to use as the target for submitting transactions. The `subxt-cli` tool enables you to perform two key tasks that are critical to using the `subxt` library:\n\n*   You can use the `subxt-cli` tool to download the metadata from any target Substrate node.\n*   You can use the `subxt-cli` tool to generate the runtime API code from the metadata from any target Substrate node.\n\nYou can use the `subxt` library and `subxt-cli` tool for any node that uses metadata v14 and later. For examples of how to use the `subxt` library, see the [examples](https://github.com/paritytech/subxt/tree/master/examples)\n folder.\n\n[](/reference/command-line-tools/subxt/#installation)\nInstallation\n------------------------------------------------------------------\n\nTo install `subxt-cli`:\n\n1.  Open a terminal shell, if necessary.\n2.  Verify that you have the Rust compiler and toolchain, if necessary.\n3.  Download the required packages with the following command: `cargo install subxt-cli`\n\n[](/reference/command-line-tools/subxt/#basic-command-usage)\nBasic command usage\n--------------------------------------------------------------------------------\n\nThe basic syntax for running `subxt` commands is:\n\n`subxt <SUBCOMMAND>`\n\nTo use the commands exposed by `subxt`, you must either be running a node locally or specify the chain you're targeting. If the metadata is already provided, it is possible to use the `codegen` subcommand without running a node.\n\n### [](/reference/command-line-tools/subxt/#flags)\nFlags\n\nYou can use the following optional flags with the `subxt` command.\n\n| Flag | Description |\n| --- | --- |\n| \\-h, --help | Displays usage information. |\n| \\-V, --version | Displays version information. |\n\n### [](/reference/command-line-tools/subxt/#subcommands)\nSubcommands\n\nYou can use the following subcommands with the `subxt` command-line interface.\n\n| Command | Description |\n| --- | --- |\n| `codegen` | Generates runtime API client code from metadata. |\n| `metadata` | Downloads metadata from a Substrate node for use with `subxt` codegen. |\n\n### [](/reference/command-line-tools/subxt/#output)\nOutput\n\nDepending on how you specify the subcommand, the output from `subxt` displays some or all of the following information:\n\n| This field | Contains |\n| --- | --- |\n| Metadata | A file with the metadata of a target chain. |\n| API | A file with the API of the target chain. |\n\n### [](/reference/command-line-tools/subxt/#examples)\nExamples\n\nTo display version information for the `subxt` program, run the following command:\n\n`subxt --version`\n\nTo display usage information for the `subxt metadata` command, run the following command:\n\n`subxt metadata --help`\n\n[](/reference/command-line-tools/subxt/#codegen)\ncodegen\n--------------------------------------------------------\n\nUse the `subxt codegen` command to generate an interface for some target Substrate node.\n\nThis could be useful for debugging or modifying a node's API to meet certain hardware constraints.\n\n#### Basic usage\n\n`subxt codegen [OPTIONS]`\n\n#### Flags\n\nYou can use the following optional flags with the `subxt codegen` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h, --help` | Displays usage information. |\n| `-V, --version` | Prints version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subxt codegen` command.\n\n| Option | Description |\n| --- | --- |\n| `-f, --file <file>` | Specifies the path to the encoded metadata file. |\n| `--url <url>` | Specifies the URL of the Substrate node to query for metadata for codegen. |\n\n#### Examples\n\nTo format the generated API and print it to the terminal, run the following command:\n\n`subxt codegen | rustfmt`\n\nTo save the generated API in a file, run the following command:\n\n`subxt codegen | rustfmt --edition=2018 > api.rs`\n\n[](/reference/command-line-tools/subxt/#metadata)\nmetadata\n----------------------------------------------------------\n\nUse the `subxt metadata` command to get the metadata of the target Substrate node.\n\n#### Basic usage\n\n`subxt metadata [OPTIONS]`\n\n#### Flags\n\nYou can use the following optional flags with the `subxt metadata` command.\n\n| Flag | Description |\n| --- | --- |\n| `-h, --help` | Displays usage information. |\n| `-V, --version` | Prints version information. |\n\n#### Options\n\nYou can use the following command-line options with the `subxt metadata` command.\n\n| Option | Description |\n| --- | --- |\n| `-f, --format <format>` | Specifies the format of the metadata to display. Valid formats are `json`, `hex` or `bytes`. The default format is `json`. |\n| `--url <url>` | Specifies the URL of the Substrate node to query for metadata. The default URL is `http://localhost:9933`. |\n\n#### Examples\n\nTo save the metadata from the local node encoded in bytes to a file, run the following command:\n\n`subxt metadata -f bytes > metadata.scale`\n\nTo save the metadata from the Rococo network to a JSON file, run the following command:\n\n`subxt metadata --url https://rococo-rpc.polkadot.io:443 > <contract_name>.json`\n\nTo query type `125` from the array of types in the metadata and output in JSON, run the following command:\n\n`subxt metadata --format json | jq '.[1].V14.types.types | .[125]'`\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/reference/command-line-tools/subkey/)\n[Next \u2192](/reference/command-line-tools/try-runtime/)\n\nON THIS PAGE\n\n[Installation](#installation)\n[Basic command usage](#basic-command-usage)\n[codegen](#codegen)\n[metadata](#metadata)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/sidecar/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nSidecar\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/sidecar.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nsidecar\n=======\n\nA REST service that makes it easy to interact with blockchain nodes built using Substrate's FRAME framework.\n\n*   [Go to documentation](https://github.com/paritytech/substrate-api-sidecar)\n    .\n\n**Last edit:** June 24, 2022\n\n[\u2190 Previous](/reference/command-line-tools/polkadot-apps/)\n[Next \u2192](/reference/command-line-tools/srtool/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/try-runtime/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nTry runtime\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/try-runtime.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\ntry-runtime\n===========\n\nThe `try-runtime` documentation has been moved [here](https://paritytech.github.io/try-runtime-cli/try_runtime)\n.\n\n**Last edit:** August 18, 2023\n\n[\u2190 Previous](/reference/command-line-tools/subxt/)\n[Next \u2192](/reference/command-line-tools/tx-wrapper/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/command-line-tools/tx-wrapper/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        [*   archive](/reference/command-line-tools/archive/)\n        [*   memory-profiler](/reference/command-line-tools/memory-profiler/)\n        [*   node-template](/reference/command-line-tools/node-template/)\n        [*   polkadot-apps](/reference/command-line-tools/polkadot-apps/)\n        [*   sidecar](/reference/command-line-tools/sidecar/)\n        [*   srtool](/reference/command-line-tools/srtool/)\n        [*   subkey](/reference/command-line-tools/subkey/)\n        [*   subxt](/reference/command-line-tools/subxt/)\n        [*   try-runtime](/reference/command-line-tools/try-runtime/)\n        [*   tx-wrapper](/reference/command-line-tools/tx-wrapper/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\n[Command line tools](/reference/command-line-tools/)\nTx wrapper\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/command-line-tools/tx-wrapper.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\ntx-wrapper\n==========\n\nTools for FRAME chain builders to publish chain specific offline transaction generation libraries.\n\n*   [Go to documentation](https://github.com/paritytech/txwrapper-core)\n    .\n\n**Last edit:** June 24, 2022\n\n[\u2190 Previous](/reference/command-line-tools/try-runtime/)\n[Next \u2192](/reference/runtime-apis/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/reference/how-to-guides/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    \n\n*   [Reference](/reference/)\n    *   [Rust API](/reference/rust-api/)\n        \n    *   [Glossary](/reference/glossary/)\n        \n    *   [Command-line tools](/reference/command-line-tools/)\n        \n    *   [Runtime APIs](/reference/runtime-apis/)\n        \n    *   [FRAME pallets](/reference/frame-pallets/)\n        \n    *   [FRAME macros](/reference/frame-macros/)\n        \n    *   [Account data structures](/reference/account-data-structures/)\n        \n    *   [Type encoding (SCALE)](/reference/scale-codec/)\n        \n    *   [Address formats](/reference/address-formats/)\n        \n    *   [Transaction formats](/reference/transaction-format/)\n        \n    *   [XCM reference](/reference/xcm-reference/)\n        \n    *   [How-to reference guides](/reference/how-to-guides/)\n        \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Reference](/reference/)\nHow to guides\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/reference/how-to-guides/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nHow-to quick reference guides\n=============================\n\nSubstrate _How-to_ quick reference guides provide instructions for achieving specific goals. Each guide explains how to perform a specific task with the assumption that you are already familiar with Substrate and programming in Rust.\n\n[](/reference/how-to-guides/#basics)\nBasics\n-------------------------------------------\n\nSee the following guides to learn common patterns in runtime development.\n\n*   [Import a pallet](/reference/how-to-guides/basics/import-a-pallet/)\n    \n*   [Configure runtime constants](/reference/how-to-guides/basics/configure-runtime-constants/)\n    \n*   [Configure genesis state](/reference/how-to-guides/basics/configure-genesis-state/)\n    \n*   [Customize a chain specification](/reference/how-to-guides/basics/customize-a-chain-specification/)\n    \n*   [Use helper functions](/reference/how-to-guides/basics/use-helper-functions/)\n    \n\n[](/reference/how-to-guides/#pallet-design)\nPallet design\n---------------------------------------------------------\n\nSee the following guides for best practices on building pallets using FRAME.\n\n*   [Implement lockable currency](/reference/how-to-guides/pallet-design/implement-lockable-currency/)\n    \n*   [Incorporate randomness](/reference/how-to-guides/pallet-design/incorporate-randomness/)\n    \n*   [Configure crowdfunding](/reference/how-to-guides/pallet-design/configure-crowdfunding/)\n    \n*   [Create a storage structure (struct)](/reference/how-to-guides/pallet-design/create-a-storage-structure/)\n    \n*   [Use tight pallet coupling](/reference/how-to-guides/pallet-design/use-tight-coupling/)\n    \n*   [Use loose pallet coupling](/reference/how-to-guides/pallet-design/use-loose-coupling/)\n    \n\n[](/reference/how-to-guides/#weights)\nWeights\n---------------------------------------------\n\nSee the following guides for help with benchmarking and weight configurations.\n\n*   [Calculate fees](/reference/how-to-guides/weights/calculate-fees/)\n    \n*   [Add benchmarks](/reference/how-to-guides/weights/add-benchmarks/)\n    \n\n[](/reference/how-to-guides/#testing)\nTesting\n---------------------------------------------\n\nSee the following guides for help with testing pallets and runtime logic.\n\n*   [Set up basic tests](/reference/how-to-guides/testing/set-up-basic-tests/)\n    \n*   [Test a transfer function](/reference/how-to-guides/testing/test-a-transfer-function/)\n    \n\n[](/reference/how-to-guides/#storage-migration)\nStorage migration\n-----------------------------------------------------------------\n\nSee the following guides for help with a storage migration.\n\n*   [Basic storage migration](/reference/how-to-guides/storage-migrations/basic-storage-migration/)\n    \n*   [Trigger migration](/reference/how-to-guides/storage-migrations/trigger-migration/)\n    \n\n[](/reference/how-to-guides/#consensus-models)\nConsensus models\n---------------------------------------------------------------\n\nSee the following guides to implement consensus mechanisms in your runtimes.\n\n*   [Create a hybrid node](/reference/how-to-guides/consensus-models/create-a-hybrid-node/)\n    \n*   [Add proof-of-work consensus](/reference/how-to-guides/consensus-models/add-proof-of-work-consensus/)\n    \n\n[](/reference/how-to-guides/#parachains)\nParachains\n---------------------------------------------------\n\nSee the following guides for help working with Substrate parachains.\n\n*   [Convert a solo chain](/reference/how-to-guides/parachains/convert-a-solo-chain/)\n    \n*   [Connect to a relay chain](/reference/how-to-guides/parachains/connect-to-a-relay-chain/)\n    \n*   [Select collators](/reference/how-to-guides/parachains/select-collators/)\n    \n*   [Prepare to launch](/reference/how-to-guides/parachains/prepare-to-launch/)\n    \n*   [Upgrade a parachain](/reference/how-to-guides/parachains/upgrade-a-parachain/)\n    \n*   [Auctions and crowdloans](/reference/how-to-guides/parachains/auctions-and-crowdloans/)\n    \n*   [Add HRMP channels](/reference/how-to-guides/parachains/add-hrmp-channels/)\n    \n\n[](/reference/how-to-guides/#tools)\nTools\n-----------------------------------------\n\nSee the following guides for add-on tools that help you manage Substrate chains in production.\n\n*   [Use try-runtime](/reference/how-to-guides/tools/use-try-runtime/)\n    \n*   [Create a txwrapper for a chain](/reference/how-to-guides/tools/create-a-txwrapper/)\n    \n*   [Use REST endpoints to get chain data](/reference/how-to-guides/tools/use-sidecar/)\n    \n*   [Verify a Wasm binary](/reference/how-to-guides/tools/verify-wasm/)\n    \n\n[](/reference/how-to-guides/#offchain-workers)\nOffchain workers\n---------------------------------------------------------------\n\nSee the following guides for help working with offchain data.\n\n*   [Make offchain HTTP requests](/reference/how-to-guides/offchain-workers/offchain-http-requests/)\n    \n*   [Offchain local storage](/reference/how-to-guides/offchain-workers/offchain-local-storage/)\n    \n*   [Offchain indexing](/reference/how-to-guides/offchain-workers/offchain-indexing/)\n    \n\n**Last edit:** October 6, 2023\n\n[\u2190 Previous](/reference/xcm-reference/)\n[Next \u2192](/community/)\n\nON THIS PAGE\n\n[Basics](#basics)\n[Pallet design](#pallet-design)\n[Weights](#weights)\n[Testing](#testing)\n[Storage migration](#storage-migration)\n[Consensus models](#consensus-models)\n[Parachains](#parachains)\n[Tools](#tools)\n[Offchain workers](#offchain-workers)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/build-application-logic/add-offchain-workers/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Tutorials](/tutorials/)\n[Build application logic](/tutorials/build-application-logic/)\nAdd offchain workers\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/build-application-logic/add-offchain-workers.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nAdd offchain workers\n====================\n\n**\u26a0\ufe0f WARNING:** This page contains potentially outdated information. Reading it might still be useful, yet we suggest taking it with a grain of salt.\n\nPlease refer to the [\\`polkadot-sdk-docs\\` crate](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/reference_docs/frame_offchain_workers/index.html)\n for the most up-to-date documentation on this topic.\n\nThis tutorial illustrates how to modify a pallet to include an offchain worker and configure the pallet and runtime to enable the offchain worker to submit transactions that update the on-chain state.\n\n[](/tutorials/build-application-logic/add-offchain-workers/#using-offchain-workers)\nUsing offchain workers\n----------------------------------------------------------------------------------------------------------\n\nIf you use offchain workers to perform long-running computations or fetch data from offline sources, it's likely that you'll want to store the results of those operations on-chain. However, offchain storage is separate from on-chain resources and you can't save data processed by offchain workers directly to on-chain storage. To store any data processed by offchain workers as part of the on-chain state, you must create transactions to send the data from the offchain worker storage to the on-chain storage system.\n\nThis tutorial illustrates how to create offchain workers with the ability to send signed or unsigned transactions to store offchain data on-chain. In general, signed transactions are more secure, but require the calling account to handle transaction fees. For example:\n\n*   Use **signed transactions** if you want to record the associated transaction caller account and deduct the transaction fee from the caller account.\n*   Use **unsigned transactions with signed payload** if you want to record the associated transaction caller, but do not want the caller be responsible for the transaction fee payment.\n\n[](/tutorials/build-application-logic/add-offchain-workers/#working-with-unsigned-transactions)\nWorking with unsigned transactions\n----------------------------------------------------------------------------------------------------------------------------------\n\nIt's also possible to submit **unsigned transactions** without a signed payload\u2014for example, because you don't want to record the associated transaction caller at all. However, there's significant risk in allowing unsigned transactions to modify the chain state. Unsigned transactions represent a potential attack vector that a malicious user could exploit. If you are going to allow offchain workers to send unsigned transactions, you should include logic that ensures the transaction is authorized. For an example of how unsigned transactions can be verified using on-chain state, see the `ValidateUnsigned` implementation in the [`enact_authorized_upgrade`](https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/pallets/parachain-system/src/lib.rs)\n call. In that example, the call validates the unsigned transaction by verifying that the given code hash was previously authorized.\n\nIt is also important to consider that even an unsigned transaction with a signed payload could be exploited because offchain workers can't be assumed to be a reliable source unless you implement strict logic to check the validity of the transaction. In most cases, checking whether a transaction was submitted by an offchain worker before writing to storage isn't sufficient to protect the network. Instead of assuming that the offchain worker can be trusted without safeguards, you should intentionally set restrictive permissions that limit access to the process and what it can do.\n\nRemember that unsigned transactions are essentially an **open door** into your runtime. You should only use them after careful consideration of the conditions under which they should be allowed to execute. Without safeguards, malicious actors could impersonate offchain workers and access runtime storage.\n\n[](/tutorials/build-application-logic/add-offchain-workers/#before-you-begin)\nBefore you begin\n----------------------------------------------------------------------------------------------\n\nBefore you begin, verify the following:\n\n*   You have configured your environment for Substrate development by installing [Rust and the Rust toolchain](/install/)\n    .\n*   You have completed the [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n     tutorial and have the Substrate node template from the Developer Hub installed locally.\n*   You are familiar with how to use FRAME macros and edit the logic for a pallet.\n*   You are familiar with how to modify the configuration trait for a pallet in the runtime.\n\n[](/tutorials/build-application-logic/add-offchain-workers/#tutorial-objectives)\nTutorial objectives\n----------------------------------------------------------------------------------------------------\n\nBy completing this tutorial, you will be able to:\n\n*   Identify the risks involved in using unsigned transactions.\n*   Add an offchain worker function to a pallet.\n*   Configure the pallet and the runtime to enable the offchain worker to submit signed transactions.\n*   Configure the pallet and the runtime to enable the offchain worker to submit unsigned transactions.\n*   Configure the pallet and the runtime to enable the offchain worker to submit unsigned transactions with a signed payload.\n\n[](/tutorials/build-application-logic/add-offchain-workers/#signed-transactions)\nSigned transactions\n----------------------------------------------------------------------------------------------------\n\nTo submit signed transactions, you must configure your pallet and the runtime to enable at least one account for offchain workers to use. At a high level, configuring a pallet to use an office chain worker and submit signed transactions involves the following steps:\n\n*   [Configure the offchain worker in the pallet](/tutorials/build-application-logic/add-offchain-workers/#configure-the-offchain-worker-in-the-pallet)\n    .\n*   [Implement the pallet and required traits in the runtime](/tutorials/build-application-logic/add-offchain-workers/#implement-the-pallet-in-the-runtime)\n    .\n*   [Add an account for signing transactions](/tutorials/build-application-logic/add-offchain-workers/#add-an-account-for-signing-transactions)\n    .\n\n### [](/tutorials/build-application-logic/add-offchain-workers/#configure-the-offchain-worker-in-the-pallet)\nConfigure the offchain worker in the pallet\n\nTo enable offchain workers to send signed transactions:\n\n1.  Open the `src/lib.rs` file for your pallet in a text editor.\n2.  Add the `#[pallet::hooks]` macro and the entry point for offchain workers to the code.\n    \n    For example:\n    \n        #[pallet::hooks]\n        impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {\n        \t/// Offchain worker entry point.\n        \t///\n        \t/// By implementing `fn offchain_worker` you declare a new offchain worker.\n        \t/// This function will be called when the node is fully synced and a new best block is\n        \t/// successfully imported.\n        \t/// Note that it's not guaranteed for offchain workers to run on EVERY block, there might\n        \t/// be cases where some blocks are skipped, or for some the worker runs twice (re-orgs),\n        \t/// so the code should be able to handle that.\n        \tfn offchain_worker(block_number: T::BlockNumber) {\n        \t\tlog::info!(\"Hello from pallet-ocw.\");\n        \t\t// The entry point of your code called by offchain worker\n        \t}\n        \t// ...\n        }\n    \n3.  Add the logic for the `offchain_worker` function.\n4.  Add [`CreateSignedTransaction`](https://paritytech.github.io/substrate/master/frame_system/offchain/trait.CreateSignedTransaction.html)\n     to the `Config` trait for your pallet. For example, your pallet `Config` trait should look similar to this:\n    \n        /// This pallet's configuration trait\n        #[pallet::config]\n        pub trait Config: CreateSignedTransaction<Call<Self>> + frame_system::Config {\n        \t// ...\n        }\n    \n5.  Add an `AuthorityId` type to the pallet `Config` trait:\n    \n        #[pallet::config]\n        pub trait Config: CreateSignedTransaction<Call<Self>> + frame_system::Config {\n        \t// ...\n        type AuthorityId: AppCrypto<Self::Public, Self::Signature>;\n        }\n    \n6.  Add a `crypto` module with an `sr25519` signature key to ensure that your pallet owns an account that can be used for signing transactions.\n    \n        use sp_core::{crypto::KeyTypeId};\n        \n        // ...\n        \n        pub const KEY_TYPE: KeyTypeId = KeyTypeId(*b\"demo\");\n        \n        // ...\n        \n        pub mod crypto {\n        \tuse super::KEY_TYPE;\n        \tuse sp_core::sr25519::Signature as Sr25519Signature;\n        \tuse sp_runtime::{\n        \t\tapp_crypto::{app_crypto, sr25519},\n        \t\ttraits::Verify, MultiSignature, MultiSigner\n        \t};\n        \tapp_crypto!(sr25519, KEY_TYPE);\n        \n        \tpub struct TestAuthId;\n        \n        \t// implemented for runtime\n        \timpl frame_system::offchain::AppCrypto<MultiSigner, MultiSignature> for TestAuthId {\n        \ttype RuntimeAppPublic = Public;\n        \ttype GenericSignature = sp_core::sr25519::Signature;\n        \ttype GenericPublic = sp_core::sr25519::Public;\n        \t}\n        }\n    \n    The [`app_crypto` macro](https://paritytech.github.io/substrate/master/sp_application_crypto/macro.app_crypto.html)\n     declares an account with an `sr25519` signature that is identified by `KEY_TYPE`. In this example, the `KEY_TYPE` is `demo`. Note that this macro doesn't create a new account. The macro simply declares that a `crypto` account is available for this pallet to use.\n    \n7.  Initialize an account for the offchain worker to use to send a signed transaction to on-chain storage.\n    \n        fn offchain_worker(block_number: T::BlockNumber) {\n        \tlet signer = Signer::<T, T::AuthorityId>::all_accounts();\n        \n        \t// ...\n        }\n    \n    This code enables you to retrieve all signers that this pallet owns.\n    \n8.  Use `send_signed_transaction()` to create a signed transaction call:\n    \n        fn offchain_worker(block_number: T::BlockNumber) {\n        \tlet signer = Signer::<T, T::AuthorityId>::all_accounts();\n        \n        \t// Using `send_signed_transaction` associated type we create and submit a transaction\n        \t// representing the call we've just created.\n        \t// `send_signed_transaction()` return type is `Option<(Account<T>, Result<(), ()>)>`. It is:\n        \t//\t - `None`: no account is available for sending transaction\n        \t//\t - `Some((account, Ok(())))`: transaction is successfully sent\n        \t//\t - `Some((account, Err(())))`: error occurred when sending the transaction\n        \tlet results = signer.send_signed_transaction(|_account| {\n        \t\tCall::on_chain_call { key: val }\n        \t});\n        \n        \t// ...\n        }\n    \n9.  Check if the transaction is successfully submitted on-chain and perform proper error handling by checking the returned `results`.\n    \n        fn offchain_worker(block_number: T::BlockNumber) {\n        \t// ...\n        \n        \tfor (acc, res) in &results {\n        \t\tmatch res {\n        \t\t\tOk(()) => log::info!(\"[{:?}]: submit transaction success.\", acc.id),\n        \t\t\tErr(e) => log::error!(\"[{:?}]: submit transaction failure. Reason: {:?}\", acc.id, e),\n        \t\t}\n        \t}\n        \n        \tOk(())\n        }\n    \n\n### [](/tutorials/build-application-logic/add-offchain-workers/#implement-the-pallet-in-the-runtime)\nImplement the pallet in the runtime\n\n1.  Open the `runtime/src/lib.rs` file for the node template in a text editor.\n2.  Add the `AuthorityId` to the configuration for your pallet and make sure it uses the `TestAuthId` from the `crypto` module:\n    \n        impl pallet_your_ocw_pallet::Config for Runtime {\n          // ...\n          type AuthorityId = pallet_your_ocw_pallet::crypto::TestAuthId;\n        }\n    \n3.  Implement the `CreateSignedTransaction` trait in the runtime.\n    \n    Because you configured your pallet to implement the `CreateSignedTransaction` trait, you also need to implement that trait for the runtime.\n    \n    By looking at [`CreateSignedTransaction`](https://paritytech.github.io/substrate/master/frame_system/offchain/trait.CreateSignedTransaction.html)\n    , you can see that you only need to implement the function `create_transaction()` for the runtime. For example:\n    \n        use codec::Encode;\n        use sp_runtime::{generic::Era, SaturatedConversion};\n        \n        // ...\n        \n        impl<LocalCall> frame_system::offchain::CreateSignedTransaction<LocalCall> for Runtime\n        where\n            RuntimeCall: From<LocalCall>,\n        {\n            fn create_transaction<C: frame_system::offchain::AppCrypto<Self::Public, Self::Signature>>(\n        \t\t   call: RuntimeCall,\n               public: <Signature as Verify>::Signer,\n        \t     account: AccountId,\n        \t     nonce: Nonce,\n             ) -> Option<(RuntimeCall, <UncheckedExtrinsic as traits::Extrinsic>::SignaturePayload)> {\n        \t     let tip = 0;\n        \t     // take the biggest period possible.\n        \t     let period =\n        \t\t      BlockHashCount::get().checked_next_power_of_two().map(|c| c / 2).unwrap_or(2) as u64;\n        \t     let current_block = System::block_number()\n        \t\t      .saturated_into::<u64>()\n        \t\t      // The `System::block_number` is initialized with `n+1`,\n        \t\t      // so the actual block number is `n`.\n        \t\t      .saturating_sub(1);\n        \t     let era = Era::mortal(period, current_block);\n        \t     let extra = (\n        \t\t      frame_system::CheckNonZeroSender::<Runtime>::new(),\n        \t\t      frame_system::CheckSpecVersion::<Runtime>::new(),\n        \t\t      frame_system::CheckTxVersion::<Runtime>::new(),\n        \t\t      frame_system::CheckGenesis::<Runtime>::new(),\n        \t\t      frame_system::CheckEra::<Runtime>::from(era),\n        \t\t      frame_system::CheckNonce::<Runtime>::from(nonce),\n        \t\t      frame_system::CheckWeight::<Runtime>::new(),\n        \t\t      pallet_transaction_payment::ChargeTransactionPayment::<Runtime>::from(tip),\n        \t     );\n        \t     let raw_payload = SignedPayload::new(call, extra)\n        \t\t      .map_err(|e| {\n        \t\t\t       log::warn!(\"Unable to create signed payload: {:?}\", e);\n        \t\t      })\n        \t\t      .ok()?;\n        \t     let signature = raw_payload.using_encoded(|payload| C::sign(payload, public))?;\n        \t     let address = account;\n        \t     let (call, extra, _) = raw_payload.deconstruct();\n        \t     Some((call, (sp_runtime::MultiAddress::Id(address), signature, extra)))\n           }\n        }\n    \n    This code snippet is long, but, in essence, it illustrates the following main steps:\n    \n    *   Create and prepare `extra` of `SignedExtra` type, and put various checkers in place.\n    *   Create a raw payload based on the passed in `call` and `extra`.\n    *   Sign the raw payload with the account public key.\n    *   Bundle all data up and return a tuple of the call, the caller, its signature, and any signed extension data.\n    \n    You can see an example of this code in the [Substrate code base](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/node/runtime/src/lib.rs#L1239-L1279)\n    .\n    \n4.  Implement `SigningTypes` and `SendTransactionTypes` in the runtime to support submitting transactions, whether they are signed or unsigned.\n    \n        impl frame_system::offchain::SigningTypes for Runtime {\n            type Public = <Signature as traits::Verify>::Signer;\n            type Signature = Signature;\n        }\n        \n        impl<C> frame_system::offchain::SendTransactionTypes<C> for Runtime\n        where\n            RuntimeCall: From<C>,\n        {\n            type Extrinsic = UncheckedExtrinsic;\n            type OverarchingCall = RuntimeCall;\n        }\n    \n    You can see an example of this implementation in the [Substrate code base](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/node/runtime/src/lib.rs#L1280-L1292)\n    .\n    \n\n### [](/tutorials/build-application-logic/add-offchain-workers/#add-an-account-for-signing-transactions)\nAdd an account for signing transactions\n\nAt this point, you have prepared your pallet to use offchain workers. Preparing the pallet involved the following steps:\n\n*   Adding the `offchain_worker` function and related logic for sending signed transactions.\n*   Adding `CreateSignedTransaction` and `AuthorityId` to the `Config` trait for your pallet.\n*   Adding the `crypto` module to describe the account the pallet will use to sign transaction.\n\nYou have also updated the runtime with the code to support offchain workers and sending signed transactions. Updating the runtime involved the following steps:\n\n*   Adding the `AuthorityId` to the runtime configuration for your pallet.\n*   Implementing the `CreateSignedTransaction` trait and `create_transaction()` function.\n*   Implementing `SigningTypes` and `SendTransactionTypes` for offchain workers from the `frame_system` pallet.\n\nHowever, before your pallet offchain workers can submit signed transactions, you must specify at least one account for the offchain worker to use. To enable the offchain worker to sign transactions, you must generate the account key for the pallet to own and add that key to the node keystore.\n\nThere are several ways to accomplish this final step and the method you choose might vary depending on whether you are running a node in development mode for testing, using a custom chain specification, or deploying into a production environment.\n\n### [](/tutorials/build-application-logic/add-offchain-workers/#using-a-development-account)\nUsing a development account\n\nIf you are running a node in development mode\u2014with `--dev` command-line option\u2014you can manually generate and insert the account key for a development account by modifying the `node/src/service.rs` file as follows:\n\n    pub fn new_partial(config: &Configuration) -> Result <SomeStruct, SomeError> {\n    \n    //...\n    \n      if config.offchain_worker.enabled {\n      // Initialize seed for signing transaction using offchain workers. This is a convenience\n      // so learners can see the transactions submitted simply running the node.\n      // Typically these keys should be inserted with RPC calls to `author_insertKey`.\n       \tsp_keystore::SyncCryptoStore::sr25519_generate_new(\n       \t\t&*keystore,\n       \t\tnode_template_runtime::pallet_your_ocw_pallet::KEY_TYPE,\n       \t\tSome(\"//Alice\"),\n       \t).expect(\"Creating key with account Alice should succeed.\");\n       \t}\n    }\n\nThis example manually adds the key for the `Alice` account to the keystore identified by the `KEY_TYPE` defined in your pallet. For a working example, see this sample [service.rs](https://github.com/jimmychu0807/substrate-offchain-worker-demo/blob/v2.0.0/node/src/service.rs#L87-L105)\n file.\n\n### [](/tutorials/build-application-logic/add-offchain-workers/#using-other-accounts)\nUsing other accounts\n\nIn a production environment, you can use other tools\u2014such as `subkey`\u2014to generate keys that are specifically for offchain workers to use. After you generate one or more keys for offchain workers to own, you can add them to the node keystore by:\n\n*   Modifying the configuration of your chain specification file.\n*   Passing parameters using the `author_insertKey` RPC method.\n\nFor example, you can use the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/rpc)\n, Polkadot-JS API, or a `curl` command to select the `author_insertKey` method and specify the key type, secret phrase, and public key parameters for the account to use:\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='526.8292682926829' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Use the `author_insertKey` method to insert an account](https://docs.substrate.io/static/8551cc611f38a7a6c6ac76edf377e436/9432b/author_insertKey.png)\n\nNote that the keyType parameter `demo` in this example matches the `KEY_TYPE` declared in the offchain worker pallet.\n\nNow, your pallet is ready to send signed transactions on-chain from offchain workers.\n\n[](/tutorials/build-application-logic/add-offchain-workers/#unsigned-transactions)\nUnsigned transactions\n--------------------------------------------------------------------------------------------------------\n\nBy default, all unsigned transactions are rejected in Substrate. To enable Substrate to accept certain unsigned transactions, you must implement the `ValidateUnsigned` trait for the pallet.\n\nAlthough you must implement the `ValidateUnsigned` trait to send unsigned transactions, this check doesn't guarantee that **only** offchain workers are able to send the transaction. You should always consider the consequences of malicious actors sending these transactions as an attempt to tamper with the state of your chain. Unsigned transactions always represent a potential attack vector that a malicious user could exploit and offchain workers can't be assumed to be a reliable source without additional safeguards.\n\nYou should never assume that unsigned transactions can only be submitted by an offchain worker. By definition, **anyone** can submit them.\n\n### [](/tutorials/build-application-logic/add-offchain-workers/#configure-the-pallet)\nConfigure the pallet\n\nTo enable offchain workers to send unsigned transactions:\n\n1.  Open the `src/lib.rs` file for your pallet in a text editor.\n2.  Add the [`validate_unsigned`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html#validate-unsigned-palletvalidate_unsigned-optional)\n     macro.\n    \n    For example:\n    \n        #[pallet::validate_unsigned]\n        impl<T: Config> ValidateUnsigned for Pallet<T> {\n        \ttype Call = Call<T>;\n        \n        \t\t/// Validate unsigned call to this module.\n        \t\t///\n        \t\t/// By default unsigned transactions are disallowed, but implementing the validator\n        \t\t/// here we make sure that some particular calls (the ones produced by offchain worker)\n        \t\t/// are being whitelisted and marked as valid.\n        \t\tfn validate_unsigned(source: TransactionSource, call: &Self::Call) -> TransactionValidity {\n        \t\t//...\n        \t\t}\n        }\n    \n3.  Implement the trait as follows:\n    \n        fn validate_unsigned(source: TransactionSource, call: &Self::Call) -> TransactionValidity {\n        \tlet valid_tx = |provide| ValidTransaction::with_tag_prefix(\"my-pallet\")\n        \t\t.priority(UNSIGNED_TXS_PRIORITY) // please define `UNSIGNED_TXS_PRIORITY` before this line\n        \t\t.and_provides([&provide])\n        \t\t.longevity(3)\n        \t\t.propagate(true)\n        \t\t.build();\n        \t// ...\n        }\n    \n4.  Check the calling extrinsics to determine if the call is allowed and return `ValidTransaction` if the call is allowed or `TransactionValidityError` if the call is not allowed.\n    \n    For example:\n    \n        fn validate_unsigned(source: TransactionSource, call: &Self::Call) -> TransactionValidity {\n        \t// ...\n        \tmatch call {\n        \t\tRuntimeCall::my_unsigned_tx { key: value } => valid_tx(b\"my_unsigned_tx\".to_vec()),\n        \t\t_ => InvalidTransaction::Call.into(),\n        \t}\n        }\n    \n    In this example, users can only call the specific `my_unsigned_tx` function without a signature. If there are other functions, calling them would require a signed transaction.\n    \n    For an example of how `ValidateUnsigned` is implemented in a pallet, see the code for the [offchain-worker](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/offchain-worker/src/lib.rs#L301-L329)\n    .\n    \n5.  Add the `#[pallet::hooks]` macro and the `offchain_worker` function to send unsigned transactions as follows:\n    \n        #[pallet::hooks]\n        impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {\n        \t/// Offchain worker entry point.\n        \tfn offchain_worker(block_number: T::BlockNumber) {\n        \t\tlet value: u64 = 10;\n        \t\t// This is your call to on-chain extrinsic together with any necessary parameters.\n        \t\tlet call = RuntimeCall::unsigned_extrinsic1 { key: value };\n        \n        \t\t// `submit_unsigned_transaction` returns a type of `Result<(), ()>`\n        \t\t//\t ref: https://paritytech.github.io/substrate/master/frame_system/offchain/struct.SubmitTransaction.html\n        \t\tSubmitTransaction::<T, Call<T>>::submit_unsigned_transaction(call.into())\n        \t\t\t.map_err(|_| {\n        \t\t\tlog::error!(\"Failed in offchain_unsigned_tx\");\n        \t\t});\n        \t}\n        }\n    \n    This code prepares the call in the `let call = ...` line, submits the transaction using [`SubmitTransaction::submit_unsigned_transaction`](https://paritytech.github.io/substrate/master/frame_system/offchain/struct.SubmitTransaction.html)\n    , and performs any necessary error handling in the callback function passed in.\n    \n\n### [](/tutorials/build-application-logic/add-offchain-workers/#configure-the-runtime)\nConfigure the runtime\n\n1.  Enable the `ValidateUnsigned` trait for the pallet in the runtime by adding the `ValidateUnsigned` type to the `construct_runtime` macro.\n    \n    For example:\n    \n        construct_runtime!(\n        \tpub enum Runtime where\n        \t\tBlock = Block,\n        \t\tNodeBlock = opaque::Block,\n        \t\tUncheckedExtrinsic = UncheckedExtrinsic\n        \t{\n        \t\t// ...\n        \t\tOcwPallet: pallet_ocw::{Pallet, Call, Storage, Event<T>, ValidateUnsigned},\n        \t}\n        );\n    \n2.  Implement the `SendTransactionTypes` trait for the runtime as described in [sending signed transactions](/tutorials/build-application-logic/add-offchain-workers/#sending-signed-transactions)\n    .\n    \n    For a full example, see the \\[offchain-worker\\]([https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/examples/offchain-worker](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/examples/offchain-worker)\n     examples pallet.\n    \n\n[](/tutorials/build-application-logic/add-offchain-workers/#signed-payloads)\nSigned payloads\n--------------------------------------------------------------------------------------------\n\nSending unsigned transactions with signed payloads is similar to sending unsigned transactions. You need to:\n\n*   Implement the `ValidateUnsigned` trait for the pallet.\n*   Add the `ValidateUnsigned` type to the runtime when using this pallet.\n*   Prepare the data structure to be signed\u2014the signed payload\u2014by implementing the [`SignedPayload`](https://paritytech.github.io/substrate/master/frame_system/offchain/trait.SignedPayload.html)\n     trait.\n*   Send the transaction with the signed payload.\n\nYou can refer to the section on [sending unsigned transactions](/tutorials/build-application-logic/add-offchain-workers/#sending-unsigned-transactions)\n for more information about implementing the `ValidateUnsigned` trait and adding the `ValidateUnsigned` type to the runtime.\n\nKeep in mind that unsigned transactions always represent a potential attack vector and that offchain workers can't be assumed to be a reliable source without additional safeguards. In most cases, you should implement restrictive permissions or additional logic to verify the transaction submitted by an offchain worker is valid.\n\nThe differences between sending unsigned transactions and sending unsigned transactions with signed payload are illustrated in the following code examples.\n\nTo make your data structure signable:\n\n1.  Implement [`SignedPayload`](https://paritytech.github.io/substrate/master/frame_system/offchain/trait.SignedPayload.html)\n    .\n    \n    For example:\n    \n        #[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug, scale_info::TypeInfo)]\n        pub struct Payload<Public> {\n        \tnumber: u64,\n        \tpublic: Public,\n        }\n        \n        impl<T: SigningTypes> SignedPayload<T> for Payload<T::Public> {\n        \tfn public(&self) -> T::Public {\n        \tself.public.clone()\n        }\n        }\n    \n\nFor an example of a signed payload, see the code for the [offchain-worker](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/offchain-worker/src/lib.rs#L348-L361)\n.\n\n1.  In the `offchain_worker` function, call the signer, then the function to send the transaction:\n    \n        #[pallet::hooks]\n        impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {\n        \t/// Offchain worker entry point.\n        \tfn offchain_worker(block_number: T::BlockNumber) {\n        \t\tlet value: u64 = 10;\n        \n        \t\t// Retrieve the signer to sign the payload\n        \t\tlet signer = Signer::<T, T::AuthorityId>::any_account();\n        \n        \t\t// `send_unsigned_transaction` is returning a type of `Option<(Account<T>, Result<(), ()>)>`.\n        \t\t//\t The returned result means:\n        \t\t//\t - `None`: no account is available for sending transaction\n        \t\t//\t - `Some((account, Ok(())))`: transaction is successfully sent\n        \t\t//\t - `Some((account, Err(())))`: error occurred when sending the transaction\n        \t\tif let Some((_, res)) = signer.send_unsigned_transaction(\n        \t\t\t// this line is to prepare and return payload\n        \t\t\t|acct| Payload { number, public: acct.public.clone() },\n        \t\t\t|payload, signature| RuntimeCall::some_extrinsics { payload, signature },\n        \t\t) {\n        \t\t\tmatch res {\n        \t\t\t\tOk(()) => log::info!(\"unsigned tx with signed payload successfully sent.\");\n        \t\t\t\tErr(()) => log::error!(\"sending unsigned tx with signed payload failed.\");\n        \t\t\t};\n        \t\t} else {\n        \t\t\t// The case of `None`: no account is available for sending\n        \t\t\tlog::error!(\"No local account available\");\n        \t\t}\n        \t}\n        }\n    \n    This code retrieves the `signer` then calls `send_unsigned_transaction()` with two function closures. The first function closure returns the payload to be used. The second function closure returns the on-chain call with payload and signature passed in. This call returns an `Option<(Account<T>, Result<(), ()>)>` result type to allow for the following results:\n    \n    *   `None` if no account is available for sending the transaction.\n    *   `Some((account, Ok(())))` if the transaction is successfully sent.\n    *   `Some((account, Err(())))` if an error occurs when sending the transaction.\n2.  Check whether a provided signature matches the public key used to sign the payload:\n    \n        #[pallet::validate_unsigned]\n        impl<T: Config> ValidateUnsigned for Pallet<T> {\n        \ttype Call = Call<T>;\n        \n        \tfn validate_unsigned(_source: TransactionSource, call: &Self::Call) -> TransactionValidity {\n        \t\tlet valid_tx = |provide| ValidTransaction::with_tag_prefix(\"ocw-demo\")\n        \t\t\t.priority(UNSIGNED_TXS_PRIORITY)\n        \t\t\t.and_provides([&provide])\n        \t\t\t.longevity(3)\n        \t\t\t.propagate(true)\n        \t\t\t.build();\n        \n        \t\tmatch call {\n        \t\t\tRuntimeCall::unsigned_extrinsic_with_signed_payload {\n        \t\t\tref payload,\n        \t\t\tref signature\n        \t\t\t} => {\n        \t\t\tif !SignedPayload::<T>::verify::<T::AuthorityId>(payload, signature.clone()) {\n        \t\t\t\treturn InvalidTransaction::BadProof.into();\n        \t\t\t}\n        \t\t\tvalid_tx(b\"unsigned_extrinsic_with_signed_payload\".to_vec())\n        \t\t\t},\n        \t\t\t_ => InvalidTransaction::Call.into(),\n        \t\t}\n        \t}\n        }\n    \n    This example uses [`SignedPayload`](https://paritytech.github.io/substrate/master/frame_system/offchain/trait.SignedPayload.html)\n     to verify that the public key in the payload has the same signature as the one provided. However, you should note that the code in the example only checks whether the provided `signature` is valid for the `public` key contained inside `payload`. This check doesn't validate whether the signer is an offchain worker or authorized to call the specified function. This simple check wouldn't prevent an unauthorized actor from using the signed payload to modify state.\n    \n    For working examples of this code, see the [offchain function call](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/offchain-worker/src/lib.rs#L508-L536)\n     and the implementation of [`ValidateUnsigned`](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/offchain-worker/src/lib.rs#L305-L329)\n    .\n    \n\n[](/tutorials/build-application-logic/add-offchain-workers/#where-to-go-next)\nWhere to go next\n----------------------------------------------------------------------------------------------\n\nThis tutorial provides simple examples of how you can use offchain workers to send transactions for on-chain storage. To learn more, explore the following resources:\n\n*   [Offchain operations](/learn/offchain-operations/)\n    \n*   [Offchain worker example](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/examples/offchain-worker)\n    \n*   [Offchain worker demo](https://github.com/jimmychu0807/substrate-offchain-worker-demo/tree/v2.0.0/pallets/ocw)\n    \n\n**Last edit:** February 28, 2024\n\n[\u2190 Previous](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n[Next \u2192](/tutorials/build-application-logic/publish-custom-pallets/)\n\nON THIS PAGE\n\n[Using offchain workers](#using-offchain-workers)\n[Working with unsigned transactions](#working-with-unsigned-transactions)\n[Before you begin](#before-you-begin)\n[Tutorial objectives](#tutorial-objectives)\n[Signed transactions](#signed-transactions)\n[Unsigned transactions](#unsigned-transactions)\n[Signed payloads](#signed-payloads)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/build-application-logic/add-a-pallet/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Tutorials](/tutorials/)\n[Build application logic](/tutorials/build-application-logic/)\nAdd a pallet\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/build-application-logic/add-a-pallet.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nAdd a pallet to the runtime\n===========================\n\nAs you saw in [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n, the [Substrate node template](https://github.com/substrate-developer-hub/substrate-node-template)\n provides a working **runtime** that includes some default FRAME development modules\u2014**pallets**\u2014to get you started building a custom blockchain.\n\nThis tutorial introduces the basic steps for adding a new pallet to the runtime for the node template. The steps are similar any time you want to add a new FRAME pallet to the runtime. However, each pallet requires specific configuration settings\u2014for example, the specific parameters and types required to perform the functions that the pallet implements. For this tutorial, you'll add the [Nicks pallet](https://paritytech.github.io/substrate/master/pallet_nicks/index.html)\n to the runtime for the node template, so you'll see how to configure the settings that are specific to the Nicks pallet. The Nicks pallet allows blockchain users to pay a deposit to reserve a nickname for an account they control. It implements the following functions:\n\n*   The `set_name` function to collect a deposit and set the name of an account if the name is not already taken.\n*   The `clear_name` function to remove the name associated with an account and return the deposit.\n*   The `kill_name` function to forcibly remove an account name without returning the deposit.\n\nNote that this tutorial is a stepping stone to more advanced tutorials that illustrate how to add pallets with more complex configuration settings, how to create custom pallets, and how to publish pallets.\n\n[](/tutorials/build-application-logic/add-a-pallet/#before-you-begin)\nBefore you begin\n--------------------------------------------------------------------------------------\n\nBefore you begin, verify the following:\n\n*   You have configured your environment for Substrate development by installing [Rust and the Rust toolchain](/install/)\n    .\n*   You have completed the [Build a local blockchain](/tutorials/build-a-blockchain/build-local-blockchain/)\n     tutorial and have the Substrate node template from the Developer Hub installed locally.\n*   You are generally familiar with software development and using command-line interfaces.\n*   You are generally familiar with blockchains and smart contract platforms.\n\n[](/tutorials/build-application-logic/add-a-pallet/#tutorial-objectives)\nTutorial objectives\n--------------------------------------------------------------------------------------------\n\nBy completing this tutorial, you will use the Nicks pallet to accomplish the following objectives:\n\n*   Learn how to update runtime dependencies to include a new pallet.\n*   Learn how to configure a pallet-specific Rust trait.\n*   See changes to the runtime by interacting with the new pallet using the front-end template.\n\n[](/tutorials/build-application-logic/add-a-pallet/#add-the-nicks-pallet-dependencies)\nAdd the Nicks pallet dependencies\n------------------------------------------------------------------------------------------------------------------------\n\nBefore you can use a new pallet, you must add some information about it to the configuration file that the compiler uses to build the runtime binary.\n\nFor Rust programs, you use the `Cargo.toml` file to define the configuration settings and dependencies that determine what gets compiled in the resulting binary. Because the Substrate runtime compiles to both a native platform binary that includes standard library Rust functions and a [WebAssembly (Wasm)](https://webassembly.org/)\n binary that does not include the standard Rust library, the `Cargo.toml` file controls two important pieces of information:\n\n*   The pallets to be imported as dependencies for the runtime, including the location and version of the pallets to import.\n*   The features in each pallet that should be enabled when compiling the native Rust binary. By enabling the standard (`std`) feature set from each pallet, you can compile the runtime to include functions, types, and primitives that would otherwise be missing when you build the WebAssembly binary.\n\nFor information about adding dependencies in `Cargo.toml` files, see [Dependencies](https://doc.rust-lang.org/cargo/guide/dependencies.html)\n in the Cargo documentation. For information about enabling and managing features from dependent packages, see [Features](https://doc.rust-lang.org/cargo/reference/features.html)\n in the Cargo documentation.\n\nTo add the dependencies for the Nicks pallet to the runtime:\n\n1.  Open a terminal shell and change to the root directory for the node template.\n2.  Open the `runtime/Cargo.toml` configuration file in a text editor.\n3.  Locate the \\[dependencies\\] section and note how other pallets are imported.\n4.  Copy an existing pallet dependency description and replace the pallet name with `pallet-nicks` to make the pallet available to the node template runtime.\n    \n    For example, add a line similar to the following:\n    \n        pallet-nicks = { version = \"4.0.0-dev\", default-features = false, git = \"https://github.com/paritytech/polkadot-sdk.git\", branch = \"polkadot-v1.0.0\" }\n    \n    This line imports the `pallet-nicks` crate as a dependency and specifies the following:\n    \n    *   Version to identify which version of the crate you want to import.\n    *   The default behavior for including pallet features when compiling the runtime with the standard Rust libraries.\n    *   Repository location for retrieving the `pallet-nicks` crate.\n    *   Branch to use for retrieving the crate. Be sure to use the same **version** and **branch** information for the Nicks pallet as you see used for the other pallets included in the runtime.\n    \n    These details should be the same for every pallet in any given version of the node template.\n    \n5.  Add the `pallet-nicks/std` features to the list of `features` to enable when compiling the runtime.\n    \n        [features]\n        default = [\"std\"]\n        std = [\\\n          ...\\\n          \"pallet-aura/std\",\\\n          \"pallet-balances/std\",\\\n          \"pallet-nicks/std\",\\\n          ...\\\n        ]\n    \n    This section specifies the default feature set to compile for this runtime is the `std` features set. When the runtime is compiled using the `std` feature set, the `std` features from all of the pallets listed as dependencies are enabled. For more detailed information about how the runtime is compiled as a platform-native binary with the standard Rust library and as a WebAssembly binary using the `no_std` attribute, see [Build process](/build/build-process/)\n    .\n    \n    If you forget to update the `features` section in the `Cargo.toml` file, you might see `cannot find function` errors when you compile the runtime binary.\n    \n6.  Check that the new dependencies resolve correctly by running the following command:\n    \n        cargo check -p node-template-runtime --release\n    \n\n[](/tutorials/build-application-logic/add-a-pallet/#review-the-configuration-for-balances)\nReview the configuration for Balances\n--------------------------------------------------------------------------------------------------------------------------------\n\nEvery pallet has a [Rust **trait**](https://doc.rust-lang.org/book/ch10-02-traits.html)\n called `Config`. The `Config` trait is used to identify the parameters and types that the pallet needs to carry out its functions.\n\nMost of the pallet-specific code required to add a pallet is implemented using the `Config` trait. You can review what you to need to implement for any pallet by referring to its Rust documentation or the source code for the pallet. For example, to see what you need to implement for the `nicks` pallet, you can refer to the Rust documentation for [`pallet_nicks::Config`](https://paritytech.github.io/substrate/master/pallet_nicks/pallet/trait.Config.html)\n or the trait definition in the [Nicks pallet source code](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nicks/src/lib.rs)\n.\n\nFor this tutorial, you can see that the `Config` trait in the `nicks` pallet declares the following types:\n\n    pub trait Config: Config {\n        type RuntimeEvent: From<Event<Self>> + IsType<<Self as Config>::RuntimeEvent>;\n        type Currency: ReservableCurrency<Self::AccountId>;\n        type ReservationFee: Get<<<Self as Config>::Currency as Currency<<Self as Config>::AccountId>>::Balance>;\n        type Slashed: OnUnbalanced<<<Self as Config>::Currency as Currency<<Self as Config>::AccountId>>::NegativeImbalance>;\n        type ForceOrigin: EnsureOrigin<Self::RuntimeOrigin>;\n        type MinLength: Get<u32>;\n        type MaxLength: Get<u32>;\n    }\n\nAfter you identify the types your pallet requires, you need to add code to the runtime to implement the `Config` trait. To see how to implement the `Config` trait for a pallet, let's use the **Balances** pallet as an example.\n\nTo review the `Config` trait for the Balances pallet:\n\n1.  Open the `runtime/src/lib.rs` file in a text editor.\n2.  Locate the `Balances` pallet and note that it consists of the following implementation (`impl`)code block:\n    \n        pub type Balance = u128;\n        \n        // ...\n        \n        /// Existential deposit.\n        pub const EXISTENTIAL_DEPOSIT: u128 = 500;\n        \n        impl pallet_balances::Config for Runtime {\n          type MaxLocks = ConstU32<50>;\n          type MaxReserves = ();\n          type ReserveIdentifier = [u8; 8];\n          /// The type for recording an account's balance.\n          type Balance = Balance;\n          /// The ubiquitous event type.\n          type RuntimeEvent = RuntimeEvent;\n          /// The empty value, (), is used to specify a no-op callback function.\n          type DustRemoval = ();\n          /// Set the minimum balanced required for an account to exist on-chain\n          type ExistentialDeposit = ConstU128<EXISTENTIAL_DEPOSIT>;\n          /// The FRAME runtime system is used to track the accounts that hold balances.\n          type AccountStore = System;\n          /// Weight information is supplied to the Balances pallet by the node template runtime.\n          type WeightInfo = pallet_balances::weights::SubstrateWeight<Runtime>;\n        }\n    \n    As you can see in this example, the `impl pallet_balances::Config` block allows you to configure the types and parameters that are specified by the Balances pallet `Config` trait. For example, this `impl` block configures the Balances pallet to use the `u128` type to track balances.\n    \n\n[](/tutorials/build-application-logic/add-a-pallet/#implement-the-configuration-for-nicks)\nImplement the configuration for Nicks\n--------------------------------------------------------------------------------------------------------------------------------\n\nNow that you have seen an example of how the `Config` trait is implemented for the Balances pallet, you're ready to implement the `Config` trait for the Nicks pallet.\n\nTo implement the `nicks` pallet in your runtime:\n\n1.  Open the `runtime/src/lib.rs` file in a text editor.\n2.  Locate the last line of the Balances code block.\n3.  Add the following code block for the Nicks pallet:\n    \n        impl pallet_nicks::Config for Runtime {\n        // The Balances pallet implements the ReservableCurrency trait.\n        // `Balances` is defined in `construct_runtime!` macro.\n        type Currency = Balances;\n        \n        // Set ReservationFee to a value.\n        type ReservationFee = ConstU128<100>;\n        \n        // No action is taken when deposits are forfeited.\n        type Slashed = ();\n        \n        // Configure the FRAME System Root origin as the Nick pallet admin.\n        // https://paritytech.github.io/substrate/master/frame_system/enum.RawOrigin.html#variant.Root\n        type ForceOrigin = frame_system::EnsureRoot<AccountId>;\n        \n        // Set MinLength of nick name to a desired value.\n        type MinLength = ConstU32<8>;\n        \n        // Set MaxLength of nick name to a desired value.\n        type MaxLength = ConstU32<32>;\n        \n        // The ubiquitous event type.\n        type RuntimeEvent = RuntimeEvent;\n        }\n    \n4.  Add Nicks to the `construct_runtime!` macro.\n    \n    For example:\n    \n        construct_runtime!(\n        pub enum Runtime where\n           Block = Block,\n           NodeBlock = opaque::Block,\n           UncheckedExtrinsic = UncheckedExtrinsic\n         {\n           /* --snip-- */\n           Balances: pallet_balances,\n        \n           /*** Add This Line ***/\n           Nicks: pallet_nicks,\n         }\n        );\n    \n5.  Save your changes and close the file.\n6.  Check that the new dependencies resolve correctly by running the following command:\n    \n        cargo check -p node-template-runtime --release\n    \n    If there are no errors, you are ready to compile.\n    \n7.  Compile the node in release mode by running the following command:\n    \n        cargo build --release\n    \n\n[](/tutorials/build-application-logic/add-a-pallet/#start-the-blockchain-node)\nStart the blockchain node\n--------------------------------------------------------------------------------------------------------\n\nAfter your node compiles, you are ready to start the node that has been enhanced with nickname capabilities from the [Nicks pallet](https://paritytech.github.io/substrate/master/pallet_nicks/index.html)\n and interact with it using the front-end template.\n\nTo start the local Substrate node:\n\n1.  Open a terminal shell, if necessary.\n2.  Change to the root directory of the Substrate node template.\n3.  Start the node in development mode by running the following command:\n    \n        ./target/release/node-template --dev\n    \n    In this case, the `--dev` option specifies that the node runs in developer mode using the predefined `development` chain specification. By default, this option also deletes all active data\u2014such as keys, the blockchain database, and networking information\u2014when you stop the node by pressing Control-c. Using the `--dev` option ensures that you have a clean working state any time you stop and restart the node.\n    \n4.  Verify your node is up and running successfully by reviewing the output displayed in the terminal.\n    \n    If the number after `finalized` is increasing in the console output, your blockchain is producing new blocks and reaching consensus about the state they describe.\n    \n5.  Keep the terminal that displays the node output open to continue.\n\n[](/tutorials/build-application-logic/add-a-pallet/#start-the-front-end-template)\nStart the front-end template\n--------------------------------------------------------------------------------------------------------------\n\nNow that you have added a new pallet to your runtime, you can use the [Substrate front-end template](/tutorials/build-a-blockchain/build-local-blockchain/#install-the-front-end-template)\n to interact with the node template and access the Nicks pallet.\n\nTo start the front-end template:\n\n1.  Open a new terminal shell on your computer.\n2.  In the new terminal, change to the root directory where you installed the front-end template.\n3.  Start the web server for the front-end template by running the following command:\n    \n        yarn start\n    \n4.  Open `http://localhost:8000/` in a browser to view the front-end template.\n\n[](/tutorials/build-application-logic/add-a-pallet/#set-a-nickname-using-the-nicks-pallet)\nSet a nickname using the Nicks pallet\n--------------------------------------------------------------------------------------------------------------------------------\n\nAfter you start the front-end template, you can use it to interact with the Nicks pallet you just added to the runtime.\n\nTo set a nickname for an account:\n\n1.  Check the account selection list to verify that the Alice account is currently selected.\n2.  In the Pallet Interactor component, verify that **Extrinsic** is selected.\n3.  Select **nicks** from the list of pallets available to call.\n4.  Select [**setName**](https://paritytech.github.io/substrate/master/pallet_nicks/pallet/enum.Call.html#variant.set_name)\n     as the function to call from the nicks pallet.\n5.  Type a **name** that is longer than the `MinNickLength` (8 characters) and no longer than the `MaxNickLength` (32 characters).\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='823.407917383821' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Select the pallet and the function to call](https://docs.substrate.io/static/6682bb5d6709134f63b2151d36e3314f/5b29a/set-name-function.png)\n    \n6.  Click **Signed** to execute the function.\n7.  Observe the status of the call change from Ready to InBlock to Finalized and the note the [events](https://paritytech.github.io/substrate/master/pallet_nicks/pallet/enum.Event.html)\n     emitted by the Nicks pallet.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='514' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Successful update to the nickname for Alice](https://docs.substrate.io/static/6d25ff84c6b588e9424f06ff09667c75/8d54a/set-name-result.png)\n    \n\n[](/tutorials/build-application-logic/add-a-pallet/#query-information-for-an-account-using-the-nicks-pallet)\nQuery information for an account using the Nicks pallet\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nNext, you can use Query capability to read the value of Alice's nickname from the runtime storage for the Nicks pallet.\n\nTo return the information stored for Alice:\n\n1.  In the Pallet Interactor component, select **Query** as the Interaction Type.\n2.  Select **nicks** from the list of pallets available to query.\n3.  Select [**nameOf**](https://paritytech.github.io/substrate/master/pallet_nicks/pallet/enum.Call.html#variant.set_name)\n     as the function to call.\n4.  Copy and paste the address for the **alice** account in the AccountId field, then click **Query**.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='399.320882852292' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Read a name](https://docs.substrate.io/static/dc0162128e89fbde5b9b1a48ab1aa3ef/e1811/Alice-query-result.png)\n    \n    The return type is a tuple that contains two values:\n    \n    *   The hex-encoded nickname for the Alice account `53756273747261746520737570657273746172202d20416c696365`. If you convert the hex-encoded value to a string, you'll see the name you specified for the `setName` function.\n    *   The amount that was reserved from Alice's account to secure the nickname (`100`).\n    \n    If you were to query the Nicks pallet for the `nameOf` for Bob's account, you would see the value `None` returned because Bob has not invoked the `setName` function to reserve a nickname.\n    \n\n[](/tutorials/build-application-logic/add-a-pallet/#explore-additional-functions)\nExplore additional functions\n--------------------------------------------------------------------------------------------------------------\n\nThis tutorial illustrates how to add a simple pallet to the runtime and demonstrates how to interact with the new pallet using the predefined front-end template. In this case, you added the `nicks` pallet to the runtime and called the `set_name` and `nameOf` functions using the front-end template. The `nicks` pallet also provides two additional functions\u2014the `clear_name` function and the `kill_name` function\u2014that enable an account owner to remove the reserved name or a root-level user to forcibly remove an account name. You can learn about additional features\u2014such as the use of the Sudo pallet and origin accounts\u2014by exploring how these functions work. However, these features are beyond the intended scope of this tutorial. If you want to explore additional features exposed through the Nicks and Sudo pallets, see [Next steps](/tutorials/build-application-logic/add-a-pallet/#next-steps)\n and select [Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n.\n\n[](/tutorials/build-application-logic/add-a-pallet/#next-steps)\nNext steps\n--------------------------------------------------------------------------\n\nThere are several [tutorials](/tutorials/)\n that can serve as next steps for learning more about Substrate development.\n\n*   [Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n     explores calling functions using different originating accounts.\n*   [Develop smart contracts](/tutorials/smart-contracts/)\n     guide you through using ink! to build smart contracts.\n*   [Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n     illustrates how you can use macros to create your own pallets.\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/tutorials/build-application-logic/)\n[Next \u2192](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Tutorial objectives](#tutorial-objectives)\n[Add the Nicks pallet dependencies](#add-the-nicks-pallet-dependencies)\n[Review the configuration for Balances](#review-the-configuration-for-balances)\n[Implement the configuration for Nicks](#implement-the-configuration-for-nicks)\n[Start the blockchain node](#start-the-blockchain-node)\n[Start the front-end template](#start-the-front-end-template)\n[Set a nickname using the Nicks pallet](#set-a-nickname-using-the-nicks-pallet)\n[Query information for an account using the Nicks pallet](#query-information-for-an-account-using-the-nicks-pallet)\n[Explore additional functions](#explore-additional-functions)\n[Next steps](#next-steps)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/build-application-logic/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Tutorials](/tutorials/)\nBuild application logic\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/build-application-logic/index.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nBuild application logic\n=======================\n\nThe **Build application logic** tutorials focus on how you can customize the runtime using pallets, including how to add simple and complex pallets to the runtime and how to use pallets in combination with smart contracts. You'll learn how to:\n\n*   [Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n     introduces the common steps for adding a simple predefined pallet to the node template runtime.\n*   [Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n     illustrates how to create a custom pallet using macros.\n*   [Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n     demonstrates how you can specify the account to use as the originator of a function call.\n*   [Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n     illustrates how to modify a pallet to include an offchain worker and configure the pallet and runtime to enable the offchain worker to submit transactions that update the on-chain state.\n*   [Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n     illustrates how to publish custom pallets and crates so they are available to the community.\n\nIf you want to experiment with smart contract development for your blockchain, you should use the preconfigured [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node)\n instead of the standard node template. There are compatibility issues between the pallets that support smart contracts and the current node template. To resolve these compatibility issues would require extensive changes to the configuration of the standard node template, including using older versions of all crates and modifying multiple files. To dive directly into smart contract development, see the tutorials in [Develop smart contracts](/tutorials/smart-contracts/)\n.\n\n**Last edit:** April 3, 2023\n\n[\u2190 Previous](/tutorials/build-a-blockchain/upgrade-a-running-network/)\n[Next \u2192](/tutorials/build-application-logic/add-a-pallet/)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/build-application-logic/publish-custom-pallets/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Tutorials](/tutorials/)\n[Build application logic](/tutorials/build-application-logic/)\nPublish custom pallets\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/build-application-logic/publish-custom-pallets.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nPublish custom pallets\n======================\n\nAs a blockchain builder or parachain developer, you have access to a large library of specialized pallets that you can assemble to customize your runtime to suite your specific project goals. To get a general sense of the number of the predefined pallets currently available, explore the Substrate [FRAME repository](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame)\n. The selection of pallets available and the use cases they address is continuously evolving, including with many contributions from community members.\n\nAs you begin writing your own custom pallets to execute application-specific logic, you might find that your custom logic would benefit other teams or the broader ecosystem as a whole. If you have custom pallets that you want to share with the community, you can publish them in a publicly-accessible forum such as GitHub or crates.io.\n\nThis tutorial summarizes the steps for publishing your custom pallets and making them available as open source projects for other developers to use.\n\n[](/tutorials/build-application-logic/publish-custom-pallets/#publishing-on-github)\nPublishing on GitHub\n--------------------------------------------------------------------------------------------------------\n\nTo publish your pallet on GitHub:\n\n1.  [Create a GitHub repository](https://help.github.com/en/articles/create-a-repo)\n    .\n    \n    Select **Public** for the repository visibility.\n    \n2.  [Push all of the source code](https://help.github.com/en/articles/pushing-to-a-remote)\n     for your pallet to the remote repository.\n3.  Add a [README](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)\n     file that describes the functions and usage for your pallet.\n4.  Add a LICENSE, CODE-OF-CONDUCT, CONTRIBUTING, or other files to the repository, as needed.\n\nAfter you publish the pallet, other developers can import it into their runtime by including it in the `Cargo.toml` file as follows:\n\n1.  Open a terminal shell and change to the root directory for the node template.\n2.  Open the `runtime/Cargo.toml` configuration file in a text editor.\n3.  Locate the \\[dependencies\\] section.\n4.  Add a line similar to the following:\n    \n        your-pallet-name = { version = \"1.0.0\", default-features = false, git = \"https://github.com/<your-organization-name>/<your-pallet-repo-name>\", branch = \"<default-or-specific-branch-name\" }\n    \n    If you want developers to use a specific tag or commit for importing the pallet, you should include this information in the README.\n    \n\n[](/tutorials/build-application-logic/publish-custom-pallets/#publishing-on-cratesio)\nPublishing on crates.io\n-------------------------------------------------------------------------------------------------------------\n\nThe Rust community maintains the [crates.io](https://crates.io/)\n website to allow permissionless publishing of any Rust module. You could learn the procedure by following their guide on how to [publish on crates.io](https://doc.rust-lang.org/cargo/reference/publishing.html)\n.\n\nAfter you publish the pallet, other developers can import it into their runtime by including it in the `Cargo.toml` file as follows:\n\n1.  Open a terminal shell and change to the root directory for the node template.\n2.  Open the `runtime/Cargo.toml` configuration file in a text editor.\n3.  Locate the \\[dependencies\\] section.\n4.  Add a line similar to the following:\n    \n        your-pallet-name = { version = \"<compatible-version>\", default-features = false }\n    \n    If you publish the pallet on crates.io, developers don't need to specify a target destination. By default, cargo searches for the specified package in the crates.io registry.\n    \n\n[](/tutorials/build-application-logic/publish-custom-pallets/#where-to-go-next)\nWhere to go next\n------------------------------------------------------------------------------------------------\n\n*   [Runtime development](/learn/runtime-development/)\n    \n*   [Custom pallets](/build/custom-pallets/)\n    \n*   [Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n    \n*   [How-to: Import a pallet](/reference/how-to-guides/basics/import-a-pallet/)\n    .\n\n**Last edit:** September 4, 2023\n\n[\u2190 Previous](/tutorials/build-application-logic/add-offchain-workers/)\n[Next \u2192](/tutorials/collectibles-workshop/)\n\nON THIS PAGE\n\n[Publishing on GitHub](#publishing-on-github)\n[Publishing on crates.io](#publishing-on-cratesio)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/build-application-logic/specify-the-origin-for-a-call/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Tutorials](/tutorials/)\n[Build application logic](/tutorials/build-application-logic/)\nSpecify the origin for a call\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/build-application-logic/specify-the-origin-for-a-call.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nSpecify the origin for a call\n=============================\n\nIn [Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n, you added functions from `pallet_nicks` to the [Substrate node template](https://github.com/substrate-developer-hub/substrate-node-template)\n runtime.\n\nThe Nicks pallet allows blockchain users to pay a deposit to reserve a nickname for an account they control. It implements the following functions:\n\n*   The `set_name` function to enable an account owner to set the name of his or her own account if the name is not already reserved.\n*   The `clear_name` function to enable an account owner to remove the name associated with an account and return the deposit.\n*   The `kill_name` function to forcibly remove an account name for another party without returning the deposit.\n*   The `force_name` function to set an account name for another party without requiring a deposit.\n\nThis tutorial illustrates how you can call these functions using different originating accounts and why calling the functions using different originating accounts matters.\n\n[](/tutorials/build-application-logic/specify-the-origin-for-a-call/#before-you-begin)\nBefore you begin\n-------------------------------------------------------------------------------------------------------\n\nBefore you begin, verify the following:\n\n*   You have configured your environment for Substrate development by installing [Rust and the Rust toolchain](/install/)\n    .\n*   You have the Substrate node template installed locally.\n*   You have the Substrate front-end template installed locally.\n*   You have completed the [Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n     tutorial and successfully compiled the runtime that includes the `nicks` pallet.\n*   You are generally familiar with software development and using command-line interfaces.\n\n[](/tutorials/build-application-logic/specify-the-origin-for-a-call/#tutorial-objectives)\nTutorial objectives\n-------------------------------------------------------------------------------------------------------------\n\nBy completing this tutorial, you will accomplish the following objectives:\n\n*   Call the `set_name` function using an account that has permission to execute the call.\n*   Call the `clear_name` function using an account that has permission to execute the call.\n*   Call the `force_name` function using an account that isn't allowed to execute the call.\n*   Call the `kill_name` function using an origin that doesn't have administrative privileges.\n*   Call the `kill_name` function using the `Root` origin account.\n*   See how calling function using different origin accounts can lead to failed or successful results.\n\n[](/tutorials/build-application-logic/specify-the-origin-for-a-call/#identify-the-administrative-account)\nIdentify the administrative account\n---------------------------------------------------------------------------------------------------------------------------------------------\n\nAs you saw in [Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n, the `Config` trait for the `nicks` pallet declares several types. For this tutorial, the focus is on the `ForceOrigin` type. The `ForceOrigin` type is used to specify the account that can perform certain operations. For this pallet, the `ForceOrigin` type specifies the account that can set or remove a name for another account. Typically, only an account with administrative privileges\u2014such as a root superuser account\u2014can act on behalf of another account. In the case of the Nicks pallet, only the owner of an account or the Root account can set or remove a reserved nickname. You configured this Root account in the implementation (`impl`) block when you identified the FRAME System [`Root` origin](https://paritytech.github.io/substrate/master/frame_system/enum.RawOrigin.html#variant.Root)\n as the `nicks` pallet administrator. For example:\n\n    type ForceOrigin = frame_system::EnsureRoot<AccountId>;\n\nIn the development [chain specification](https://github.com/substrate-developer-hub/substrate-node-template/blob/main/node/src/chain_spec.rs)\n for the node template, the [Sudo pallet](https://paritytech.github.io/substrate/master/pallet_sudo/index.html)\n is configured to use the Alice account as the FRAME system `Root` origin. As a result of this configuration, by default, only the Alice account can call the functions that require the `ForceOrigin` type.\n\nIf you attempt to call the `kill_name` or `force_name` with an account other than the Alice account, the call will fail to be executed.\n\n[](/tutorials/build-application-logic/specify-the-origin-for-a-call/#set-the-name-for-an-account)\nSet the name for an account\n-----------------------------------------------------------------------------------------------------------------------------\n\nTo demonstrate how the origin for a call affects operations, let's set and try to forcibly remove the account name for another account. For this demonstration, be sure you have:\n\n*   The node template running in development mode: `./target/release/node-template --dev`\n*   The frontend template running and connecting to the local node: `yarn start`\n*   Your browser connected to the local web server: [http://localhost:8000/](http://localhost:8000/)\n    \n*   Change the active account in the front-end template from Alice to Bob.\n*   With **Extrinsic** selected in the Pallet Interactor:\n    \n    *   Select the `nicks` pallet.\n    *   Select the `setName` function.\n    *   Type a name for the account.\n    *   Click **Signed** to submit this transaction signed by Bob.\n    \n    Because Bob is the owner of this account, the transaction is successful. As the owner of the account, Bob can also execute the `clearName` function in a signed transaction to remove the nickname for the account.\n    \n*   With **Extrinsic** selected:\n    \n    *   Select the `nicks` pallet.\n    *   Select the `clearName` function.\n    *   Click **Signed** to submit this transaction signed by Bob.\n        \n        Because Bob is the owner of this account, the transaction is successful. For Bob to set or remove the nickname for another account, he must call the `forceName` or `killName` function using the `ForceOrigin` that was configured for the pallet.\n        \n*   With **Extrinsic** selected:\n    \n    *   Select the `nicks` pallet.\n    *   Select the `forceName` function.\n    *   Copy and paste the account address for Charlie as the target.\n    *   Type a name for the account.\n    *   Click **Signed** to submit this transaction signed by Bob.\n    \n    Because you signed this transaction using Bob's account, the function is dispatched using the [`Signed` origin](https://paritytech.github.io/substrate/master/frame_system/enum.RawOrigin.html#variant.Signed)\n     rather than the `Root` origin. In this case, the function call itself is successful. However, the name reservation can't be completed and a `BadOrigin` error is emitted as a result.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='443' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![BadOrigin error](https://docs.substrate.io/static/1280499f8f4c7721f3e561ddf9932f10/03fc3/badOrigin.png)\n    \n    As you can see in the Events, the transaction resulted in a withdrawal from Bob's account as a [fee](/build/tx-weights-fees/)\n     for submitting the transaction, but there were no state changes because the `Root` origin didn't submit the transaction. The failure to change state also illustrates the [verify-first-write-last](/build/runtime-storage/#verify-first-write-last)\n     principle for database reads and writes to ensure only successful operations are committed to disk.\n    \n\n[](/tutorials/build-application-logic/specify-the-origin-for-a-call/#use-the-root-origin-to-dispatch-a-call)\nUse the Root origin to dispatch a call\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\nThe Sudo pallet enables you to dispatch a call using the `Root` origin. In the Nick pallet, the forceName and killName functions must be called using the `Root` origin as specified by the `ForceOrigin` configuration. In the front-end template, you can access the Sudo pallet to dispatch a call using the `Root` origin by clicking **SUDO**.\n\nFor this demonstration, be sure you have:\n\n*   The node template running in development mode: `./target/release/node-template --dev`\n*   The frontend template running and connecting to the local node: `yarn start`\n*   Your browser connected to the local web server: [http://localhost:8000/](http://localhost:8000/)\n    \n*   Change the active account to Alice.\n    \n    As mentioned in [Identify the administrative account](/tutorials/build-application-logic/specify-the-origin-for-a-call/#identify-the-administrative-account)\n    , Alice is the account associated with the `Root` origin when running the chain in development mode.\n    \n*   With **Extrinsic** selected in the Pallet Interactor:\n    \n    *   Select the `nicks` pallet.\n    *   Select the `forceName` function.\n    *   Copy and paste the account address for Charlie as the target.\n    *   Type a name for the account.\n    *   Click **SUDO** to submit this transaction using the `Root` origin.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='559' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Use SUDO to submit a transaction](https://docs.substrate.io/static/b34e35ae5aa0307649b635bfcf0e3161/38c66/sudo-tx.png)\n    \n*   With **Extrinsic** selected:\n    \n    *   Select the `nicks` pallet.\n    *   Select the `killName` function.\n    *   Copy and paste the account address for Bob as the target.\n    *   Click **SUDO** to submit this transaction using the `Root` origin.\n    \n    In this case, the Sudo pallet emits a [`Sudid` event](https://paritytech.github.io/substrate/master/pallet_sudo/pallet/enum.Event.html)\n     to inform network participants that the `Root` origin dispatched a call, but an error occurred.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='515' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Submitting a killName function emitted an error](https://docs.substrate.io/static/c391243c1fb3825c022199097287cea1/a21a8/sudo-error.png)\n    \n    This dispatch error includes two pieces of metadata:\n    \n    *   an `index` number that indicates the pallet from which the error originated.\n    *   an `error` number that indicates the error emitted from that pallet's `Error` enum.\n    \n    The `index` number corresponds with the position of the pallet within the `construct_runtime!` macro, with the _first_ pallet in the `construct_runtime!` macro having an index number of zero (0).\n    \n    In this example, the `index` is `6` (the _seventh_ pallet) and the `error` is `2` (the _third_ error).\n    \n        construct_runtime!(\n        pub enum Runtime where\n          Block = Block,\n          NodeBlock = opaque::Block,\n          UncheckedExtrinsic = UncheckedExtrinsic\n        {\n          System: frame_system,                                        // index 0\n          RandomnessCollectiveFlip: pallet_randomness_collective_flip, // index 1\n          Timestamp: pallet_timestamp,                                 // index 2\n          Aura: pallet_aura,                                           // index 3\n          Grandpa: pallet_grandpa,                                     // index 4\n          Balances: pallet_balances,                                   // index 5\n          Nicks: pallet_nicks,                                         // index 6\n        }\n    \n    Regardless of the value of `index`, the `error` value `2` corresponds to the [`Unnamed` error](https://paritytech.github.io/substrate/master/pallet_nicks/pallet/enum.Error.html)\n     in the Nicks pallet. This is the error you would expect if Bob has not reserved a nickname or has previously cleared the name reservation.\n    \n    You can confirm that Alice can use SUDO to invoke the `killName` function to remove the nickname reserved for any account that has currently has a name reserved.\n    \n*   With **Extrinsic** selected:\n    \n    *   Select the `nicks` pallet.\n    *   Select the `killName` function.\n    *   Copy and paste the account address for Charlie as the target.\n    *   Click **SUDO** to submit this transaction using the `Root` origin.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='515' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Submitting a successfuk killName transaction](https://docs.substrate.io/static/c391243c1fb3825c022199097287cea1/a21a8/sudo-error.png)\n    \n\n[](/tutorials/build-application-logic/specify-the-origin-for-a-call/#where-to-go-next)\nWhere to go next\n-------------------------------------------------------------------------------------------------------\n\nThis tutorial introduced the use of `Root` and `Signed` origins to specify the account used to submit a transaction and demonstrated the results of using different originating accounts to call functions. There are several [tutorials](/tutorials/)\n that can serve as next steps for learning more about Substrate development.\n\nIn addition to tutorials, you might want to explore the following resources to learn more.\n\n*   [Privileged calls and origins](/build/origins/)\n     provides a closer look at the default raw origin types and how to create custom origins.\n*   [Events and errors](/build/events-and-errors/)\n     explains how to emit events and errors from the runtime.\n*   [FRAME pallets](/reference/frame-pallets/)\n     offers an overview of the most commonly-used predefined FRAME pallets.\n\n**Last edit:** May 7, 2023\n\n[\u2190 Previous](/tutorials/build-application-logic/add-a-pallet/)\n[Next \u2192](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n\nON THIS PAGE\n\n[Before you begin](#before-you-begin)\n[Tutorial objectives](#tutorial-objectives)\n[Identify the administrative account](#identify-the-administrative-account)\n[Set the name for an account](#set-the-name-for-an-account)\n[Use the Root origin to dispatch a call](#use-the-root-origin-to-dispatch-a-call)\n[Where to go next](#where-to-go-next)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}, {"title": null, "description": null, "source_url": "https://docs.substrate.io/tutorials/build-application-logic/use-macros-in-a-custom-pallet/", "markdown": "[](https://substrate.io)\n\n*   Technology\n*   Developers\n*   Vision\n*   Ecosystem\n\n[Docs](https://docs.substrate.io/)\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n\u00a0 Documentation\n\nSearch documentation\n\n*   [Quick start](/quick-start/)\n    \n\n*   [Learn](/learn/)\n    \n\n*   [Install](/install/)\n    \n\n*   [Build](/build/)\n    \n\n*   [Test](/test/)\n    \n\n*   [Deploy](/deploy/)\n    \n\n*   [Maintain](/maintain/)\n    \n\n*   [Tutorials](/tutorials/)\n    *   [Build a blockchain](/tutorials/build-a-blockchain/)\n        \n    *   [Build application logic](/tutorials/build-application-logic/)\n        [*   Add a pallet to the runtime](/tutorials/build-application-logic/add-a-pallet/)\n        [*   Specify the origin for a call](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n        [*   Use macros in a custom pallet](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/)\n        [*   Add offchain workers](/tutorials/build-application-logic/add-offchain-workers/)\n        [*   Publish custom pallets](/tutorials/build-application-logic/publish-custom-pallets/)\n        [*   Collectibles workshop](/tutorials/collectibles-workshop/)\n        \n    *   [Build a parachain](/tutorials/build-a-parachain/)\n        \n\n*   [Reference](/reference/)\n    \n\n*   [Community](/community/)\n    \n\n[Home](/)\n[Tutorials](/tutorials/)\n[Build application logic](/tutorials/build-application-logic/)\nUse macros in a custom pallet\n\n[Edit this page](https://github.com/substrate-developer-hub/substrate-docs/blob/main/content/md/en/docs/tutorials/build-application-logic/use-macros-in-a-custom-pallet.md)\n | [Submit an issue](https://github.com/substrate-developer-hub/substrate-docs/issues/new/choose)\n\nUse macros in a custom pallet\n=============================\n\nThis tutorial illustrates how to create a custom pallet for a Substrate runtime using **macros** that are part of the [FRAME](/reference/frame-macros/)\n development environment.\n\nFor this tutorial, you'll build a simple **proof-of-existence** application. Proof-of-existence is an approach to validating the authenticity and ownership of a digital object by storing information about the object on the blockchain. Because the blockchain associates a timestamp and account with the object, the blockchain record can be used to \"prove\" that a particular object existed at a specific date and time. It can also verify who the owner of a record was at that date and time.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#digital-objects-and-hashes)\nDigital objects and hashes\n---------------------------------------------------------------------------------------------------------------------------\n\nInstead of storing an entire file on the blockchain, it can be much more efficient to simply store a [cryptographic hash](https://en.wikipedia.org/wiki/Cryptographic_hash_function)\n of that file. This is also known as a \"digital fingerprint\". The hash enables the blockchain to store files of arbitrary size efficiently by using a small and unique hash value. Because any change to a file would result in a different hash, users can prove the validity of a file by computing the hash and comparing that hash with the hash stored on chain.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='373' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![File Hash](https://docs.substrate.io/static/77bf39ee00dd51777a57e249152bbc23/e3fc7/file-hash.png)\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#digital-objects-and-account-signatures)\nDigital objects and account signatures\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\nBlockchains use [public key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography)\n to map digital identities to accounts that have private keys. The blockchain records the account you use to store the hash for a digital object as part of the transaction. Because the account information is stored as part of the transaction, the controller of the private key for that account can later prove ownership as the person who initially uploaded the file.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#how-much-time-do-you-need-to-complete-this-tutorial)\nHow much time do you need to complete this tutorial?\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThis tutorial requires compiling Rust code and takes approximately one to two hours to complete.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#before-you-begin)\nBefore you begin\n-------------------------------------------------------------------------------------------------------\n\nBefore you begin, verify the following:\n\n*   You have configured your environment for Substrate development by installing [Rust and the Rust toolchain](/install/)\n    .\n*   You have cloned the [Substrate node template](https://github.com/substrate-developer-hub/substrate-node-template)\n    , which will be used as the starting point for this tutorial.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#tutorial-objectives)\nTutorial objectives\n-------------------------------------------------------------------------------------------------------------\n\nBy completing this tutorial, you will accomplish the following objectives:\n\n*   Learn the basic structure of a custom pallet.\n*   See examples of how Rust macros simplify the code you need to write.\n*   Start a blockchain node that contains a custom pallet.\n*   Interact with a front-end that exposes the proof-of-existence pallet.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#application-design)\nApplication design\n-----------------------------------------------------------------------------------------------------------\n\nThe proof-of-existence application exposes two callable functions:\n\n*   `create_claim()` allows a user to claim the existence of a file by uploading a hash.\n*   `revoke_claim()` allows the current owner of a claim to revoke ownership.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#build-a-custom-pallet)\nBuild a custom pallet\n-----------------------------------------------------------------------------------------------------------------\n\nThe Substrate node template has a FRAME-based runtime. As you learned in [Runtime development](/learn/runtime-development/)\n, FRAME is a library of code that allows you to build a Substrate runtime by composing modules called pallets. You can think of the pallets as specialized logical units that define what your blockchain can do. Substrate provides you with a number of pre-built pallets for use in FRAME-based runtimes.\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1454.9999999999998' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Runtime composition](https://docs.substrate.io/static/2176e7d647764b135ea6bcd1fc93905a/43530/frame-runtime.png)\n\nThis tutorial demonstrates how to create your own FRAME pallet to be included in your custom blockchain.\n\n### [](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#set-up-scaffolding-for-your-pallet)\nSet up scaffolding for your pallet\n\nThis tutorial demonstrates how to create a custom pallet from scratch. Therefore, the first step is to remove some files and content from the files in the node template directory.\n\n1.  Open a terminal shell and navigate to the root directory for the node template.\n2.  Change to the `pallets/template/src` directory by running the following command:\n    \n        cd pallets/template/src\n    \n3.  Remove the following files:\n    \n        benchmarking.rs\n        mock.rs\n        tests.rs\n    \n4.  Open the `lib.rs` file in a text editor.\n    \n    This file contains code that you can use as a template for a new pallet. You won't be using the template code in this tutorial. However, you can review the template code to see what it provides before you delete it.\n    \n5.  Delete all of the lines in the `lib.rs` file, and replace it with the skeleton of a custom pallet:\n    \n        // All pallets must be configured for `no_std`.\n        #![cfg_attr(not(feature = \"std\"), no_std)]\n        \n        // Re-export pallet items so that they can be accessed from the crate namespace.\n        pub use pallet::*;\n        \n        #[frame_support::pallet]\n        pub mod pallet {\n         use frame_support::pallet_prelude::*;\n         use frame_system::pallet_prelude::*;\n        \n         #[pallet::pallet]\n         pub struct Pallet<T>(_);\n        \n         #[pallet::config]  // <-- Step 2. code block will replace this.\n         #[pallet::event]   // <-- Step 3. code block will replace this.\n         #[pallet::error]   // <-- Step 4. code block will replace this.\n         #[pallet::storage] // <-- Step 5. code block will replace this.\n         #[pallet::call]    // <-- Step 6. code block will replace this.\n        }\n        \n        pub mod weights {\n          // Placeholder struct for the pallet weights\n          pub struct SubstrateWeight<T>(core::marker::PhantomData<T>);\n        }\n    \n    You now have a framework that includes placeholders for _events_, _errors_, _storage_, and _callable functions_.\n    \n    > NOTE: Pallet weights are outside the scope of this tutorial. If you want to learn more about weights, you can read our documentation [here](/reference/how-to-guides/weights/)\n    > .\n    \n6.  Save your changes.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#configure-the-pallet-to-emit-events)\nConfigure the pallet to emit events\n---------------------------------------------------------------------------------------------------------------------------------------------\n\nEvery pallet has a [Rust \"trait\"](https://doc.rust-lang.org/book/ch10-02-traits.html)\n called `Config`. You use this trait to expose configurable options and connect your pallet to other parts of the runtime. For this tutorial, we need to configure out pallet to emit events.\n\nTo define the `Config` trait for the proof-of-existence pallet:\n\n1.  Open the `pallets/template/src/lib.rs` file in a text editor.\n2.  Replace the `#[pallet::config]` line with the following code block:\n    \n        /// Configure the pallet by specifying the parameters and types on which it depends.\n        #[pallet::config]\n        pub trait Config: frame_system::Config {\n         /// Because this pallet emits events, it depends on the runtime's definition of an event.\n         type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;\n          /// Pallets use weights to measure the complexity of the callable functions.\n          /// Configuring weights is outside the scope of this tutorial, so we will leave it empty for now.\n          type WeightInfo;\n        }\n    \n3.  Save your changes.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#implement-pallet-events)\nImplement pallet events\n---------------------------------------------------------------------------------------------------------------------\n\nNow that you've configured the pallet to emit events, you are ready to define those events. Based on the [application design](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#application-design)\n, we want the proof-of-existence pallet to emit an event under the following conditions:\n\n*   When a new claim is added to the blockchain.\n*   When a claim is revoked.\n\nEach event can include an `AccountId` to identify who triggered the event and a `Hash`, representing the proof-of-existence claim that is being stored or removed.\n\nTo implement the pallet events:\n\n1.  Open the `pallets/template/src/lib.rs` file in a text editor.\n2.  Replace the `#[pallet::event]` line with the following code block:\n    \n        // Pallets use events to inform users when important changes are made.\n        // Event documentation should end with an array that provides descriptive names for parameters.\n        #[pallet::event]\n        #[pallet::generate_deposit(pub(super) fn deposit_event)]\n        pub enum Event<T: Config> {\n         /// Event emitted when a claim has been created.\n         ClaimCreated { who: T::AccountId, claim: T::Hash },\n         /// Event emitted when a claim is revoked by the owner.\n         ClaimRevoked { who: T::AccountId, claim: T::Hash },\n        }\n    \n3.  Save your changes.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#include-pallet-errors)\nInclude pallet errors\n-----------------------------------------------------------------------------------------------------------------\n\nThe events you defined indicate when calls to the pallet have completed successfully. Errors indicate that a call has failed, and why it has failed. For this tutorial, you define the following error conditions:\n\n*   An attempt to make a claim when a claim already exists.\n*   An attempt to revoke a claim that doesn't exist.\n*   An attempt to revoke a claim that is owned by another account.\n\nTo implement the errors for the proof-of-existence pallet:\n\n1.  Open the `pallets/template/src/lib.rs` file in a text editor.\n2.  Replace the `#[pallet::error]` line with the following code block:\n    \n        #[pallet::error]\n        pub enum Error<T> {\n         /// The claim already exists.\n         AlreadyClaimed,\n         /// The claim does not exist, so it cannot be revoked.\n         NoSuchClaim,\n         /// The claim is owned by another account, so caller can't revoke it.\n         NotClaimOwner,\n        }\n    \n3.  Save your changes.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#implement-a-storage-map-for-stored-items)\nImplement a storage map for stored items\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n\nTo add a new claim to the blockchain, the proof-of-existence pallet requires a storage mechanism. To address this requirement, you can create a key-value map, where each claim points to the owner and the block number when the claim was made. To create this key-value map, you can use the FRAME [`StorageMap`](https://paritytech.github.io/polkadot-sdk/master/frame_support/storage/types/struct.StorageMap.html)\n.\n\nTo implement storage for the proof-of-existence pallet:\n\n1.  Open the `pallets/template/src/lib.rs` file in a text editor.\n2.  Replace the `#[pallet::storage]` line with the following code block:\n    \n        #[pallet::storage]\n        pub(super) type Claims<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, (T::AccountId, BlockNumberFor<T>)>;\n    \n3.  Save your changes.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#implement-callable-functions)\nImplement callable functions\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe proof-of-existence pallet exposes two callable functions to users:\n\n*   `create_claim()` allows a user to claim the existence of a file with a hash.\n*   `revoke_claim()` allows the owner of a claim to revoke the claim.\n\nThese functions use the `StorageMap` to implement the following logic:\n\n*   If a claim is already in storage, then it already has an owner and cannot be claimed again.\n*   If a claim doesn't exist in storage, then it is available to be claimed and written to storage.\n\nTo implement this logic in the proof-of-existence pallet:\n\n1.  Open the `pallets/template/src/lib.rs` file in a text editor.\n2.  Replace the `#[pallet::call]` line with the following code block. You might try to implement the `revoke_claim` function yourself. Just copy the function signature and not the content. The `Claims::<T>::get` and `Claims::<T>::remove` should be used to get or remove a claim.\n    \n        // Dispatchable functions allow users to interact with the pallet and invoke state changes.\n        // These functions materialize as \"extrinsics\", which are often compared to transactions.\n        // Dispatchable functions must be annotated with a weight and must return a DispatchResult.\n        #[pallet::call]\n        impl<T: Config> Pallet<T> {\n         #[pallet::weight(Weight::default())]\n         #[pallet::call_index(0)]\n         pub fn create_claim(origin: OriginFor<T>, claim: T::Hash) -> DispatchResult {\n           // Check that the extrinsic was signed and get the signer.\n           // This function will return an error if the extrinsic is not signed.\n           let sender = ensure_signed(origin)?;\n        \n           // Verify that the specified claim has not already been stored.\n           ensure!(!Claims::<T>::contains_key(&claim), Error::<T>::AlreadyClaimed);\n        \n           // Get the block number from the FRAME System pallet.\n           let current_block = <frame_system::Pallet<T>>::block_number();\n        \n           // Store the claim with the sender and block number.\n           Claims::<T>::insert(&claim, (&sender, current_block));\n        \n           // Emit an event that the claim was created.\n           Self::deposit_event(Event::ClaimCreated { who: sender, claim });\n        \n           Ok(())\n         }\n        \n         #[pallet::weight(Weight::default())]\n         #[pallet::call_index(1)]\n         pub fn revoke_claim(origin: OriginFor<T>, claim: T::Hash) -> DispatchResult {\n           // Check that the extrinsic was signed and get the signer.\n           // This function will return an error if the extrinsic is not signed.\n           let sender = ensure_signed(origin)?;\n        \n           // Get owner of the claim, if none return an error.\n           let (owner, _) = Claims::<T>::get(&claim).ok_or(Error::<T>::NoSuchClaim)?;\n        \n           // Verify that sender of the current call is the claim owner.\n           ensure!(sender == owner, Error::<T>::NotClaimOwner);\n        \n           // Remove claim from storage.\n           Claims::<T>::remove(&claim);\n        \n           // Emit an event that the claim was erased.\n           Self::deposit_event(Event::ClaimRevoked { who: sender, claim });\n           Ok(())\n         }\n        }\n    \n3.  Save your changes and close the file.\n4.  Check that your pallet compiles by running the following command:\n    \n        cargo check -p pallet-template\n    \n    The `-p` flag tells cargo to only check the `pallet-template` that you have been modifying and saving you some compile time.\n    \n    You can refer to the node template [solution](https://github.com/substrate-developer-hub/substrate-node-template/blob/tutorials/solutions/proof-of-existence/pallets/template/src/lib.rs)\n     if you get stuck.\n    \n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#build-the-runtime-with-your-new-pallet)\nBuild the runtime with your new pallet\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\nAfter you've copied all of the parts of the proof-of-existence pallet into the `pallets/template/lib.rs`file, you are ready to compile and start the node.\n\nTo compile and start the updated Substrate node:\n\n1.  Open a terminal shell.\n2.  Change to the root directory for the node template.\n3.  Compile the node template by running the following command:\n    \n        cargo build --release\n    \n4.  Start the node in development mode by running the following command:\n    \n        ./target/release/node-template --dev\n    \n    The `--dev` option starts the node using the predefined `development` chain specification. Using the `--dev` option ensures that you have a clean working state any time you stop and restart the node.\n    \n5.  Verify the node produces blocks.\n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#interact-with-your-blockchain)\nInteract with your blockchain\n---------------------------------------------------------------------------------------------------------------------------------\n\nNow that you have a new blockchain running with the custom proof-of-existence pallet, we can interact with the chain to make sure all the functionality works as expected!\n\nTo do this, we will use Polkadot JS Apps, which is a developer tool that can connect to and interact with any Substrate based blockchain.\n\nBy default, your blockchain should be running on `ws://127.0.0.1:9944`, so to connect to it we can use this link:\n\n[https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/)\n\nIf your Substrate blockchain is running and Polkadot JS Apps is connected, you should see your block number increase in the top left corner:\n\n![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n\n![Polkadot JS Explorer](https://docs.substrate.io/static/15a80bb8b32d1139419e32ec0a272ef3/c9d0a/poe-explorer.png)\n\n### [](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#submit-a-claim)\nSubmit a claim\n\nTo test the proof-of-existence pallet using the front-end:\n\n1.  Navigate to the [\"Developer > Extrinsics\"](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/extrinsics)\n     tab.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Extrinsics Tab](https://docs.substrate.io/static/02b22719107810c50b0d097ea981b2de/c9d0a/poe-extrinsics-tab.png)\n    \n2.  Adjust the extrinsics page to select \"ALICE\" as the account, and \"templateModule > createClaim\" as the extrinsic.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Create Claim](https://docs.substrate.io/static/a0c068c577a1b0b27bd9794276f64020/c9d0a/poe-create-claim.png)\n    \n3.  Then you can toggle \"hash a file\", which will allow you to select a file to hash and claim on the blockchain.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Hash File](https://docs.substrate.io/static/52da2a9203ff706296976a19be83a2fc/c9d0a/poe-hash-file.png)\n    \n4.  Click \"Submit Transaction\" in the bottom right corner, then on the pop up click \"Sign and Submit\".\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Submit Extrinsic](https://docs.substrate.io/static/70d705ad32d33b32a118f3ec3046762e/c9d0a/poe-submit.png)\n    \n5.  If everything was successful, you should see a green extrinsic success notification!\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Extrinsic Success](https://docs.substrate.io/static/360dc1c8ee4d4bb017274999c354587b/c9d0a/poe-success.png)\n    \n\n### [](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#read-a-claim)\nRead a claim\n\nThe final step of this tutorial is to check what claims have been stored on your blockchain.\n\n1.  Navigate to the [\"Developer > Chain State\"](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/chainstate)\n     tab.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Chain State](https://docs.substrate.io/static/ca0f1e42cf0a715ad182a6b65bcb5a2c/c9d0a/poe-chain-state.png)\n    \n2.  Adjust the state query to \"templateModule > claims\".\n3.  Toggle off the \"include option\" on the hash input to leave the input empty.\n    \n    This will allow us to see all the claims, rather than just one at a time.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Query All Claims](https://docs.substrate.io/static/b5a3e99d9e861adf21d81c449357fca0/c9d0a/poe-claims.png)\n    \n4.  Press the \"+\" button to execute the query.\n    \n    ![](data:image/svg+xml;charset=utf-8,%3Csvg height='1169' width='1600' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)\n    \n    ![Query Results](https://docs.substrate.io/static/d8c2f18dfbaca5d8020acc79391613d4/c9d0a/poe-query.png)\n    \n    Now you can see that the claim is stored in the blockchain with the data about the owners address and the block number when the claim was made!\n    \n\n[](/tutorials/build-application-logic/use-macros-in-a-custom-pallet/#next-steps)\nNext steps\n-------------------------------------------------------------------------------------------\n\nIn this tutorial, you learned the basics of how to create a new custom pallet, including:\n\n*   How to add events, errors, storage, and callable functions to a custom pallet.\n*   How to integrate the custom pallet into the runtime.\n*   How to compile and start a node that includes your custom pallet.\n*   How you can use the Polkadot JS Apps developer tool to interact with your custom blockchain.\n\nThis tutorial covered the basics without diving too deeply into the code. However, there's much more you can do as you work toward building your own fully-customized blockchain. Custom pallets enable you to expose the features you want your blockchain to support.\n\nTo complete your understanding of the proof-of-existence chain try:\n\n*   Claiming the same file again with \"ALICE\" or even the \"BOB\" account.\n    \n    *   You should get an error!\n*   Claiming other files with the \"ALICE\" and/or \"BOB\" accounts.\n*   Revoking the claims with the appropriate claim owner account.\n*   Looking at the final list of claims from reading storage.\n\nTo learn more about what's possible by creating custom pallets, explore the FRAME documentation and the [how-to guides](/reference/how-to-guides/)\n.\n\n**Last edit:** January 21, 2024\n\n[\u2190 Previous](/tutorials/build-application-logic/specify-the-origin-for-a-call/)\n[Next \u2192](/tutorials/build-application-logic/add-offchain-workers/)\n\nON THIS PAGE\n\n[Digital objects and hashes](#digital-objects-and-hashes)\n[Digital objects and account signatures](#digital-objects-and-account-signatures)\n[How much time do you need to complete this tutorial?](#how-much-time-do-you-need-to-complete-this-tutorial)\n[Before you begin](#before-you-begin)\n[Tutorial objectives](#tutorial-objectives)\n[Application design](#application-design)\n[Build a custom pallet](#build-a-custom-pallet)\n[Configure the pallet to emit events](#configure-the-pallet-to-emit-events)\n[Implement pallet events](#implement-pallet-events)\n[Include pallet errors](#include-pallet-errors)\n[Implement a storage map for stored items](#implement-a-storage-map-for-stored-items)\n[Implement callable functions](#implement-callable-functions)\n[Build the runtime with your new pallet](#build-the-runtime-with-your-new-pallet)\n[Interact with your blockchain](#interact-with-your-blockchain)\n[Next steps](#next-steps)\n\n[](/)\n\n*   Technology\n    *   [Overview](https://substrate.io/technology/)\n        \n    *   [Flexible](https://substrate.io/technology/flexible/)\n        \n    *   [Open](https://substrate.io/technology/open/)\n        \n    *   [Interoperable](https://substrate.io/technology/interoperable/)\n        \n    *   [Future-Proof](https://substrate.io/technology/future-proof/)\n        \n*   Developers\n    *   [Home](https://substrate.io/developers/)\n        \n    *   [Docs](/)\n        \n    *   [Rust Docs](https://paritytech.github.io/substrate/master/sc_service/)\n        \n    *   [Smart Contracts](https://substrate.io/developers/smart-contracts/)\n        \n    *   [Substrate Connect](https://substrate.io/developers/substrate-connect/)\n        \n    *   [Rococo Network](https://substrate.io/developers/rococo-network/)\n        \n*   Vision\n    *   [Substrate & Polkadot](https://substrate.io/vision/substrate-and-polkadot/)\n        \n*   Ecosystem\n    *   [Home](https://substrate.io/ecosystem/)\n        \n    *   [Projects](https://substrate.io/ecosystem/projects/)\n        \n    *   [Builders Program](https://substrate.io/ecosystem/substrate-builders-program/)\n        \n    *   [Hackathons](https://substrate.io/ecosystem/opportunities/hackathons/)\n        \n    *   [Grants](https://substrate.io/ecosystem/opportunities/grants/)\n        \n    *   [Substrate Seminar](https://substrate.io/ecosystem/resources/seminar/)\n        \n    *   [Past Seminars](https://substrate.io/ecosystem/resources/past-seminars/)\n        \n    *   [Awesome Substrate](https://github.com/substrate-developer-hub/awesome-substrate/blob/master/README.md)\n        \n    *   [Contact](https://substrate.io/ecosystem/connect/contact/)\n        \n    *   [Events](https://www.parity.io/events/)\n        \n    *   [Newsletter](https://substrate.io/ecosystem/connect/newsletter/)\n        \n    *   [Blog](https://www.parity.io/blog/tag/parity-substrate/)\n        \n    *   [Square One](https://substrate.io/ecosystem/square-one/)\n        \n\n[](https://substrate.stackexchange.com)\n[](https://github.com/paritytech/)\n[](https://twitter.com/substrate_io)\n\n\u00a9 2024 Parity Technologies All Rights Reserved\n\n*   [Privacy Policy](https://www.parity.io/privacy/)\n    \n*   [Terms of Services](https://www.parity.io/terms/)\n    \n\n![spacer](https://cloudcdn-img.com/static/sbs/spacer.gif)"}]